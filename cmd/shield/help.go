package main

import (
	fmt "github.com/jhunt/go-ansi"
)

func ShowHelp(command string) {
	switch command {
	case "api": /* {{{ */
		fmt.Printf("USAGE: @G{shield} api [OPTIONS] @Y{ALIAS} @Y{URL}\n")
		fmt.Printf("\n")
		fmt.Printf("  Target a SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  Connects to the given SHIELD URL (i.e. @B{https://shield.example.com}),\n")
		fmt.Printf("  validates that it is healthy and trustworthy, and then saves the\n")
		fmt.Printf("  connection details in your @M{$SHIELD_CONFIG} or @M{--config}.\n")
		fmt.Printf("\n")
		fmt.Printf("  From then on, that SHIELD Core can be contacted by setting the\n")
		fmt.Printf("  @M{$SHIELD_CORE} environment variable to the supplied @M{ALIAS},\n")
		fmt.Printf("  or by passing @M{--config ALIAS} on the command-line, explicitly.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  -k, --skip-ssl-validate   Do not validate the SSL/TLS certificate\n")
		fmt.Printf("                            presented by the remote SHIELD Core.\n")
		fmt.Printf("                            @R{THIS IS HIGHLY DISCOURAGED.}\n")
		fmt.Printf("\n")
		fmt.Printf("  --ca-cert ...             Provide either a path to a CA certificate\n")
		fmt.Printf("  --ca-certificate ...      file, or the literal PEM data of an X.509\n")
		fmt.Printf("                            certificate representing the Certificate\n")
		fmt.Printf("                            Authority that signed the SHIELD Core's TLS\n")
		fmt.Printf("                            certificate.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "archive": /* {{{ */
		fmt.Printf("USAGE: @G{shield} archive --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Backup Archive.\n")
		fmt.Printf("\n")
		fmt.Printf("  When SHIELD successfully performs a backup operation, it generates\n")
		fmt.Printf("  a backup archive containing all of the protected data form that\n")
		fmt.Printf("  particular system, at that particular point in time.  This archive\n")
		fmt.Printf("  is then placed in cloud storage, awaiting either expiry and purgation,\n")
		fmt.Printf("  or restoration to a data system.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "archives": /* {{{ */
		fmt.Printf("USAGE: @G{shield} archives --tenant @Y{TENANT}\n")
		fmt.Printf("\n")
		fmt.Printf("  List Backup Archives.\n")
		fmt.Printf("\n")
		fmt.Printf("  When SHIELD successfully performs a backup operation, it generates\n")
		fmt.Printf("  a backup archive containing all of the protected data form that\n")
		fmt.Printf("  particular system, at that particular point in time.  This archive\n")
		fmt.Printf("  is then placed in cloud storage, awaiting either expiry and purgation,\n")
		fmt.Printf("  or restoration to a data system.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, the most recent 1000 archives, valid, purged, or otherwise,\n")
		fmt.Printf("  are displayed.  You may filter the results with the following flags.\n")
		fmt.Printf("\n")
		fmt.Printf("      --target   Show archives for the given target, specified either by\n")
		fmt.Printf("                 name or UUID.\n")
		fmt.Printf("\n")
		fmt.Printf("      --store    Show archives housed in the given cloud storage system,\n")
		fmt.Printf("                 specified either by name or UUID.\n")
		fmt.Printf("\n")
		fmt.Printf("  -l, --limit    Only show the given number of archives.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "auth-tokens": /* {{{ */
		fmt.Printf("USAGE: @G{shield} auth-tokens\n")
		fmt.Printf("\n")
		fmt.Printf("  Lists all issues authentication tokens.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD users can issue @W{authentication tokens}, which can be\n")
		fmt.Printf("  used in scripts and other automatons to represent the issuing\n")
		fmt.Printf("  account, and all of their privileges within the system.\n")
		fmt.Printf("\n")
		fmt.Printf("  If you are authenticated to a SHIELD Core, you can run this\n")
		fmt.Printf("  command to view the metadata, including names and creation / last\n")
		fmt.Printf("  used timestamps, of your issued authentication tokens.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "banish": /* {{{ */
		fmt.Printf("USAGE: @G{shield} banish --tenant @Y{TENANT} @Y{USER}\n")
		fmt.Printf("\n")
		fmt.Printf("  Banish a local user from a SHIELD Tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  Once banished, a user will be unable to interact with that tenant until\n")
		fmt.Printf("  they are extended another invitation, perhaps under a different role.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers},\n")
		fmt.Printf("        and @R{SHIELD Tenant Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("  This command only operates on one (user,tenant) pairing at a time.\n")
		fmt.Printf("  For bulk operations, either avail yourself of the SHIELD API, or run\n")
		fmt.Printf("  the command multiple times.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "cancel": /* {{{ */
		fmt.Printf("USAGE: @G{shield} cancel --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Cancel a running SHIELD Task.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever SHIELD needs to perform some bit of work, it generates a\n")
		fmt.Printf("  task object to keep track of the state of that work and hand it off\n")
		fmt.Printf("  to the various workers and SHIELD agents that will be responsible\n")
		fmt.Printf("  for seeing that the work gets done.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "cores": /* {{{ */
		fmt.Printf("USAGE: @G{shield} cores\n")
		fmt.Printf("\n")
		fmt.Printf("  Lists all known SHIELD Cores.\n")
		fmt.Printf("\n")
		fmt.Printf("  Consults your @M{$SHIELD_CONFIG} (or, if given, @M{--config}), and\n")
		fmt.Printf("  prints out pertinent information about each targeted core.\n")
		fmt.Printf("  This includes the URL, the alias, and any security parameters.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-auth-token": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-auth-token\n")
		fmt.Printf("\n")
		fmt.Printf("  Issue a new authentication token, for the current user.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD users can issue @W{authentication tokens}, which can be\n")
		fmt.Printf("  used in scripts and other automatons to represent the issuing\n")
		fmt.Printf("  account, and all of their privileges within the system.\n")
		fmt.Printf("\n")
		fmt.Printf("  This command contacts your currently targeted SHIELD Core, and\n")
		fmt.Printf("  asks it to issue a new token for authentication.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-global-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-global-store [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  Create a new Shared Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} Storage Systems created by this command will be visible\n")
		fmt.Printf("  to and accessible from all SHIELD Tenants, but you must be a site\n")
		fmt.Printf("  engineer to use them.  If you just want to configure storage for\n")
		fmt.Printf("  your tenant, see @C{shield create-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  The entire configuration of the new Cloud Storage System can be\n")
		fmt.Printf("  specified via command-line arguments.  You may also omit any or\n")
		fmt.Printf("  all of these flags and shield will prompt interactively for the\n")
		fmt.Printf("  missing information it needs (unless @C{--batch} is active.)\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name      The name of your new Cloud Storage System.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary   An optional, long-form description for the new\n")
		fmt.Printf("                  storage system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent     The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                  Agent that will be used for testing access to\n")
		fmt.Printf("                  the storage system, and also for purging expired\n")
		fmt.Printf("                  or manually deleted backup archives.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin    The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                  plugin must support \"store\" operations, and must\n")
		fmt.Printf("                  be available on the selected agent.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data      Configuration data for the storage plugin, in the\n")
		fmt.Printf("                  format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                  be required to quote this to avoid tokenization of\n")
		fmt.Printf("                  the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                  This field is optional, and may be specified multiple\n")
		fmt.Printf("                  times, either to provide new configuration key / values,\n")
		fmt.Printf("                  or to override configuration specified earlier in the\n")
		fmt.Printf("                  command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Create an authenticated WebDAV storage system:\n")
		fmt.Printf("  @W{shield create-global-store}               \\\n")
		fmt.Printf("      @Y{--name}    \"Local WebDAV\"             \\\n")
		fmt.Printf("      @Y{--agent}   10.0.0.42:5444             \\\n")
		fmt.Printf("      @Y{--plugin}  @B{webdav}                     \\\n")
		fmt.Printf("      @Y{--data}    @G{url}=@C{https://10.0.0.42:8443} \\\n")
		fmt.Printf("      @Y{--data}    @G{username}=@C{webdave}           \\\n")
		fmt.Printf("      @Y{--data}    @G{password}=@C{super-sekrit}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-job --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  Configure a new Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name      A name for your backup job.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary   An optional, long-form description for the job.\n")
		fmt.Printf("\n")
		fmt.Printf("  --target        The name or UUID of the target data system that\n")
		fmt.Printf("                  you want SHIELD to back up.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  --store         The name or UUID of the cloud storage system to\n")
		fmt.Printf("                  store backup archives in.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  --schedule      A @W{timespec} schedule description (see below),\n")
		fmt.Printf("                  instructing SHIELD how to schedule this job.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  --retain        How long to keep backup archives.  Can be given\n")
		fmt.Printf("                  in days (7d) or weeks (5w).\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  --paused        Don't schedule this job; in order for it to run,\n")
		fmt.Printf("                  an operator will have to manually kick it off.\n")
		fmt.Printf("\n")
		fmt.Printf("  --fixed-key     Encrypt backup archives with the fixed key.\n")
		fmt.Printf("                  Backups of SHIELD itself should use this option\n")
		fmt.Printf("                  to enable recovery in a disaster scenario\n")
		fmt.Printf("\n")
		fmt.Printf("  In @Y{--batch} mode, the name or UUID specified on the command-line\n")
		fmt.Printf("  must be \"unique enough\" for shield to determine what you meant.\n")
		fmt.Printf("  In interactive mode, you will be asked to narrow your search\n")
		fmt.Printf("  parameters if necessary.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  @W{shield create-job}                 \\\n")
		fmt.Printf("      @Y{--batch}                       \\\n")
		fmt.Printf("      @Y{--name}      Daily             \\\n")
		fmt.Printf("      @Y{--target}    \"Important Files\" \\\n")
		fmt.Printf("      @Y{--store}     \"Amazon S3\"       \\\n")
		fmt.Printf("      @Y{--schedule}  \"daily 4am\"       \\\n")
		fmt.Printf("      @Y{--retain}    14d\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Scheduling Syntax:}\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD uses a thing called @W{Timespec} for specifying job schedules.\n")
		fmt.Printf("  This mini-language is intended to be intuitive and readable.\n")
		fmt.Printf("\n")
		fmt.Printf("  Here are some examples.\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{daily 4am}           Runs every day at 4:00 in the morning.\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{every 2h from 0:15}  Run at 0:15, 2:15, 4:15, etc...\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{sundays at 16:32}    Runs weekly, on Sundays, at 4:32 in the afternoon.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-store --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  Create a new Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} Storage Systems created by this command will only be\n")
		fmt.Printf("  visible to and accessible from a single SHIELD Tenant.  If you\n")
		fmt.Printf("  want to create shared storage, see @C{shield create-global-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  The entire configuration of the new Cloud Storage System can be\n")
		fmt.Printf("  specified via command-line arguments.  You may also omit any or\n")
		fmt.Printf("  all of these flags and shield will prompt interactively for the\n")
		fmt.Printf("  missing information it needs (unless @C{--batch} is active.)\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name      The name of your new Cloud Storage System.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary   An optional, long-form description for the new\n")
		fmt.Printf("                  storage system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent     The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                  Agent that will be used for testing access to\n")
		fmt.Printf("                  the storage system, and also for purging expired\n")
		fmt.Printf("                  or manually deleted backup archives.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin    The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                  plugin must support \"store\" operations, and must\n")
		fmt.Printf("                  be available on the selected agent.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data      Configuration data for the storage plugin, in the\n")
		fmt.Printf("                  format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                  be required to quote this to avoid tokenization of\n")
		fmt.Printf("                  the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                  This field is optional, and may be specified multiple\n")
		fmt.Printf("                  times, either to provide new configuration key / values,\n")
		fmt.Printf("                  or to override configuration specified earlier in the\n")
		fmt.Printf("                  command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Create an authenticated WebDAV storage system:\n")
		fmt.Printf("  @W{shield create-store}                      \\\n")
		fmt.Printf("      @Y{--name}    \"Local WebDAV\"             \\\n")
		fmt.Printf("      @Y{--agent}   10.0.0.42:5444             \\\n")
		fmt.Printf("      @Y{--plugin}  @B{webdav}                     \\\n")
		fmt.Printf("      @Y{--data}    @G{url}=@C{https://10.0.0.42:8443} \\\n")
		fmt.Printf("      @Y{--data}    @G{username}=@C{webdave}           \\\n")
		fmt.Printf("      @Y{--data}    @G{password}=@C{super-sekrit}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-target": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-target --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  Create a new Target Data System.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs to know what you want it to back up, which is why\n")
		fmt.Printf("  it defines Target Data Systems.  These can be anything from\n")
		fmt.Printf("  \"that directory over there\" to \"all of these databases\" -- if\n")
		fmt.Printf("  there exists a target plugin for it, you can back it up.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  The entire configuration of the new Target Data System can be\n")
		fmt.Printf("  specified via command-line arguments.  You may also omit any or\n")
		fmt.Printf("  all of these flags and shield will prompt interactively for the\n")
		fmt.Printf("  missing information it needs (unless @C{--batch} is active.)\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name      The name of your new Target Data System.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary   An optional, long-form description for the new\n")
		fmt.Printf("                  data system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent     The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                  Agent that will be used for running backup and\n")
		fmt.Printf("                  restore operations.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin    The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                  plugin must support \"target\" operations, and must\n")
		fmt.Printf("                  be available on the selected agent.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -C, --compression\n")
		fmt.Printf("                  The type of compression to use when backing up this\n")
		fmt.Printf("                  target. Valid values are `bzip2' and `none'. Defaults\n")
		fmt.Printf("                  to `bzip2'.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data      Configuration data for the target plugin, in the\n")
		fmt.Printf("                  format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                  be required to quote this to avoid tokenization of\n")
		fmt.Printf("                  the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                  This field is optional, and may be specified multiple\n")
		fmt.Printf("                  times, either to provide new configuration key / values,\n")
		fmt.Printf("                  or to override configuration specified earlier in the\n")
		fmt.Printf("                  command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # We want to back up files on 10.0.0.5:\n")
		fmt.Printf("  @W{shield create-target}                  \\\n")
		fmt.Printf("      @Y{--name}    \"Important Files\"       \\\n")
		fmt.Printf("      @Y{--agent}   10.0.0.5:5444           \\\n")
		fmt.Printf("      @Y{--plugin}  @B{fs}                      \\\n")
		fmt.Printf("      @Y{--data}    @G{base_dir}=@C{/path/to/files} \\\n")
		fmt.Printf("      @Y{--data}    @G{exclude}=@C{*.bak}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-tenant": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-tenant [--name @Y{NAME}]\n")
		fmt.Printf("\n")
		fmt.Printf("  Create a new SHIELD Tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --name         The name to assign this new tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "create-user": /* {{{ */
		fmt.Printf("USAGE: @G{shield} create-user [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  Create a new local SHIELD User.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD supports a several 3rd party authentication providers,\n")
		fmt.Printf("  including Github and Cloud Foundry UAA, but for sheer simplicity,\n")
		fmt.Printf("  nothing beats local users.  Local SHIELD users exist inside the\n")
		fmt.Printf("  SHIELD database, and can be assigned tenant- and system-roles\n")
		fmt.Printf("  arbitrarily.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site managers.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  The entire configuration of the new local SHIELD user can be\n")
		fmt.Printf("  specified via command-line arguments.  You may also omit any or\n")
		fmt.Printf("  all of these flags and shield will prompt interactively for the\n")
		fmt.Printf("  missing information it needs (unless @C{--batch} is active.)\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name        The full display name of your new user.\n")
		fmt.Printf("\n")
		fmt.Printf("  -u, --username    The username this user will use to sign in.\n")
		fmt.Printf("                    This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --password    A secret password that the user must supply\n")
		fmt.Printf("                    in order to authenticate successfully.\n")
		fmt.Printf("                    This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("     --system-role  Optionally assign this new user a system role,\n")
		fmt.Printf("                    one of @M{engineer}, @M{manager}, or @M{admin}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{System Roles:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Assigning a user a System Role grants them special access into\n")
		fmt.Printf("  SHIELD itself, giving them the ability to view and modify the\n")
		fmt.Printf("  configuration of the software, authentication, tenancy, etc.\n")
		fmt.Printf("\n")
		fmt.Printf("  The following system roles are defined:\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{admin}     Complete access to SHIELD, including the ability\n")
		fmt.Printf("              to view and manage registered agents, manage user\n")
		fmt.Printf("              sessions, and more.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{manager}   System Managers are responsible for the creation\n")
		fmt.Printf("              and management of SHIELD Tenants; they have the\n")
		fmt.Printf("              ability to invite and banish users to / from any\n")
		fmt.Printf("              tenant.  They also manage local SHIELD users.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{engineer}  Full access to everything that is shared between\n")
		fmt.Printf("              tenants, namely cloud storage systems.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # We want jhunt engineering stuff on our SHIELD.\n")
		fmt.Printf("  @W{shield create-user}             \\\n")
		fmt.Printf("      @Y{--name}        \"James Hunt\" \\\n")
		fmt.Printf("      @Y{--username}    jhunt        \\\n")
		fmt.Printf("      @Y{--password}    sekrit       \\\n")
		fmt.Printf("      @Y{--system-role} engineer\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "curl": /* {{{ */
		fmt.Printf("USAGE: @G{shield} curl [@Y{METHOD}] @Y{RELATIVE-URL} [@Y{BODY}]\n")
		fmt.Printf("\n")
		fmt.Printf("  Issues raw HTTP requests to the targeted SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  Any valid HTTP method can be provided, but shield will default to\n")
		fmt.Printf("  using @M{GET}.  Some HTTP methods, like POST and PUT, may require\n")
		fmt.Printf("  that you supply a request body, like the JSON for updating a target\n")
		fmt.Printf("  data system.\n")
		fmt.Printf("\n")
		fmt.Printf("  If you are using shield curl to debug and/or troubleshoot your\n")
		fmt.Printf("  SHIELD Core, keep in mind that you may need to add @M{--trace} to your\n")
		fmt.Printf("  invocation if you want to see the HTTP requests and headers.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-global-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-global-store @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a Shared Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used to delete shared storage\n")
		fmt.Printf("  systems, and you must be a site engineer to use it.  If you need to\n")
		fmt.Printf("  delete a storage system that belongs to one of your tenants, please\n")
		fmt.Printf("  see @C{shield delete-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{ALSO NOTE:} You will only be able to delete @W{unused} storage\n")
		fmt.Printf("  systems; if the system is being referenced by any backup job\n")
		fmt.Printf("  configuration (in any tenant), you will be unable to delete it.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-job --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("  @R{This is a dangerous operation that cannot be undone.}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-session": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-session @Y{UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a SHIELD Session.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever users authenticate to SHIELD, whether they do so via\n")
		fmt.Printf("  the snazzy web UI, or via the rock-solid CLI utility, they\n")
		fmt.Printf("  generate an authenticated session in the SHIELD database.  These\n")
		fmt.Printf("  sessions are created for local users as well as 3rd-party users\n")
		fmt.Printf("  who come in by way of authentication providers.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site engineers.\n")
		fmt.Printf("\n")
		fmt.Printf("  When a session is deleted, any clients using that session are\n")
		fmt.Printf("  forcibly logged out.  CLI users will begin to receive errors about\n")
		fmt.Printf("  not being authenticated;  Web UI users will be redirected to the\n")
		fmt.Printf("  main login page.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-store --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used to delete Storage Systems\n")
		fmt.Printf("  for a single SHIELD Tenant.  If you need to manage shared storage,\n")
		fmt.Printf("  see @C{shield delete-global-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{ALSO NOTE:} You will only be able to delete @W{unused} storage\n")
		fmt.Printf("  systems; if the system is being referenced by any backup job\n")
		fmt.Printf("  configuration, you will be unable to delete it.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-target": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-target --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a Target Data System.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs to know what you want it to back up, which is why\n")
		fmt.Printf("  it defines Target Data Systems.  These can be anything from\n")
		fmt.Printf("  \"that directory over there\" to \"all of these databases\" -- if\n")
		fmt.Printf("  there exists a target plugin for it, you can back it up.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} You will only be able to delete @W{unused} target data\n")
		fmt.Printf("  systems; if the system is being referenced by any backup job\n")
		fmt.Printf("  configuration, you will be unable to delete it.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "delete-user": /* {{{ */
		fmt.Printf("USAGE: @G{shield} delete-user @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Delete a local SHIELD User.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD supports a several 3rd party authentication providers,\n")
		fmt.Printf("  including Github and Cloud Foundry UAA, but for sheer simplicity,\n")
		fmt.Printf("  nothing beats local users.  Local SHIELD users exist inside the\n")
		fmt.Printf("  SHIELD database, and can be assigned tenant- and system-roles\n")
		fmt.Printf("  arbitrarily.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site managers.\n")
		fmt.Printf("\n")
		fmt.Printf("  Deleting a user will remove all of their authenticated sessions,\n")
		fmt.Printf("  and also remove any auth tokens they may have issued.\n")
		fmt.Printf("\n")
		fmt.Printf("  @R{This is a dangerous operation that cannot be undone.}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "global-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} global-store @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Shared Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only display information for storage\n")
		fmt.Printf("  systems that are shared across all SHIELD Tenants.  If you need\n")
		fmt.Printf("  to view a tenant-specific storage system, see @C{shield store}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "global-stores": /* {{{ */
		fmt.Printf("USAGE: @G{shield} global-stores [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List Shared Cloud Storage Systems\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command only display shared storage systems, which\n")
		fmt.Printf("  are visible to all SHIELD tenants.  If you only want to see the\n")
		fmt.Printf("  systems defined for your tenant(s), see @C{shield stores}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all shared cloud storage systems will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  --used          Only show storage systems that are either @W{used}\n")
		fmt.Printf("  --unused        (referenced by a job configurtion) or @W{unused}.\n")
		fmt.Printf("                  These options are mutually exclusive.\n")
		fmt.Printf("\n")
		fmt.Printf("  --with-plugin   Only show storage systems that are using the given\n")
		fmt.Printf("                  storage plugin.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Where are we using Amazon S3?\n")
		fmt.Printf("  @W{shield global-stores}  \\\n")
		fmt.Printf("     @Y{--used}             \\\n")
		fmt.Printf("     @Y{--with-plugin} @C{s3}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Which shared storage systems can we decomission?\n")
		fmt.Printf("  @W{shield global-stores} \\\n")
		fmt.Printf("    @Y{--unused}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "id": /* {{{ */
		fmt.Printf("USAGE: @G{shield} id\n")
		fmt.Printf("\n")
		fmt.Printf("  Displays information about your currently authenticated session.\n")
		fmt.Printf("\n")
		fmt.Printf("  This includes your profile information (display name, username,\n")
		fmt.Printf("  etc.), as well as what system role you have been assigned, and\n")
		fmt.Printf("  what tenants (if any) you have been granted membership into.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "import": /* {{{ */
		fmt.Printf("USAGE: @G{shield} import @Y{FILE}\n")
		fmt.Printf("       @G{shield} import @Y{-} <FILE\n")
		fmt.Printf("\n")
		fmt.Printf("  Import configuration into SHIELD, in bulk.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD has a lot of configuration, between storage systems and\n")
		fmt.Printf("  target data systems, users and tenants, etc.  While you could\n")
		fmt.Printf("  conceivably write a script to automate the stand-up of a new\n")
		fmt.Printf("  SHIELD environment, we've provided a much simpler alternative,\n")
		fmt.Printf("  vis-a-vis a YAML-based import command!\n")
		fmt.Printf("\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --example      Print out an annotated example import file, and exit.\n")
		fmt.Printf("\n")
		fmt.Printf("  Note: the global --core flag comes in handy.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Example:}\n")
		fmt.Printf("\n")
		fmt.Printf("  @W{shield import} -c a-new-shield ~/shield/prod.yml\n")
		fmt.Printf("\n")
		fmt.Printf("or, if you'd like to fit the import task into a pipeline that generates\n")
		fmt.Printf("the YAML data for you:\n")
		fmt.Printf("\n")
		fmt.Printf("  spruce merge ... | @W{shield import} -c a-new-shield -\n")
		fmt.Printf("\n")
		fmt.Printf("(The '-' means 'read from standard input')\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "init": /* {{{ */
		fmt.Printf("USAGE: @G{shield} init [--master @Y{PASSWORD}]\n")
		fmt.Printf("\n")
		fmt.Printf("  Initializes a brand new SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD maintains an internal encrypted vault of secrets,\n")
		fmt.Printf("  for protecting your data archives with strong encryption.\n")
		fmt.Printf("  Before SHIELD will be able to use this vault, it needs to\n")
		fmt.Printf("  be initialized, and a SHIELD master password chosen.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --master ...    New master password. (@W{$SHIELD_CORE_MASTER})\n")
		fmt.Printf("\n")
		fmt.Printf("  In general, use of the command-line flag is discouraged.\n")
		fmt.Printf("  Instead, for automation purposes, set @W{$SHIELD_CORE_MASTER}\n")
		fmt.Printf("  in your environment.\n")
		fmt.Printf("\n")
		fmt.Printf("  For interactive use, not specifying @M{--master} causes shield\n")
		fmt.Printf("  to prompt you for a new master password, with appropriate\n")
		fmt.Printf("  security precautions (no terminal echo, confirmation, etc.)\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "invite": /* {{{ */
		fmt.Printf("USAGE: @G{shield} invite [--role @Y{ROLE}] --tenant @Y{TENANT} @Y{USER}\n")
		fmt.Printf("\n")
		fmt.Printf("  Invite a local user into a SHIELD Tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  Local users (accounts defined wholly within SHIELD itself) can be\n")
		fmt.Printf("  arbitrarily assigned to those tenants, and given one of three roles:\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{admin}   Complete access to the tenant, including the ability\n")
		fmt.Printf("                  to invite new users and banish existing users.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{engineer}  Full control of the configuration of SHIELD within the\n")
		fmt.Printf("                  tenant.  Engineers have the ability to reconfigure\n")
		fmt.Printf("                  cloud storage, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{operator}  Day-to-day backup-related activities including running\n")
		fmt.Printf("                  ad hoc backup jobs, performing restores, pausing and\n")
		fmt.Printf("                  unpausing jobs, etc.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each more powerful role includes the rights of the roles beneath.\n")
		fmt.Printf("  For example, a @M{admin} can do everything an @M{engineer} can do,\n")
		fmt.Printf("  and an @M{engineer} can do everything an @M{operator} can do.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers},\n")
		fmt.Printf("        and @R{SHIELD Tenant Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("  This command only operates on one (user,tenant) pairing at a time.\n")
		fmt.Printf("  For bulk operations, either avail yourself of the SHIELD API, or run\n")
		fmt.Printf("  the command multiple times.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  -r, --role     The role to assign the new user.  Must be one of\n")
		fmt.Printf("                 @M{admin}, @M{engineer}, or @M{operator}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} job --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "jobs": /* {{{ */
		fmt.Printf("USAGE: @G{shield} jobs --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List Backup Jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all defined backup jobs will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  --target        Only show backup jobs for the given target data\n")
		fmt.Printf("                  system (given by name or UUID).\n")
		fmt.Printf("\n")
		fmt.Printf("  --store         Only show backup jobs for the given cloud storage\n")
		fmt.Printf("                  system (given by name or UUID).\n")
		fmt.Printf("\n")
		fmt.Printf("  --paused        Only show jobs that are not scheduled (@W{paused}),\n")
		fmt.Printf("  --unpaused      or that are (@W{unpaused}).  These two options are\n")
		fmt.Printf("                  mutually exclusive.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # What Azure-bound jobs aren't running automatically?\n")
		fmt.Printf("  @W{shield jobs}      \\\n")
		fmt.Printf("     @Y{--store} Azure \\\n")
		fmt.Printf("     @Y{--paused}\n")
		fmt.Printf("\n")
		fmt.Printf("  # How are we backing up UAADB?\n")
		fmt.Printf("  @W{shield jobs}       \\\n")
		fmt.Printf("     @Y{--target} UAADB\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "lock": /* {{{ */
		fmt.Printf("USAGE: @G{shield} lock\n")
		fmt.Printf("\n")
		fmt.Printf("  Lock a SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD maintains an internal encrypted vault of secrets,\n")
		fmt.Printf("  for protecting your data archives with strong encryption.\n")
		fmt.Printf("  Locking the SHIELD core seals this vault, and prevents\n")
		fmt.Printf("  all backup and restore tasks from being scheduled until\n")
		fmt.Printf("  SHIELD is unlocked, using the SHIELD master password.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  (none)\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "login": /* {{{ */
		fmt.Printf("USAGE: @G{shield} login [--username @Y{USERNAME}] [--password @Y{PASSWORD}]\n")
		fmt.Printf("       @G{shield} login --token @Y{AUTH-TOKEN}\n")
		fmt.Printf("       @G{shield} login --providers\n")
		fmt.Printf("       @G{shield} login --via @Y{PROVIDER-ID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Authenticate to a SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  There are three ways to authenticate to a SHIELD Core: local user\n")
		fmt.Printf("  authentication, auth tokens, and 3rd-party provider authentication.\n")
		fmt.Printf("  Each way has its own set of options, and its own applications.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Local User Authentication:}\n")
		fmt.Printf("\n")
		fmt.Printf("  -u, --username ...    Who to log in as. (@W{$SHIELD_CORE_USERNAME})\n")
		fmt.Printf("  -p, --password ...    Secret password.  (@W{$SHIELD_CORE_PASSWORD})\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Token Authentication:}\n")
		fmt.Printf("\n")
		fmt.Printf("      --token ...       Auth Token to use. (@W{$SHIELD_CORE_TOKEN})\n")
		fmt.Printf("\n")
		fmt.Printf("@B{3rd-Party Authentication}\n")
		fmt.Printf("\n")
		fmt.Printf("      --providers       List the 3rd-party authentication providers\n")
		fmt.Printf("                        that have been configured by the SHIELD site\n")
		fmt.Printf("                        operators, and are usable by @B{--via}.\n")
		fmt.Printf("\n")
		fmt.Printf("      --via ...         Which 3rd-party authentication provider to\n")
		fmt.Printf("                        use for logging in.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "logout": /* {{{ */
		fmt.Printf("USAGE: @G{shield} logout\n")
		fmt.Printf("\n")
		fmt.Printf("  Logs you out of your active, authenticated session.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "op pry": /* {{{ */
		fmt.Printf("USAGE: @G{shield} op pry @Y{/path/to/vault.crypt}\n")
		fmt.Printf("\n")
		fmt.Printf("  Decrypt and inspect a SHIELD Vault Crypt.\n")
		fmt.Printf("\n")
		fmt.Printf("  @R{NOTE: This is an advanced operation, made available for}\n")
		fmt.Printf("  @R{      troubleshooting and development purposes.  It is not}\n")
		fmt.Printf("  @R{      to be used lightly.}\n")
		fmt.Printf("\n")
		fmt.Printf("  The SHIELD Vault Crypt contains the encrypted Vault Seal Key\n")
		fmt.Printf("  and Root Token, which are necessary for accessing the Vault.\n")
		fmt.Printf("\n")
		fmt.Printf("  This utility asks for the SHIELD Master Password and decrypts\n")
		fmt.Printf("  the crypt file, printing its contents to standard output.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "passwd": /* {{{ */
		fmt.Printf("USAGE: @G{shield} passwd\n")
		fmt.Printf("\n")
		fmt.Printf("  Change your SHIELD Password.\n")
		fmt.Printf("\n")
		fmt.Printf("  If you are authenticated to SHIELD as a local user, you can use\n")
		fmt.Printf("  this command to interactively change your password.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{Note:} It is not possible (nor is it advisable) to change your\n")
		fmt.Printf("  password in @Y{--batch} mode, or via environment variables.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "pause-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} pause-job --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Pause a Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("  Paused backup jobs will not be automatically scheduled by SHIELD.\n")
		fmt.Printf("  In order to execute them, an operator will need to manually kick\n")
		fmt.Printf("  them off, via @C{shield run-job}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "purge-archive": /* {{{ */
		fmt.Printf("USAGE: @G{shield} purge-archive --tenant @Y{TENANT} @Y{UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Remove a Backup Archive from Cloud Storage.\n")
		fmt.Printf("\n")
		fmt.Printf("  When SHIELD successfully performs a backup operation, it generates\n")
		fmt.Printf("  a backup archive containing all of the protected data form that\n")
		fmt.Printf("  particular system, at that particular point in time.  This archive\n")
		fmt.Printf("  is then placed in cloud storage, awaiting either expiry and purgation,\n")
		fmt.Printf("  or restoration to a data system.\n")
		fmt.Printf("\n")
		fmt.Printf("  When you purge a backup archive, it will be remmoved from its cloud\n")
		fmt.Printf("  storage system, and marked as purged in the SHIELD database; no one\n")
		fmt.Printf("  will be able to restore the data in the archvie.\n")
		fmt.Printf("\n")
		fmt.Printf("  @R{This is a dangerous operation that cannot be undone.}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "rekey": /* {{{ */
		fmt.Printf("USAGE: @G{shield} rekey [--old-master @Y{PASSWORD}]\n")
		fmt.Printf("                     [--new-master @Y{PASSWORD}]\n")
		fmt.Printf("                     [--rotate-fixed-key]\n")
		fmt.Printf("\n")
		fmt.Printf("  Change your SHIELD Master Password.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD maintains an internal encrypted vault of secrets,\n")
		fmt.Printf("  for protecting your data archives with strong encryption.\n")
		fmt.Printf("  The keys to this vault are protected by a master password.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --old-master ...    Current master password.\n")
		fmt.Printf("  --new-master ...    New master password.\n")
		fmt.Printf("\n")
		fmt.Printf("  --rotate-fixed-key  Rotate the fixed key used for backing\n")
		fmt.Printf("                      up certain jobs (usually SHIELD itself).\n")
		fmt.Printf("                      NOTE: doing so will render previous\n")
		fmt.Printf("                      archives unusable during a disaster\n")
		fmt.Printf("                      recovery scenario; you may want to kick\n")
		fmt.Printf("                      off new runs of those jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  In general, use of the --old-master and --new-master flags\n")
		fmt.Printf("  is discouraged.\n")
		fmt.Printf("\n")
		fmt.Printf("  Rekeying should, in general, be an interactive process.\n")
		fmt.Printf("  Not specifying @M{--master} causes shield to prompt you\n")
		fmt.Printf("  for both the current master password, and your desired new\n")
		fmt.Printf("  master password, with appropriate security precautions (no\n")
		fmt.Printf("  terminal echo, confirmation, etc.)\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "restore-archive": /* {{{ */
		fmt.Printf("USAGE: @G{shield} restore-archive --tenant @Y{TENANT} [OPTIONS] @Y{UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Restore a Backup Archive.\n")
		fmt.Printf("\n")
		fmt.Printf("  When SHIELD successfully performs a backup operation, it generates\n")
		fmt.Printf("  a backup archive containing all of the protected data form that\n")
		fmt.Printf("  particular system, at that particular point in time.  This archive\n")
		fmt.Printf("  is then placed in cloud storage, awaiting either expiry and purgation,\n")
		fmt.Printf("  or restoration to a data system.\n")
		fmt.Printf("\n")
		fmt.Printf("  You are not constrained to restoring a backup archive to the target\n")
		fmt.Printf("  system it was generated from.  This allows you to migrate data by\n")
		fmt.Printf("  way of the backup system.\n")
		fmt.Printf("\n")
		fmt.Printf("  @R{NOTE: Restoring data may cause an outage} in the target data system\n")
		fmt.Printf("  as the data is replayed.  SHIELD cannot guarantee that plugins will not\n")
		fmt.Printf("  disconnect end users, block new connections, prohibit writes to the data\n")
		fmt.Printf("  store, etc.  Please consult your plugin documentation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --to, --target   The name or UUID of an alternate target data system\n")
		fmt.Printf("                   to restore the data to.  By default, archives will\n")
		fmt.Printf("                   be restored to their originating target system.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "revoke-auth-token": /* {{{ */
		fmt.Printf("USAGE: @G{shield} revoke-auth-token\n")
		fmt.Printf("\n")
		fmt.Printf("  Revoke an issued authentication token.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD users can issue @W{authentication tokens}, which can be\n")
		fmt.Printf("  used in scripts and other automatons to represent the issuing\n")
		fmt.Printf("  account, and all of their privileges within the system.\n")
		fmt.Printf("\n")
		fmt.Printf("  This command contacts your currently targeted SHIELD Core, and\n")
		fmt.Printf("  asks it to revoke a specific authentication token.  Once revoked,\n")
		fmt.Printf("  that token will no longer be usable to authentication to SHIELD.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "run-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} run-job --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Manually Run a Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("  When you run a job via @C{shield run-job}, SHIELD will temporarily\n")
		fmt.Printf("  ignore the schedule and schedule an immediate, ad hoc execution\n")
		fmt.Printf("  of the job, whether or not it was paused\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "session": /* {{{ */
		fmt.Printf("USAGE: @G{shield} session @Y{UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Print Details for a Single SHIELD Sessions.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever users authenticate to SHIELD, whether they do so via\n")
		fmt.Printf("  the snazzy web UI, or via the rock-solid CLI utility, they\n")
		fmt.Printf("  generate an authenticated session in the SHIELD database.  These\n")
		fmt.Printf("  sessions are created for local users as well as 3rd-party users\n")
		fmt.Printf("  who come in by way of authentication providers.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site engineers.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "sessions": /* {{{ */
		fmt.Printf("USAGE: @G{shield} sessions [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List Authenticated SHIELD Sessions.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever users authenticate to SHIELD, whether they do so via\n")
		fmt.Printf("  the snazzy web UI, or via the rock-solid CLI utility, they\n")
		fmt.Printf("  generate an authenticated session in the SHIELD database.  These\n")
		fmt.Printf("  sessions are created for local users as well as 3rd-party users\n")
		fmt.Printf("  who come in by way of authentication providers.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site engineers.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all shared cloud storage systems will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  -l, --limit     Only show this many sessions, instead of all.\n")
		fmt.Printf("                  Currently, there is no way to paginate the results\n")
		fmt.Printf("                  of this command.  Sad.\n")
		fmt.Printf("\n")
		fmt.Printf("  -u, --user      Limit the list of sessions to only those associated\n")
		fmt.Printf("                  with the given user (specified by UUID).  Note that\n")
		fmt.Printf("                  this will also include any sessions authenticated by\n")
		fmt.Printf("                  that users auth tokens (i.e. scripts, pipelines, etc.)\n")
		fmt.Printf("\n")
		fmt.Printf("      --ip        Limit the list of sessions to only those originating\n")
		fmt.Printf("                  from a given IP address.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Where is jhunt (assuming that's the right UUID) logged in from?\n")
		fmt.Printf("  @W{shield sessions} \\\n")
		fmt.Printf("     @Y{--user} @C{0c14cc60-f001-400e-9858-1a5ab888b823}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Who is logging in from 10.56.78.9?\n")
		fmt.Printf("  @W{shield sessions} \\\n")
		fmt.Printf("    @Y{--ip} @C{10.56.78.9}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "status": /* {{{ */
		fmt.Printf("USAGE: @G{shield} status\n")
		fmt.Printf("\n")
		fmt.Printf("  Print information about your targeted SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} store --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only display information for storage\n")
		fmt.Printf("  systems for a single SHIELD Tenant.\n")
		fmt.Printf("  For shared storage, see @C{shield global-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "stores": /* {{{ */
		fmt.Printf("USAGE: @G{shield} stores --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List Cloud Storage Systems\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only display storage systems for a single\n")
		fmt.Printf("  SHIELD Tenant.  For shared storage, see @C{shield global-stores}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all defined cloud storage systems will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  --used          Only show storage systems that are either @W{used}\n")
		fmt.Printf("  --unused        (referenced by a job configurtion) or @W{unused}.\n")
		fmt.Printf("                  These options are mutually exclusive.\n")
		fmt.Printf("\n")
		fmt.Printf("  --with-plugin   Only show storage systems that are using the given\n")
		fmt.Printf("                  storage plugin.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Where are we using Amazon S3?\n")
		fmt.Printf("  @W{shield stores}       \\\n")
		fmt.Printf("     @Y{--used}           \\\n")
		fmt.Printf("     @Y{--with-plugin} @C{s3}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Which storage systems can we decomission?\n")
		fmt.Printf("  @W{shield stores} \\\n")
		fmt.Printf("    @Y{--unused}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "target": /* {{{ */
		fmt.Printf("USAGE: @G{shield} target --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Target Data System.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs to know what you want it to back up, which is why\n")
		fmt.Printf("  it defines Target Data Systems.  These can be anything from\n")
		fmt.Printf("  \"that directory over there\" to \"all of these databases\" -- if\n")
		fmt.Printf("  there exists a target plugin for it, you can back it up.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "targets": /* {{{ */
		fmt.Printf("USAGE: @G{shield} targets --tenant @Y{TENANT} [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List Target Data Systems.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs to know what you want it to back up, which is why\n")
		fmt.Printf("  it defines Target Data Systems.  These can be anything from\n")
		fmt.Printf("  \"that directory over there\" to \"all of these databases\" -- if\n")
		fmt.Printf("  there exists a target plugin for it, you can back it up.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all defined target data systems will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  --used          Only show data systems that are either @W{used}\n")
		fmt.Printf("  --unused        (referenced by a job configurtion) or @W{unused}.\n")
		fmt.Printf("                  These options are mutually exclusive.\n")
		fmt.Printf("\n")
		fmt.Printf("  --with-plugin   Only show data systems that are using the given\n")
		fmt.Printf("                  target plugin.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # What PostgreSQL databases do we have configured?\n")
		fmt.Printf("  @W{shield targets}  \\\n")
		fmt.Printf("     @Y{--used}       \\\n")
		fmt.Printf("     @Y{--with-plugin} @C{postgres}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Which data systems can we decomission?\n")
		fmt.Printf("  @W{shield targets} \\\n")
		fmt.Printf("    @Y{--unused}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "task": /* {{{ */
		fmt.Printf("USAGE: @G{shield} task --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single SHIELD Task.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever SHIELD needs to perform some bit of work, it generates a\n")
		fmt.Printf("  task object to keep track of the state of that work and hand it off\n")
		fmt.Printf("  to the various workers and SHIELD agents that will be responsible\n")
		fmt.Printf("  for seeing that the work gets done.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "tasks": /* {{{ */
		fmt.Printf("USAGE: @G{shield} tasks --tenant @Y{TENANT}\n")
		fmt.Printf("\n")
		fmt.Printf("  List SHIELD Tasks.\n")
		fmt.Printf("\n")
		fmt.Printf("  Whenever SHIELD needs to perform some bit of work, it generates a\n")
		fmt.Printf("  task object to keep track of the state of that work and hand it off\n")
		fmt.Printf("  to the various workers and SHIELD agents that will be responsible\n")
		fmt.Printf("  for seeing that the work gets done.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all active SHIELD tasks for the given tenant are displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --status   Only show tasks that have the given status.\n")
		fmt.Printf("                 The following status values are defined:\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{pending}    The task has not been started\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{scheduled}  The task has been sent to a SHIELD\n")
		fmt.Printf("                              worker thread to be executed.\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{running}    The worker thread that received the\n")
		fmt.Printf("                              task has started executing it.\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{canceled}   An operator canceled this task\n")
		fmt.Printf("                              before it finished on its own.\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{failed}     The task has finished, but there\n")
		fmt.Printf("                              was an unrecoverable error.\n")
		fmt.Printf("\n")
		fmt.Printf("                   @M{done}       The task finished succesfully.\n")
		fmt.Printf("\n")
		fmt.Printf("                 Additionally, you can use the special status @M{all}\n")
		fmt.Printf("                 to show all tasks, regardless of their status.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")
		fmt.Printf("      --active   Only show tasks that are still running (@W{active}),\n")
		fmt.Printf("    --inactive   or that are no longer running (@W{inactive}).\n")
		fmt.Printf("\n")
		fmt.Printf("      --target   Show tasks that are associated with the given target,\n")
		fmt.Printf("                 either by name or UUID.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --all      Show all tasks, overriding the @Y{--status} flag.\n")
		fmt.Printf("\n")
		fmt.Printf("  -l, --limit    Only show the given number of tasks.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "tenant": /* {{{ */
		fmt.Printf("USAGE: @G{shield} tenant [--members] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show Information for a single SHIELD Tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --members      List all users who have been granted access to this\n")
		fmt.Printf("                 Tenant, and identify their role within.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "tenants": /* {{{ */
		fmt.Printf("USAGE: @G{shield} tenants\n")
		fmt.Printf("\n")
		fmt.Printf("  List defined SHIELD Tenants.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "timespec": /* {{{ */
		fmt.Printf("USAGE: @G{shield} timespec @Y{\"a timespec string\"}\n")
		fmt.Printf("\n")
		fmt.Printf("  Validate a scheduling timespec against a SHIELD Core\n")
		fmt.Printf("\n")
		fmt.Printf("  When you schedule backup jobs in SHIELD, you use a language\n")
		fmt.Printf("  called \"timespec\" to indicate when and how often you want the\n")
		fmt.Printf("  job to execute.  This command parses a timespec (server-side)\n")
		fmt.Printf("  and re-assembles it into canonical form.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "unlock": /* {{{ */
		fmt.Printf("USAGE: @G{shield} unlock [--master @Y{PASSWORD}]\n")
		fmt.Printf("\n")
		fmt.Printf("  Unlock a SHIELD Core.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD maintains an internal encrypted vault of secrets,\n")
		fmt.Printf("  for protecting your data archives with strong encryption.\n")
		fmt.Printf("  Before SHIELD will be able to use this vault, it needs to\n")
		fmt.Printf("  be unlocked, using the SHIELD master password.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --master ...    Master password. (@W{$SHIELD_CORE_MASTER})\n")
		fmt.Printf("\n")
		fmt.Printf("  In general, use of the command-line flag is discouraged.\n")
		fmt.Printf("  Instead, for automation purposes, set @W{$SHIELD_CORE_MASTER}\n")
		fmt.Printf("  in your environment.\n")
		fmt.Printf("\n")
		fmt.Printf("  For interactive use, not specifying @M{--master} causes shield\n")
		fmt.Printf("  to prompt you for the master password, with appropriate\n")
		fmt.Printf("  security precautions (no terminal echo)\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "unpause-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} unpause-job --tenant @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Unpause a Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("  Unpausing a backup job cuases SHIELD to resume scheduling it for\n")
		fmt.Printf("  automatic (and regular) execution.  Any missed time slots will be\n")
		fmt.Printf("  ignored, and the next upcoming scheduled run will be targeted.\n")
		fmt.Printf("\n")
		fmt.Printf("  Note that you can still manually execute ad hoc runs of an unpaused\n")
		fmt.Printf("  backup job via @C{shield run-job}.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-global-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-global-store [OPTIONS] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Update an existing Shared Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command manages existing shared storage systems,\n")
		fmt.Printf("  and you must be a SHIELD site engineer to use it.  For managing\n")
		fmt.Printf("  storage defined for your tenant(s), see @C{shield update-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Updates are entirely specified via command-line arguments.\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name        A new name for the Cloud Storage System.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary     An optional, long-form description for the\n")
		fmt.Printf("                    storage system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent       The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                    Agent that will be used for testing access to\n")
		fmt.Printf("                    the storage system, and also for purging expired\n")
		fmt.Printf("                    or manually deleted backup archives.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin      The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                    plugin must support \"store\" operations, and must\n")
		fmt.Printf("                    be available on the selected agent.\n")
		fmt.Printf("\n")
		fmt.Printf("      --clear-data  Clear the plugin configuration before applying new\n")
		fmt.Printf("                    configuration from @Y{--data ...} flags.  If not\n")
		fmt.Printf("                    specified, existing keys will be left alone, new\n")
		fmt.Printf("                    keys will be added, and overridden keys will be\n")
		fmt.Printf("                    updated.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data        Configuration data for the storage plugin, in the\n")
		fmt.Printf("                    format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                    be required to quote this to avoid tokenization of\n")
		fmt.Printf("                    the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                    This field may be specified multiple times, either \n")
		fmt.Printf("                    to provide new configuration key / values, or to\n")
		fmt.Printf("                    override configuration specified earlier in the\n")
		fmt.Printf("                    command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Rename \"Local WebDAV\" storage to just \"WebDAV\":\n")
		fmt.Printf("  @W{shield update-global-store} \"Local WebDAV\" \\\n")
		fmt.Printf("      @Y{--name} WebDAV\n")
		fmt.Printf("\n")
		fmt.Printf("  # Change the credentials for accessing the WebDAV Store\n")
		fmt.Printf("  @W{shield update-global-store} WebDAV \\\n")
		fmt.Printf("      @Y{--data} @G{username}=@C{new-webdave}    \\\n")
		fmt.Printf("      @Y{--data} @G{password}=@C{dont-forget-it}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-job": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-job --tenant @Y{TENANT} [OPTIONS] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Reconfigure a new Backup Job.\n")
		fmt.Printf("\n")
		fmt.Printf("  Backup Jobs are the linchpin of SHIELD configuration; they\n")
		fmt.Printf("  provide the what, when, and where, tying together target data\n")
		fmt.Printf("  systems (the \"what\"), cloud storage (\"where\"), a schedule, and\n")
		fmt.Printf("  a retention policy into one schedulable unit of data protection.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name      A new name for your backup job.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary   An optional, long-form description for the job.\n")
		fmt.Printf("\n")
		fmt.Printf("  --target        The name or UUID of the target data system that\n")
		fmt.Printf("                  you want SHIELD to back up.\n")
		fmt.Printf("\n")
		fmt.Printf("  --store         The name or UUID of the cloud storage system to\n")
		fmt.Printf("                  store backup archives in.\n")
		fmt.Printf("\n")
		fmt.Printf("  --schedule      A @W{timespec} schedule description (see below),\n")
		fmt.Printf("                  instructing SHIELD how to schedule this job.\n")
		fmt.Printf("                  This field is @W{required}.\n")
		fmt.Printf("\n")
		fmt.Printf("  --retain        How long to keep backup archives.  Can be given\n")
		fmt.Printf("                  in days (7d) or weeks (5w).\n")
		fmt.Printf("\n")
		fmt.Printf("  --fixed-key     Encrypt backup archives with the fixed key.\n")
		fmt.Printf("                  Backups of SHIELD itself should use this option\n")
		fmt.Printf("                  to enable recovery in a disaster scenario\n")
		fmt.Printf("\n")
		fmt.Printf("  To pause/unpause a job, please use \"pause-job\" or \"unpause-job\".\n")
		fmt.Printf("\n")
		fmt.Printf("  In @Y{--batch} mode, the name or UUID specified on the command-line\n")
		fmt.Printf("  must be \"unique enough\" for shield to determine what you meant.\n")
		fmt.Printf("  In interactive mode, you will be asked to narrow your search\n")
		fmt.Printf("  parameters if necessary.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Scheduling Syntax:}\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD uses a thing called @W{Timespec} for specifying job schedules.\n")
		fmt.Printf("  This mini-language is intended to be intuitive and readable.\n")
		fmt.Printf("\n")
		fmt.Printf("  Here are some examples.\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{daily 4am}           Runs every day at 4:00 in the morning.\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{every 2h from 0:15}  Run at 0:15, 2:15, 4:15, etc...\n")
		fmt.Printf("\n")
		fmt.Printf("    @C{sundays at 16:32}    Runs weekly, on Sundays, at 4:32 in the afternoon.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-store": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-store --tenant @Y{TENANT} [OPTIONS] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Update an existing Cloud Storage System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs a place to store all of the backup archives it is\n")
		fmt.Printf("  going to generate, and Cloud Storage is where it's at.  Each\n")
		fmt.Printf("  Cloud Storage System provides the configuration details needed\n")
		fmt.Printf("  to write to and read from some external storage endpoint, be it\n")
		fmt.Printf("  Amazon S3, Google Cloud Storage, or a local WebDav instance.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only manage existing Storage Systems\n")
		fmt.Printf("  for a single SHIELD Tenant.  If you need to update shared storage,\n")
		fmt.Printf("  see @C{shield update-global-store}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Updates are entirely specified via command-line arguments.\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name        A new name for the Cloud Storage System.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary     An optional, long-form description for the\n")
		fmt.Printf("                    storage system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent       The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                    Agent that will be used for testing access to\n")
		fmt.Printf("                    the storage system, and also for purging expired\n")
		fmt.Printf("                    or manually deleted backup archives.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin      The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                    plugin must support \"store\" operations, and must\n")
		fmt.Printf("                    be available on the selected agent.\n")
		fmt.Printf("\n")
		fmt.Printf("      --clear-data  Clear the plugin configuration before applying new\n")
		fmt.Printf("                    configuration from @Y{--data ...} flags.  If not\n")
		fmt.Printf("                    specified, existing keys will be left alone, new\n")
		fmt.Printf("                    keys will be added, and overridden keys will be\n")
		fmt.Printf("                    updated.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data        Configuration data for the storage plugin, in the\n")
		fmt.Printf("                    format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                    be required to quote this to avoid tokenization of\n")
		fmt.Printf("                    the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                    This field may be specified multiple times, either \n")
		fmt.Printf("                    to provide new configuration key / values, or to\n")
		fmt.Printf("                    override configuration specified earlier in the\n")
		fmt.Printf("                    command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Rename \"Local WebDAV\" storage to just \"WebDAV\":\n")
		fmt.Printf("  @W{shield update-store} \"Local WebDAV\" \\\n")
		fmt.Printf("      @Y{--name} WebDAV\n")
		fmt.Printf("\n")
		fmt.Printf("  # Change the credentials for accessing the WebDAV Store\n")
		fmt.Printf("  @W{shield update-store} WebDAV         \\\n")
		fmt.Printf("      @Y{--data} @G{username}=@C{new-webdave}    \\\n")
		fmt.Printf("      @Y{--data} @G{password}=@C{dont-forget-it}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-target": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-target --tenant @Y{TENANT} [OPTIONS] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Update an existing Target Data System\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD needs to know what you want it to back up, which is why\n")
		fmt.Printf("  it defines Target Data Systems.  These can be anything from\n")
		fmt.Printf("  \"that directory over there\" to \"all of these databases\" -- if\n")
		fmt.Printf("  there exists a target plugin for it, you can back it up.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Updates are entirely specified via command-line arguments.\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name        A new name for the Target Data System.\n")
		fmt.Printf("\n")
		fmt.Printf("  -s, --summary     An optional, long-form description for the\n")
		fmt.Printf("                    storage system.\n")
		fmt.Printf("\n")
		fmt.Printf("  -a, --agent     The address (in ip:port format) of the SHIELD\n")
		fmt.Printf("                  Agent that will be used for running backup and\n")
		fmt.Printf("                  restore operations.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --plugin      The name of the plugin binary to use.  The chosen\n")
		fmt.Printf("                    plugin must support \"target\" operations, and must\n")
		fmt.Printf("                    be available on the selected agent.\n")
		fmt.Printf("\n")
		fmt.Printf("      --clear-data  Clear the plugin configuration before applying new\n")
		fmt.Printf("                    configuration from @Y{--data ...} flags.  If not\n")
		fmt.Printf("                    specified, existing keys will be left alone, new\n")
		fmt.Printf("                    keys will be added, and overridden keys will be\n")
		fmt.Printf("                    updated.\n")
		fmt.Printf("\n")
		fmt.Printf("  -C, --compression\n")
		fmt.Printf("                    The type of compression to use when backing up this\n")
		fmt.Printf("                    target. Valid values are `bzip2' and `none'. Defaults\n")
		fmt.Printf("                    to `bzip2'.\n")
		fmt.Printf("\n")
		fmt.Printf("  -d, --data        Configuration data for the target plugin, in the\n")
		fmt.Printf("                    format @Y{--data} @G{key_name}=@C{value}.  Note that you may\n")
		fmt.Printf("                    be required to quote this to avoid tokenization of\n")
		fmt.Printf("                    the provided value by your shell.\n")
		fmt.Printf("\n")
		fmt.Printf("                    This field may be specified multiple times, either \n")
		fmt.Printf("                    to provide new configuration key / values, or to\n")
		fmt.Printf("                    override configuration specified earlier in the\n")
		fmt.Printf("                    command-line invocation.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Rename \"Important Files\" storage to just \"Uploads\":\n")
		fmt.Printf("  @W{shield update-target} \"Important Files\" \\\n")
		fmt.Printf("      @Y{--name} Uploads\n")
		fmt.Printf("\n")
		fmt.Printf("  # Change the credentials for accessing the database\n")
		fmt.Printf("  @W{shield update-target} CCDB   \\\n")
		fmt.Printf("      @Y{--data} @G{username}=@C{new-dba} \\\n")
		fmt.Printf("      @Y{--data} @G{password}=@C{welcome1}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-tenant": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-tenant [--name @Y{NAME}] @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Update an existing SHIELD Tenant.\n")
		fmt.Printf("\n")
		fmt.Printf("  Each SHIELD Core defines one or more tenants, each with their own\n")
		fmt.Printf("  set of cloud storage configurations, data systems, and backup jobs.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command is only available to @R{SHIELD Site Managers}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  --name         The name to assign this tenant, effectively renaming it.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "update-user": /* {{{ */
		fmt.Printf("USAGE: @G{shield} update-user [OPTIONS] @{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Update an existing local SHIELD User.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD supports a several 3rd party authentication providers,\n")
		fmt.Printf("  including Github and Cloud Foundry UAA, but for sheer simplicity,\n")
		fmt.Printf("  nothing beats local users.  Local SHIELD users exist inside the\n")
		fmt.Printf("  SHIELD database, and can be assigned tenant- and system-roles\n")
		fmt.Printf("  arbitrarily.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site managers.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Updates are entirely specified via command-line arguments.\n")
		fmt.Printf("  Note that it is not possible to change a user's username.\n")
		fmt.Printf("\n")
		fmt.Printf("  -n, --name        A new display name for this user.\n")
		fmt.Printf("\n")
		fmt.Printf("  -p, --password    Change the users password.\n")
		fmt.Printf("\n")
		fmt.Printf("     --system-role  Assign this user a system role.\n")
		fmt.Printf("                    Must be one of @M{engineer}, @M{manager}, or @M{admin}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{System Roles:}\n")
		fmt.Printf("\n")
		fmt.Printf("  Assigning a user a System Role grants them special access into\n")
		fmt.Printf("  SHIELD itself, giving them the ability to view and modify the\n")
		fmt.Printf("  configuration of the software, authentication, tenancy, etc.\n")
		fmt.Printf("\n")
		fmt.Printf("  The following system roles are defined:\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{admin}     Complete access to SHIELD, including the ability\n")
		fmt.Printf("              to view and manage registered agents, manage user\n")
		fmt.Printf("              sessions, and more.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{manager}   System Managers are responsible for the creation\n")
		fmt.Printf("              and management of SHIELD Tenants; they have the\n")
		fmt.Printf("              ability to invite and banish users to / from any\n")
		fmt.Printf("              tenant.  They also manage local SHIELD users.\n")
		fmt.Printf("\n")
		fmt.Printf("    @M{engineer}  Full access to everything that is shared between\n")
		fmt.Printf("              tenants, namely cloud storage systems.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "user": /* {{{ */
		fmt.Printf("USAGE: @G{shield} user @Y{TENANT} @Y{NAME-OR-UUID}\n")
		fmt.Printf("\n")
		fmt.Printf("  Show a single Local SHIELD User.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD supports a several 3rd party authentication providers,\n")
		fmt.Printf("  including Github and Cloud Foundry UAA, but for sheer simplicity,\n")
		fmt.Printf("  nothing beats local users.  Local SHIELD users exist inside the\n")
		fmt.Printf("  SHIELD database, and can be assigned tenant- and system-roles\n")
		fmt.Printf("  arbitrarily.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site managers.\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */
	case "users": /* {{{ */
		fmt.Printf("USAGE: @G{shield} users [OPTIONS]\n")
		fmt.Printf("\n")
		fmt.Printf("  List local SHIELD Users.\n")
		fmt.Printf("\n")
		fmt.Printf("  SHIELD supports a several 3rd party authentication providers,\n")
		fmt.Printf("  including Github and Cloud Foundry UAA, but for sheer simplicity,\n")
		fmt.Printf("  nothing beats local users.  Local SHIELD users exist inside the\n")
		fmt.Printf("  SHIELD database, and can be assigned tenant- and system-roles\n")
		fmt.Printf("  arbitrarily.\n")
		fmt.Printf("\n")
		fmt.Printf("  @Y{NOTE:} This command can only be used by SHIELD site managers.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Options:}\n")
		fmt.Printf("\n")
		fmt.Printf("  By default, all local SHIELD users will be displayed.\n")
		fmt.Printf("  You may filter the results with the following command-line flags.\n")
		fmt.Printf("\n")
		fmt.Printf("  --with-system-role  Only show users who have been assigned the\n")
		fmt.Printf("                      specified system role, one of either @M{admin},\n")
		fmt.Printf("                      @M{manager}, or @M{engineer}.\n")
		fmt.Printf("\n")
		fmt.Printf("@B{Examples:}\n")
		fmt.Printf("\n")
		fmt.Printf("  # Who can manage tenants?\n")
		fmt.Printf("  @W{shield users} \\\n")
		fmt.Printf("     @Y{--with-system-role} @C{manager}\n")
		fmt.Printf("\n")
		fmt.Printf("\n")

	/* }}} */

	default:
		fmt.Printf("No help is available for `@G{shield} @R{%s}` yet.\n\n", command)
	}
}
