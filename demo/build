#!/bin/bash
set -eux
cd $(cd $(dirname ${BASH_SOURCE[0]})/.. && pwd)

# FIXME: turn this into a Makefile thing some day

# build all the software
#make GOOS=linux GOARCH=amd64 shield plugins


CACHED=$PWD/demo/cached
mkdir -p $CACHED

SHARED=$PWD/demo/shared
rm -rf $SHARED
mkdir -p $SHARED
ssh-keygen -t rsa -f ${SHARED}/agent.ssh -N '' >/dev/null
ssh-keygen -t rsa -f ${SHARED}/core.ssh  -N '' >/dev/null

# set up the input files for 'shield-agent'
SHIELD_AGENT=$PWD/demo/shield-agent/in
rm -rf ${SHIELD_AGENT}
mkdir -p ${SHIELD_AGENT}/{plugins,bin,etc,rc,var}
cp shield-agent shield ${SHIELD_AGENT}/bin
for plugin in $(cat plugins); do
  cp $plugin ${SHIELD_AGENT}/plugins
done
cp bin/shield-pipe ${SHIELD_AGENT}/bin/shield-pipe
cp $PWD/demo/init-static ${SHIELD_AGENT}/bin/init
cp ${SHARED}/agent.ssh    ${SHIELD_AGENT}/etc/agent.ssh
cp ${SHARED}/core.ssh.pub ${SHIELD_AGENT}/etc/authorized_keys

cat > ${SHIELD_AGENT}/rc/shield-agent <<'EOF'
#!/bin/sh
export PATH=/shield/bin:/shield/plugins:/bin:/usr/bin
if [ -f /shield/etc/name ]; then
  AGENT_NAME="$(cat /shield/etc/name)"
fi
if [ -z "$AGENT_NAME" ]; then
  AGENT_NAME="agent-$(hostname)"
fi
# generate the template for agent config
cat /shield/etc/shield-agent.conf.tpl |\
  sed -e "s/{{NAME}}/${AGENT_NAME}/" > /shield/etc/shield-agent.conf

/shield/bin/shield-agent --config /shield/etc/shield-agent.conf --log-level debug > /var/log/shield-agent.log
EOF
chmod 755 ${SHIELD_AGENT}/rc/shield-agent
cat > ${SHIELD_AGENT}/etc/shield-agent.conf.tpl <<'EOF'
name: {{NAME}}

authorized_keys_file: /shield/etc/authorized_keys
host_key_file:        /shield/etc/agent.ssh
listen_address:       0.0.0.0:5444
plugin_paths:        [/shield/plugins]

registration:
  url: http://core:8181
  interval: 15
EOF

# set up the input files for 'shield-core'
SHIELD_CORE=$PWD/demo/shield-core/in
rm -rf ${SHIELD_CORE}
mkdir -p ${SHIELD_CORE}/{bin,etc,rc,data}
cp -R web2/htdocs ${SHIELD_CORE}/www
cp shieldd shield-schema ${SHIELD_CORE}/bin
cp ${SHARED}/core.ssh ${SHIELD_CORE}/etc/
echo core-box > ${SHIELD_CORE}/etc/name
cat > ${SHIELD_CORE}/rc/shield-core <<'EOF'
#!/bin/sh
export PATH=/shield/bin:/shield/plugins:/bin:/usr/bin

shield-schema --database /shield/data/db

shieldd --config /shield/etc/shieldd.conf --log-level debug > /var/log/shield-core.log
EOF
chmod 755 ${SHIELD_CORE}/rc/shield-core
cat > ${SHIELD_CORE}/etc/shieldd.conf <<'EOF'
listen_addr:   0.0.0.0:8181
database:      /shield/data/db
private_key:   /shield/etc/core.ssh
workers:       3
max_timeout:   10
web_root:      /shield/www
slow_loop:     300
fast_loop:     2
vault_keyfile: /shield/data/crypt

session_timeout: 8
debug: true

env:   Demo
color: palegreen
motd: |
  Welcome to the Demo S.H.I.E.L.D. environment!

failsafe:
  username: demo
  password: demo
EOF

VAULT_VERSION=0.8.3
if [[ ! -f ${CACHED}/vault.zip ]]; then
  curl -C - -Lo ${CACHED}/vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
  pushd $CACHED
  rm -f vault
  unzip vault.zip
  popd
fi
cp $CACHED/vault ${SHIELD_CORE}/bin
cat > ${SHIELD_CORE}/rc/vault <<'EOF'
#!/bin/sh
/shield/bin/vault server -config /shield/etc/vault.conf
EOF
chmod 755 ${SHIELD_CORE}/rc/vault
cat > ${SHIELD_CORE}/etc/vault.conf <<'EOF'
storage "file" {
  path = "/shield/data/vault"
}
disable_mlock = true
listener "tcp" {
  address = "127.0.0.1:8200"
  tls_disable = true
}
EOF

cat > ${SHIELD_CORE}/etc/setup <<'EOF'
#!/bin/sh
set -ex
exec >&1 >>/var/log/setup.log 2>&1

date
echo ">>> SETUP SCRIPT STARTING UP..."
export SHIELD_CORE=demo
export SHIELD_BATCH_MODE=y
export PATH=/bin:/usr/bin:/shield/bin

if [ ! -f /.SETUP-DONE ]; then
  while ! shield api http://core:8181 demo; do
    sleep 1
  done

  SHIELD_CORE_MASTER=master shield initialize
  shield login --username demo --password demo
  shield id


  shield create-policy-template --name Short-Term --days 7
  shield create-policy-template --name Long-Term  --days 90
  shield create-policy-template --name Audit      --days 400


  shield create-user \
    --name        Ophelia \
    --username    ophelia \
    --password    password \
    --system-role admin

  shield create-user \
    --name        Olaf \
    --username    olaf \
    --password    password \
    --system-role engineer

  shield create-user \
    --name        Nikita \
    --username    nikita \
    --password    password

  shield create-user \
    --name        Nelson \
    --username    nelson \
    --password    password

  shield create-user \
    --name        Cheri \
    --username    cheri \
    --password    password

  shield create-user \
    --name        Carlton \
    --username    carlton \
    --password    password

  shield create-user \
    --name        Frank \
    --username    frank \
    --password    password

  shield create-user \
    --name        Fiona \
    --username    fiona \
    --password    password

  shield create-tenant --name 'Customer Service'
  shield invite --tenant 'Customer Service' --role operator ophelia olaf nikita nelson
  shield invite --tenant 'Customer Service' --role engineer carlton
  shield invite --tenant 'Customer Service' --role admin    cheri

  shield create-tenant --name Operations
  shield invite --tenant Operations --role operator nikita nelson
  shield invite --tenant Operations --role engineer olaf
  shield invite --tenant Operations --role admin    ophelia

  shield create-tenant --name Fulfillment
  shield invite --tenant Fulfillment --role operator ophelia olaf nikita nelson
  shield invite --tenant Fulfillment --role engineer fiona
  shield invite --tenant Fulfillment --role admin    frank

  ##
  ## Global Storage
  ##
  shield create-global-store           \
    --name      'Tier 1'                \
    --agent     172.18.0.6:5444         \
    --plugin    webdav                  \
    --threshold 7G                      \
    --data      url=http://webdav/tier1

  shield create-global-store           \
    --name      'Tier 2'                \
    --agent     172.18.0.6:5444         \
    --plugin    webdav                  \
    --threshold 5G                      \
    --data      url=http://webdav/tier2


  ##
  ## Customer Service
  ## (work must be done as cheri; she's an admin)
  ##
  shield login --username cheri --password password

  ##
  ## Customer Service -- AEGIS
  ##
  shield create-target \
      --tenant   'Customer Service' \
      --name     'A.E.G.I.S. DB' \
      --summary  'Self-service Customer Support System.' \
      --agent    '10.5.0.9:5444' \
      --plugin   mysql \
      --data     mysql_user=osticket \
      --data     mysql_password=password \
      --data     mysql_bindir=/usr/bin

  shield create-job \
      --tenant   'Customer Service' \
      --target   'A.E.G.I.S. DB' \
      --store    'Tier 1' \
      --policy   'Short-Term' \
      --name     'Daily' \
      --schedule 'daily at 4am'

  shield create-job \
      --tenant   'Customer Service' \
      --target   'A.E.G.I.S. DB' \
      --store    'Tier 2' \
      --policy   'Long-Term' \
      --name     'Weekly' \
      --schedule 'sundays at 5am'

  shield create-target \
      --tenant    'Customer Service' \
      --name      'A.E.G.I.S. Assets' \
      --summary   'Uploaded assets and attachments for the A.E.G.I.S. platform.' \
      --agent     '10.5.0.9:5444' \
      --plugin    fs \
      --data      base_dir=/var/www/html/osticket \
      --data      bsdtar=/bin/tar

  shield create-job \
      --tenant   'Customer Service' \
      --target   'A.E.G.I.S. Assets' \
      --store    'Tier 1' \
      --policy   'Short-Term' \
      --name     'Daily' \
      --schedule 'daily at 2am'

  ##
  ## Insignia CRM
  ##
  shield create-target \
      --tenant   'Customer Service' \
      --name     'InsigniaCRM DB' \
      --summary  'Customer-Relationship Management platform.' \
      --agent    '10.5.0.5:5444' \
      --plugin   postgres \
      --data     pg_host=crmdb \
      --data     pg_user=odoo \
      --data     pg_password=odoo \
      --data     pg_bindir=/usr/bin

  shield create-job \
      --tenant   'Customer Service' \
      --target   'InsigniaCRM DB' \
      --store    'Tier 1' \
      --policy   'Short-Term' \
      --name     'Daily' \
      --schedule 'daily at 4:30am'

  shield create-job \
      --tenant   'Customer Service' \
      --target   'InsigniaCRM' \
      --store    'Tier 2' \
      --policy   'Long-Term' \
      --name     'Weekly' \
      --schedule 'sundays at 5:30am'


  ##
  ## Operations
  ## (work must be done as ophelia; she's an admin)
  ##
  shield login --username ophelia --password password

  ##
  ## Operations - SHIELD
  ##
  shield create-target \
      --tenant    'Operations' \
      --name      'S.H.I.E.L.D.' \
      --summary   'The data protection system we know and trust.' \
      --agent     '10.5.0.5:5444' \
      --plugin    fs \
      --data      base_dir=/shield/data \
      --data      bsdtar=/bin/tar

  shield create-job \
      --tenant   'Operations' \
      --target   'S.H.I.E.L.D.' \
      --store    'Tier 1' \
      --policy   'Short-Term' \
      --name     'Daily' \
      --schedule 'daily 9pm'

  touch /.SETUP-DONE
fi

echo "<<< SETUP SCRIPT JUST SORT OF STARING OFF INTO SPACE DOING NOT MUCH OF ANYTHING..."
while true; do
  tail -f /dev/null # sleep forever
done
EOF
chmod 755 ${SHIELD_CORE}/etc/setup

cat > ${SHIELD_CORE}/rc/init <<'EOF'
# spin the agent
/shield/rc/shield-agent

# spin the vault
/shield/rc/vault

# spin the core
/shield/rc/shield-core

# set up the data
/shield/etc/setup
EOF


for img in shield-{agent,core,store}; do
  pushd $PWD/demo/$img
  ./build.sh
  popd
done

for img in {aegis,crm,shipit}; do
  pushd $PWD/demo/$img
  ./build.sh
  popd
done
