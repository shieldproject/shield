#!/bin/bash
set -u

PATH=$(pwd):$(pwd)/bin:${PATH}
WORKDIR=$(mktemp -d /tmp/shield.test.XXXXXXX)
DATABASE_TYPE=${DATABASE_TYPE:-sqlite3}
DATABASE_DSN=${DATABASE_DSN:-$WORKDIR/var/shield.db}
SHIELD_API_TOKEN=LETMEIN
SHIELD_DAEMON_HOST=127.0.0.1
SHIELD_DAEMON_PORT=8182
SHIELD_DAEMON_ADDR="$SHIELD_DAEMON_HOST:$SHIELD_DAEMON_PORT"
SHIELD_AGENT_HOST=127.0.0.1
SHIELD_AGENT_PORT=5441
SHIELD_AGENT_ADDR="$SHIELD_AGENT_HOST:$SHIELD_AGENT_PORT"
SHIELD_WEB_USER=admin
SHIELD_WEB_PASS=secret
SHIELD_NAME="T.E.S.T. S.H.I.E.L.D."

# TEST HARNESS APPARATUS {{{
export PATH SHIELD_NAME SHIELD_API_TOKEN
cleanup () {
	rm -rf ${WORKDIR}
	if [[ -n "$(jobs -p)" ]]; then
		kill $(jobs -p)
	fi
}
trap "cleanup >&2" EXIT QUIT INT TERM

mkdir ${WORKDIR}/etc
mkdir ${WORKDIR}/var
mkdir ${WORKDIR}/data

spin_shieldd() {
  ssh-keygen -t rsa -f ${WORKDIR}/var/shieldd_key -N '' >/dev/null

  cat >${WORKDIR}/etc/shieldd.conf <<EOF
---
listen_addr:   ${SHIELD_DAEMON_ADDR}
database_type: ${DATABASE_TYPE}
database_dsn:  ${DATABASE_DSN}
private_key:   ${WORKDIR}/var/shieldd_key
workers:       3
max_timeout:   10
web_root: ./webui
auth:
  api_tokens:
    test: ${SHIELD_API_TOKEN}
  basic:
    user:     ${SHIELD_WEB_USER}
    password: ${SHIELD_WEB_PASS}
EOF

  set -e
  echo ">> Setting up SHIELD schema"
  ./shield-schema -t ${DATABASE_TYPE} -d "${DATABASE_DSN}"
  echo

  echo ">> RUNNING SHIELDD"
  ./shieldd -c ${WORKDIR}/etc/shieldd.conf --log-level debug &
  set +e
}

spin_agent() {
  agent_up="1"
  while [ $agent_up -eq 1 ]; do
      sleep 1
      agent_up=$(nc -z ${SHIELD_DAEMON_HOST} ${SHIELD_DAEMON_PORT} &>/dev/null; echo $?)
  done

  ssh-keygen -t rsa -f ${WORKDIR}/var/shield-agent_key -N '' >/dev/null
  rm ${WORKDIR}/var/shield-agent_key.pub

  `curl -Lsk -XGET -H "X-Shield-Token: ${SHIELD_API_TOKEN}" http://${SHIELD_DAEMON_ADDR}/v1/meta/pubkey >> ${WORKDIR}/var/authorized_keys`
  cat >${WORKDIR}/etc/shield-agent.conf <<EOF
---
authorized_keys_file: ${WORKDIR}/var/authorized_keys
host_key_file: ${WORKDIR}/var/shield-agent_key
listen_address: ${SHIELD_AGENT_ADDR}
plugin_paths:
  - $(pwd)
EOF

  set -e
  ./shield-agent -c ${WORKDIR}/etc/shield-agent.conf --log-level debug &
  set +e
}

CONTEXT=""
context() {
	CONTEXT=$1
}

pass() {
	local msg=$1
	echo -e "\033[1;32m[ OK ]\033[0m $msg" | tee -a $WORKDIR/summary
}

fail() {
	local msg=$1
	echo -e "\033[1;31m[FAIL]\033[0m $msg" | tee -a $WORKDIR/summary
}

nocolor() {
	sed -e 's,'$(printf "\x1b")'\[[0-9;]*m,,g'
}

done_testing() {
	echo
	if [[ ! -f $WORKDIR/summary ]]; then
		echo "NO TESTS RUN"
		exit 2
	fi

	tests=$(wc -l $WORKDIR/summary | awk '{print $1}')
	fails=$(nocolor <$WORKDIR/summary | grep '^\[FAIL\] ' | wc -l | awk '{print $1}')
	if [[ $fails == 0 ]]; then
		echo "ALL $tests TESTS PASS"
		exit 0
	else
		echo "$fails/$tests TESTS FAILED"
		echo
		nocolor <$WORKDIR/summary | grep '^\[FAIL\] ' | sed -e 's/^/   /'
		exit 1
	fi
}
# }}}

spin_shieldd 2>&1 > ${WORKDIR}/daemon.log
spin_agent   2>&1 > ${WORKDIR}/agent.log

# try "A Suite of Tests" {{{
try() {
	CONTEXT=""
	echo ">> $*:"
}
# }}}
# (run some tests) 2>&1 | indent {{{
indent() {
	sed -e 's/^/   /'
}
# }}}
# ok $? "what should have happened..." {{{
ok() {
	local rc=$1
	local msg=$2

	if [[ $rc == 0 ]]; then
		pass "$msg"
	else
		fail "$msg"
	fi
}
# }}}
# is $got $expected "why it should have been that way..." {{{
is() {
	local got=$1
	local want=$2
	local msg=${3:-}
	if [[ -z "$msg" ]]; then
		msg="'${got}' should equal '${want}'"
	fi

	if [[ "$got" != "$want" ]]; then
		fail "$msg"
		echo "     got '${got}'"
		echo "  wanted '${want}'"
		echo
		return
	fi

	pass "$msg"
}
# }}}
# isnt $got $expected "why it should not have been that way..." {{{
isnt(){
	local got=$1
	local want=$2
	local msg=${3:-}
	if [[ -z "$msg" ]]; then
		msg="'${got}' should NOT equal '${want}'"
	fi

	if [[ "$got" == "$want" ]]; then
		fail "$msg"
		echo "     got '${got}'"
		echo "  wanted pretty much anything else."
		echo
		return
	fi

	pass "$msg"
}
# }}}

# httpstat $method $url "some optional JSON data, probably" {{{
httpstat() {
	local method=$1
	local url=$2
	local body=${3:-}
	opts="-X$method"
	if [[ ${method} == "HEAD" ]]; then
		opts="-I"
	fi
	if [[ -n "${body}" ]]; then
		opts="$opts --data-binary ${body} -H Content-type:application/json"
	fi
	curl -s -o /dev/null -w '%{http_code}' $opts -H "X-Shield-Token: $SHIELD_API_TOKEN" $url 2>/dev/null
}
# }}}
# create $type $name <<<$JSON {{{
create() {
	local type=$1
	local name=$2

	run create-$type
	mkdir -p $WORKDIR/data/$type
	jq -r '.uuid' < $WORKDIR/out > $WORKDIR/data/$type/$name
	isnt "$(uuidof $type $name)" "" \
	     "$type '$name' should have a valid (non-empty) UUID"
}
# }}}
# update $type $name <<<$JSON {{{
update() {
	local type=$1
	local name=$2

	run edit-$type $(uuidof $type $name)
}
# }}}
# uuidof $type $name {{{
uuidof() {
	local type=$1
	local name=$2
	uuid=$(cat $WORKDIR/data/$type/$name)
	if [[ -z $uuid ]]; then
		echo >&2 "!!! unable to find UUID of $type '$name'"
		echo "uuid-not-found"
		exit 77
	fi
	echo $uuid
}
# }}}
# pick $name {{{
pick() {
	local name=$1

	jq -r '.[] | select(.name == "'$name'") | .' < $WORKDIR/out > $WORKDIR/out.tmp
	mv $WORKDIR/out.tmp $WORKDIR/out
}
# }}}
# attr $name $want "optionally, why $name should be $want" {{{
attr() {
	local attr=$1
	local expect=$2
	local what=${3:-$CONTEXT}

	is "$(jq -r ".$attr" < $WORKDIR/out)" \
	   "$expect" \
	   "'$attr' was present when we asked for $what"
}
# }}}
# run command --plus --arg u ments {{{
run() {
	shield -k --raw "$@" > $WORKDIR/out
	ok $? "\`shield $*' should succeed"
}
# }}}
# none "why the last list retrieved should be empty" {{{
none() {
	local why=$1
	is "$(cat $WORKDIR/out)" "[]" "$why"
}
# }}}
# include $type $name "optional description of the list" {{{
includes() {
	local type=$1
	local name=$2
	local list=${3:-$CONTEXT}

	if [[ "$(uuidof $type $name)" == "" ]]; then
		fail "$type '$name' is not a thing.  this is a bug in the test"
		return
	fi
	is "$(jq -r '.[] | select(.name == "'"$name"'") | .uuid' < $WORKDIR/out)" \
	   "$(uuidof $type $name)" \
	   "$type '$name' should show up in the list of $list"
}
# }}}
# excludes $type $name "optional description of the list" {{{
excludes() {
	local type=$1
	local name=$2
	local list=${3:-$CONTEXT}

	if [[ "$(uuidof $type $name)" == "" ]]; then
		fail "$type '$name' is not a thing.  this is a bug in the test"
		return
	fi
	is "$(jq -r '.[] | select(.name == "'"$name"'") | .uuid' < $WORKDIR/out)" \
	   "" \
	   "$type '$name' should NOT show up in the list of $list"
}
# }}}
# cannot_delete $type $name "optionally, why you shouldn't be able to delete it" {{{
cannot_delete() {
	local type=$1
	local name=$2
	local why=${3:-$CONTEXT}

	! shield -k --raw delete-$type $name > $WORKDIR/out
	ok $? "Should not be allowed to delete $type '$name': $why"

	run $type $(uuidof $type $name)
	attr name "$name" "$type '$name' should be unaffected by failed DELETE attempt"
}
# }}}
# can_delete $type $name "optionally, why you should be able to delete it" {{{
can_delete() {
	local type=$1
	local name=$2
	local why=${3:-$CONTEXT}

	shield -k --raw delete-$type $name > $WORKDIR/out
	ok $? "Should be allowed to delete $type '$name': $why"

	! shield -k $type $(uuidof $type $name) > $WORKDIR/out 2>/dev/null
	ok $? "$type '$name' should not be retrievable after successful delete attempt"
}
# }}}
# pause job $name {{{
pause() {
	local type=$1
	local name=$2

	if [[ $type != "job" ]]; then
		echo >&2 "Attempted to pause a $type (must be a job)"
		exit 77
	fi

	context "pausing job '$name'"
	run pause "$(uuidof $type $name)"
	run $type "$(uuidof $type $name)"
	context "paused job ($name)"
	attr paused true
}
# }}}
# unpause job $name {{{
unpause() {
	local type=$1
	local name=$2

	if [[ $type != "job" ]]; then
		echo >&2 "Attempted to unpause a $type (must be a job)"
		exit 77
	fi

	context "unpausing job '$name'"
	run unpause "$(uuidof $type $name)"
	run $type "$(uuidof $type $name)"
	context "unpaused job ($name)"
	attr paused false
}
# }}}

echo "S.H.I.E.L.D. API TESTS"
echo "======================"
echo

try "Connecting to our test SHIELD instance" # {{{
(shield -k --raw create-backend test http://${SHIELD_DAEMON_ADDR}
 shield -k --raw status | jq -r .
 is "$(httpstat GET http://$SHIELD_DAEMON_ADDR/v1/ping)" \
    "200" "/v1/ping should ping ok"

 is "$(curl -H "X-Shield-Token: $SHIELD_API_TOKEN" http://${SHIELD_DAEMON_ADDR}/v1/meta/pubkey)" \
    "$(ssh-keygen -yf $WORKDIR/var/shieldd_key)" \
    "/v1/meta/pubkey gives out the daemon PUBLIC key"
) 2>&1 | indent


# }}}
try "Checking that initial database is empty" # {{{
(run targets   ; none "Initial targets list should be empty"
 run stores    ; none "Initial stores list should be empty"
 run policies  ; none "Initial policies list should be empty"
 run jobs      ; none "Initial jobs list should be empty"
) 2>&1 | indent


# }}}
#
try "Checking that unimplemented HTTP methods return 501s" # {{{
(for method in PUT DELETE PATCH OPTIONS TRACE; do
   for type in targets stores retention jobs archives tasks \
               meta/pubkey status ping; do
     is "$(httpstat $method "http://$SHIELD_DAEMON_ADDR/v1/$type")" \
        "501" "/v1/$type should HTTP 501 (not implemented) on a $method request"
   done
 done
 for method in GET HEAD POST PATCH OPTIONS TRACE; do
   for type in target{,s} store{,s} retention job{,s} archive{,s} task{,s} \
               meta status; do
     is "$(httpstat $method "http://$SHIELD_DAEMON_ADDR/v1/$type/sub/requests")" \
        "501" "/v1/$type/sub/requests should HTTP 501 (not implemented) on a $method request"
   done
 done
) 2>&1 | indent


# }}}
try "Checking that various API endpoints validate UUIDs" # {{{
(for uuid in malformed-uuid-01234 "" "(abcdef-01234-56-789)"; do
   for method in GET PUT; do
     for type in target store retention archive job task; do
       is "$(httpstat $method "http://$SHIELD_DAEMON_ADDR/v1/$type/$uuid")" \
          "501" "$method /v1/$type/$uuid should HTTP 501 (not implemented) on a malformed UUID"
     done
     if [[ -n $uuid ]]; then
       for action in pause unpause; do
         is "$(httpstat $method "http://$SHIELD_DAEMON_ADDR/v1/job/$uuid/$action")" \
            "501" "$method /v1/job/$uuid/$action should HTTP 501 (not implemented) on a malformed UUID"
       done
     fi
   done
 done
) 2>&1 | indent


# }}}
try "Checking that various API endpoints require JSON payloads" # {{{
(uuid=053d66fd-441d-4801-9d26-3e11b99d34a7
 badjson="}"
 for type in targets stores retention jobs; do
   is "$(httpstat POST "http://$SHIELD_DAEMON_ADDR/v1/$type" "$badjson")" \
      "400" "POST /v1/$type should HTTP 400 (bad request) on a malformed JSON payload"
 done
 for type in target store retention job archive; do
   is "$(httpstat PUT "http://$SHIELD_DAEMON_ADDR/v1/$type/$uuid" "$badjson")" \
      "400" "PUT /v1/$type/$uuid should HTTP 400 (bad request) on a malformed JSON payload"
 done

 # special POST cases
 for url in v1/archive/$uuid/restore \
            v1/job/$uuid/run
 do
   is "$(httpstat POST "http://$SHIELD_DAEMON_ADDR/$url" "$badjson")" \
      "400" "POST /$url should HTTP 400 (bad request) on a malformed JSON payload"
 done
) 2>&1 | indent


# }}}

try "Creating invalid things (validation)" # {{{
(for type in target store policy job; do
   ! shield -k --raw create-$type <<<'{}' > $WORKDIR/out
   ok $? "\`shield create-$type' should fail if validation fails"
   # FIXME this is a terrible error message
   is "$(jq -r .error < $WORKDIR/out)" \
      "Error 400 Bad Request" \
      "shield CLI should print an error message when fields are missing"
 done

 ! shield -k --raw create-policy <<EOF > $WORKDIR/out
{
  "name"    : "invalid-term",
  "summary" : "Should Just Straight Up Fail",
  "expires" : 3599
}
EOF
 ok $? "\`shield create-policy' should fail if retention period is <1h"
 # FIXME this is a terrible error message
 is "$(jq -r .error < $WORKDIR/out)" \
    "Error 400 Bad Request" \
    "shield CLI should print an error message about minimum retention period"
) 2>&1 | indent


# }}}
try "Creating testing objects" # {{{
(create target redis-shared <<EOF
{
  "name"    : "redis-shared",
  "summary" : "Shared Redis services for CF",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "redis",
  "endpoint": "{}"
}
EOF

 create target s3 <<EOF
{
  "name"    : "s3",
  "summary" : "Amazon S3 Blobstore",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "s3",
  "endpoint": "{}"
}
EOF

 create target shield <<EOF
{
  "name"    : "shield",
  "summary" : "SHIELD itself",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "postgres",
  "endpoint": "{}"
}
EOF

 create store fs <<EOF
{
  "name"    : "fs",
  "summary" : "A filesystem store",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "fs",
  "endpoint": "{}"
}
EOF

 create store s3 <<EOF
{
  "name"    : "s3",
  "summary" : "Amazon S3 Archival Storage",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "s3",
  "endpoint": "{}"
}
EOF

 create store shield <<EOF
{
  "name"    : "shield",
  "summary" : "SHIELD-FS",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "fs",
  "endpoint": "{}"
}
EOF

 create policy short-term <<EOF
{
  "name"    : "short-term",
  "summary" : "Short-term Backup Retention Policy",
  "expires" : $(( 8 * 86400 ))
}
EOF

 create policy long-term <<EOF
{
  "name"    : "long-term",
  "summary" : "A Longer-term Backup Retention Policy",
  "expires" : $(( 90 * 86400 ))
}
EOF

 create policy shield <<EOF
{
  "name"    : "shield",
  "summary" : "SHIELD retention",
  "expires" : $(( 100 * 86400 ))
}
EOF

 create job redis-daily-to-fs <<EOF
{
  "name"      : "redis-daily-to-fs",
  "summary"   : "Daily Backups of Redis to the local fs",
  "retention" : "$(uuidof policy short-term)",
  "schedule"  : "daily at 11:24pm",
  "store"     : "$(uuidof store fs)",
  "target"    : "$(uuidof target redis-shared)",
  "paused"    : true
}
EOF

 create job shield-itself <<EOF
{
  "name"      : "shield-itself",
  "summary"   : "Backing up SHIELDs database, via SHIELD...",
  "retention" : "$(uuidof policy shield)",
  "schedule"  : "tuesdays at 11am",
  "store"     : "$(uuidof store shield)",
  "target"    : "$(uuidof target shield)",
  "paused"    : false
}
EOF
) 2>&1 | indent


# }}}

try "Finding a single target" # {{{
(run target $(uuidof target s3)
 context 'a single target'
 attr name    s3
 attr summary 'Amazon S3 Blobstore'
 attr agent   "$SHIELD_AGENT_ADDR"
 attr plugin  s3
) 2>&1 | indent


# }}}
try "Listing targets" # {{{
(run targets
 context 'all targets'
 includes target s3
 includes target redis-shared

 pick s3
 attr name    s3
 attr summary 'Amazon S3 Blobstore'
 attr agent   "$SHIELD_AGENT_ADDR"
 attr plugin  s3

 run targets redis-shared
 context 'targets named "redis-shared"'
 excludes target s3
 includes target redis-shared

 run targets --fuzzy redis
 context 'targets named "*redis*"'
 excludes target s3
 includes target redis-shared

 run targets --fuzzy s
 context 'targets named "*s*"'
 includes target s3
 includes target redis-shared

 run targets --fuzzy xyzzy
 none 'no targets are named "*xyzzy*"'

 run targets --used
 context 'used targets'
 excludes target s3
 includes target redis-shared

 run targets --unused
 context 'unused targets'
 includes target s3
 excludes target redis-shared

 run targets --plugin redis
 context 'targets using the "redis" plugin'
 excludes target s3
 includes target redis-shared

 run targets --plugin enoent
 none "Should find no results for bogus target plugin search"

 run targets --plugin redis --unused
 none "No targets matched unused && plugin-redis"

 run targets --plugin redis --used
 context 'used targets using the "redis" plugin'
 excludes target s3
 includes target redis-shared
) 2>&1 | indent


# }}}

try "Finding a single store" # {{{
(run store $(uuidof store s3)
 context 'a single store'
 attr name    s3
 attr summary 'Amazon S3 Archival Storage'
 attr plugin  s3
) 2>&1 | indent


# }}}
try "Listing stores" # {{{
(run stores
 context 'all stores'
 includes store s3
 includes store fs

 pick s3
 attr name    s3
 attr summary 'Amazon S3 Archival Storage'
 attr plugin  s3

 run stores fs
 context 'stores named "fs"'
 excludes store s3
 includes store fs

 run stores --fuzzy F
 context 'stores named "*F*"'
 excludes store s3
 includes store fs

 run stores --fuzzy s
 context 'stores named "*s*"'
 includes store s3
 includes store fs

 run stores --fuzzy xyzzy
 none 'no stores are named "*xyzzy*"'

 run stores --used
 context 'used stores'
 excludes store s3
 includes store fs

 run stores --unused
 context 'unused stores'
 includes store s3
 excludes store fs

 run stores --plugin fs
 context 'stores using the "fs" plugin'
 excludes store s3
 includes store fs

 run stores --plugin enoent
 none "Should find no results for bogus store plugin search"

 run stores --plugin fs --unused
 none "No stores matched unused && plugin=fs"

 run stores --plugin fs --used
 context 'in-use stores using the "fs" plugin'
 excludes store s3
 includes store fs
) 2>&1 | indent


# }}}

try "Finding a single policy" # {{{
(run policy $(uuidof policy short-term)
 context 'a single retention policy'
 attr name    'short-term'
 attr summary 'Short-term Backup Retention Policy'
 attr expires $(( 8 * 86400 ))
) 2>&1 | indent


# }}}
try "Listing retention policies" # {{{
(run policies
 context 'all retention policies'
 includes policy short-term
 includes policy long-term

 pick 'short-term'
 attr uuid    "$(uuidof policy short-term)"
 attr summary "Short-term Backup Retention Policy"
 attr expires $(( 8 * 86400 ))

 run policies short-term
 context 'policies named "short-term"'
 includes policy short-term
 excludes policy long-term

 run policies --fuzzy or
 context 'policies named "*or*"'
 includes policy short-term
 excludes policy long-term

 run policies --fuzzy term
 context 'policies named "*term*"'
 includes policy short-term
 includes policy long-term

 run policies --fuzzy xyzzy
 none 'no policies are named "*xyzzy*"'

 run policies --used
 context 'in-use policies'
 excludes policy long-term
 includes policy short-term

 run policies --unused
 context 'unused policies'
 includes policy long-term
 excludes policy short-term
) 2>&1 | indent


# }}}

try "Finding a single job" # {{{
(run job $(uuidof job redis-daily-to-fs)
 context 'a single job'
 attr name            redis-daily-to-fs
 attr summary         'Daily Backups of Redis to the local fs'

 attr retention_name  short-term
 attr retention_uuid  "$(uuidof policy short-term)"

 attr schedule        'daily at 11:24pm'

 attr store_uuid      "$(uuidof store fs)"
 attr store_name      fs
 attr store_plugin    fs
 attr store_endpoint  '{}'

 attr target_uuid     "$(uuidof target redis-shared)"
 attr target_name     redis-shared
 attr target_plugin   redis
 attr target_endpoint '{}'

 attr agent           "$SHIELD_AGENT_ADDR"
 attr expiry          $(( 8 * 86400 ))
 attr paused          true
) 2>&1 | indent


# }}}
try "Listing jobs" # {{{
(run jobs
 context 'all jobs'
 includes job redis-daily-to-fs
 includes job shield-itself

 pick redis-daily-to-fs
 attr uuid            "$(uuidof job redis-daily-to-fs)"
 attr name            redis-daily-to-fs
 attr summary         'Daily Backups of Redis to the local fs'

 attr retention_name  short-term
 attr retention_uuid  "$(uuidof policy short-term)"

 attr schedule        'daily at 11:24pm'

 attr store_uuid      "$(uuidof store fs)"
 attr store_name      fs
 attr store_plugin    fs
 attr store_endpoint  '{}'

 attr target_uuid     "$(uuidof target redis-shared)"
 attr target_name     redis-shared
 attr target_plugin   redis
 attr target_endpoint '{}'

 attr agent           "$SHIELD_AGENT_ADDR"
 attr expiry          $(( 8 * 86400 ))
 attr paused          true
 pick redis-daily-to-fs

 run jobs redis-daily-to-fs
 context 'jobs named "redis-daily-to-fs" (exact match)'
 excludes job shield-itself
 includes job redis-daily-to-fs

 run jobs --fuzzy daily
 context 'jobs named "*daily*"'
 excludes job shield-itself
 includes job redis-daily-to-fs

 run jobs --fuzzy f
 context 'jobs named "*f*"'
 includes job shield-itself
 includes job redis-daily-to-fs

 run jobs --fuzzy xyzzy
 none 'no jobs are named "*xyzzy*"'

 run jobs --target $(uuidof target shield)
 context 'jobs for the "shield" target'
 includes job shield-itself
 excludes job redis-daily-to-fs

 run jobs --store $(uuidof store shield)
 context 'jobs for the "shield" store'
 ok $? "\`shield jobs --store <uuid>' should succeed"
 includes job shield-itself
 excludes job redis-daily-to-fs

 run jobs --policy $(uuidof policy shield)
 context 'jobs for the "shield" retention policy'
 includes job shield-itself
 excludes job redis-daily-to-fs

 run jobs --paused
 context 'paused jobs'
 excludes job shield-itself
 includes job redis-daily-to-fs

 run jobs --unpaused
 context 'unpaused jobs'
 includes job shield-itself
 excludes job redis-daily-to-fs
) 2>&1 | indent


# }}}
try "Pausing and unpausing jobs" # {{{
(pause   job shield-itself
 unpause job shield-itself
 pause   job shield-itself
) 2>&1 | indent


# }}}

try "Updating things" # {{{
(update target s3 <<EOF
{
  "name"    : "s3",
  "summary" : "A New Summary",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "s3",
  "endpoint": "{}"
}
EOF
 context 'post-update of target s3'
 run target s3
 attr uuid $(uuidof target s3)
 attr summary 'A New Summary'

 update store s3 <<EOF
{
  "name"    : "s3",
  "summary" : "A New, Different AWS",
  "agent"   : "$SHIELD_AGENT_ADDR",
  "plugin"  : "s3",
  "endpoint": "{}"
}
EOF
 context 'post-update of store s3'
 run store s3
 attr uuid $(uuidof store s3)
 attr summary 'A New, Different AWS'

 update policy long-term <<EOF
{
  "name"    : "long-term",
  "summary" : "Even Longer of A Term",
  "expires" : $(( 100 * 86400 ))
}
EOF
 context 'post-update of retention policy long-term'
 run policy long-term
 attr uuid $(uuidof policy long-term)
 attr summary 'Even Longer of A Term'
 attr expires $(( 100 * 86400 ))

 update job shield-itself <<EOF
{
  "name"      : "shield-itself",
  "summary"   : "SHIELD or something",
  "retention" : "$(uuidof policy long-term)",
  "schedule"  : "sundays at 3:15am",
  "store"     : "$(uuidof store s3)",
  "target"    : "$(uuidof target shield)"
}
EOF
 context 'post-update of job shield-itself'
 run job shield-itself
 attr uuid $(uuidof job shield-itself)
 attr summary 'SHIELD or something'
 attr retention_uuid $(uuidof policy long-term)
 attr retention_name long-term
 attr schedule       "sundays at 3:15am"
 attr store_uuid     $(uuidof store s3)
 attr store_name     s3
 attr target_uuid    $(uuidof target shield)
 attr target_name    shield

 # then put it back
 update job shield-itself <<EOF
{
  "name"      : "shield-itself",
  "summary"   : "SHIELD or something",
  "retention" : "$(uuidof policy shield)",
  "schedule"  : "tuesdays at 11am",
  "store"     : "$(uuidof store shield)",
  "target"    : "$(uuidof target shield)",
  "paused"    : false
}
EOF
) 2>&1 | indent
# }}}
try "Deleting things" # {{{
(context 'it is in use by at least one job'
 cannot_delete target   redis-shared
 cannot_delete store    fs
 cannot_delete policy   short-term

 context 'it is not in use by any job'
 can_delete target   s3
 can_delete store    s3
 can_delete policy   long-term

 context 'jobs can always be deleted'
 can_delete job redis-daily-to-fs

 context 'we deleted the job it was used by'
 can_delete target   redis-shared
 can_delete store    fs
 can_delete policy   short-term
) 2>&1 | indent


# }}}
done_testing

# vim:ft=bash
