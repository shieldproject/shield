// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/orchestrator"
)

type FakeDeploymentManager struct {
	FindStub        func(deploymentName string) (orchestrator.Deployment, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		deploymentName string
	}
	findReturns struct {
		result1 orchestrator.Deployment
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 orchestrator.Deployment
		result2 error
	}
	SaveManifestStub        func(deploymentName string, artifact orchestrator.Backup) error
	saveManifestMutex       sync.RWMutex
	saveManifestArgsForCall []struct {
		deploymentName string
		artifact       orchestrator.Backup
	}
	saveManifestReturns struct {
		result1 error
	}
	saveManifestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeploymentManager) Find(deploymentName string) (orchestrator.Deployment, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		deploymentName string
	}{deploymentName})
	fake.recordInvocation("Find", []interface{}{deploymentName})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(deploymentName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *FakeDeploymentManager) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeDeploymentManager) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].deploymentName
}

func (fake *FakeDeploymentManager) FindReturns(result1 orchestrator.Deployment, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 orchestrator.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeDeploymentManager) FindReturnsOnCall(i int, result1 orchestrator.Deployment, result2 error) {
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 orchestrator.Deployment
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 orchestrator.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeDeploymentManager) SaveManifest(deploymentName string, artifact orchestrator.Backup) error {
	fake.saveManifestMutex.Lock()
	ret, specificReturn := fake.saveManifestReturnsOnCall[len(fake.saveManifestArgsForCall)]
	fake.saveManifestArgsForCall = append(fake.saveManifestArgsForCall, struct {
		deploymentName string
		artifact       orchestrator.Backup
	}{deploymentName, artifact})
	fake.recordInvocation("SaveManifest", []interface{}{deploymentName, artifact})
	fake.saveManifestMutex.Unlock()
	if fake.SaveManifestStub != nil {
		return fake.SaveManifestStub(deploymentName, artifact)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.saveManifestReturns.result1
}

func (fake *FakeDeploymentManager) SaveManifestCallCount() int {
	fake.saveManifestMutex.RLock()
	defer fake.saveManifestMutex.RUnlock()
	return len(fake.saveManifestArgsForCall)
}

func (fake *FakeDeploymentManager) SaveManifestArgsForCall(i int) (string, orchestrator.Backup) {
	fake.saveManifestMutex.RLock()
	defer fake.saveManifestMutex.RUnlock()
	return fake.saveManifestArgsForCall[i].deploymentName, fake.saveManifestArgsForCall[i].artifact
}

func (fake *FakeDeploymentManager) SaveManifestReturns(result1 error) {
	fake.SaveManifestStub = nil
	fake.saveManifestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) SaveManifestReturnsOnCall(i int, result1 error) {
	fake.SaveManifestStub = nil
	if fake.saveManifestReturnsOnCall == nil {
		fake.saveManifestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveManifestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeploymentManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.saveManifestMutex.RLock()
	defer fake.saveManifestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeploymentManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ orchestrator.DeploymentManager = new(FakeDeploymentManager)
