// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/director"
	"github.com/cloudfoundry/bosh-utils/uuid"
	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/ssh"
)

type FakeSSHOptsGenerator struct {
	Stub        func(uuidGen uuid.Generator) (director.SSHOpts, string, error)
	mutex       sync.RWMutex
	argsForCall []struct {
		uuidGen uuid.Generator
	}
	returns struct {
		result1 director.SSHOpts
		result2 string
		result3 error
	}
	returnsOnCall map[int]struct {
		result1 director.SSHOpts
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSHOptsGenerator) Spy(uuidGen uuid.Generator) (director.SSHOpts, string, error) {
	fake.mutex.Lock()
	ret, specificReturn := fake.returnsOnCall[len(fake.argsForCall)]
	fake.argsForCall = append(fake.argsForCall, struct {
		uuidGen uuid.Generator
	}{uuidGen})
	fake.recordInvocation("SSHOptsGenerator", []interface{}{uuidGen})
	fake.mutex.Unlock()
	if fake.Stub != nil {
		return fake.Stub(uuidGen)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.returns.result1, fake.returns.result2, fake.returns.result3
}

func (fake *FakeSSHOptsGenerator) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeSSHOptsGenerator) ArgsForCall(i int) uuid.Generator {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].uuidGen
}

func (fake *FakeSSHOptsGenerator) Returns(result1 director.SSHOpts, result2 string, result3 error) {
	fake.Stub = nil
	fake.returns = struct {
		result1 director.SSHOpts
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSSHOptsGenerator) ReturnsOnCall(i int, result1 director.SSHOpts, result2 string, result3 error) {
	fake.Stub = nil
	if fake.returnsOnCall == nil {
		fake.returnsOnCall = make(map[int]struct {
			result1 director.SSHOpts
			result2 string
			result3 error
		})
	}
	fake.returnsOnCall[i] = struct {
		result1 director.SSHOpts
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSSHOptsGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSHOptsGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssh.SSHOptsGenerator = new(FakeSSHOptsGenerator).Spy
