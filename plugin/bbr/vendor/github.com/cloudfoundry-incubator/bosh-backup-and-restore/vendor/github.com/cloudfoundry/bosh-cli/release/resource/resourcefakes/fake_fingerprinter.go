// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/release/resource"
)

type FakeFingerprinter struct {
	CalculateStub        func([]resource.File, []string) (string, error)
	calculateMutex       sync.RWMutex
	calculateArgsForCall []struct {
		arg1 []resource.File
		arg2 []string
	}
	calculateReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFingerprinter) Calculate(arg1 []resource.File, arg2 []string) (string, error) {
	var arg1Copy []resource.File
	if arg1 != nil {
		arg1Copy = make([]resource.File, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.calculateMutex.Lock()
	fake.calculateArgsForCall = append(fake.calculateArgsForCall, struct {
		arg1 []resource.File
		arg2 []string
	}{arg1Copy, arg2Copy})
	fake.recordInvocation("Calculate", []interface{}{arg1Copy, arg2Copy})
	fake.calculateMutex.Unlock()
	if fake.CalculateStub != nil {
		return fake.CalculateStub(arg1, arg2)
	} else {
		return fake.calculateReturns.result1, fake.calculateReturns.result2
	}
}

func (fake *FakeFingerprinter) CalculateCallCount() int {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return len(fake.calculateArgsForCall)
}

func (fake *FakeFingerprinter) CalculateArgsForCall(i int) ([]resource.File, []string) {
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return fake.calculateArgsForCall[i].arg1, fake.calculateArgsForCall[i].arg2
}

func (fake *FakeFingerprinter) CalculateReturns(result1 string, result2 error) {
	fake.CalculateStub = nil
	fake.calculateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFingerprinter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateMutex.RLock()
	defer fake.calculateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFingerprinter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.Fingerprinter = new(FakeFingerprinter)
