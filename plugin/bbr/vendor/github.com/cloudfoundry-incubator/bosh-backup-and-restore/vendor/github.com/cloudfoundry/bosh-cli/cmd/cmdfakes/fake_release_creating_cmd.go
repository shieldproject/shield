// This file was generated by counterfeiter
package cmdfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cmd"
	"github.com/cloudfoundry/bosh-cli/release"
)

type FakeReleaseCreatingCmd struct {
	RunStub        func(cmd.CreateReleaseOpts) (release.Release, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 cmd.CreateReleaseOpts
	}
	runReturns struct {
		result1 release.Release
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReleaseCreatingCmd) Run(arg1 cmd.CreateReleaseOpts) (release.Release, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 cmd.CreateReleaseOpts
	}{arg1})
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeReleaseCreatingCmd) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeReleaseCreatingCmd) RunArgsForCall(i int) cmd.CreateReleaseOpts {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg1
}

func (fake *FakeReleaseCreatingCmd) RunReturns(result1 release.Release, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 release.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseCreatingCmd) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReleaseCreatingCmd) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.ReleaseCreatingCmd = new(FakeReleaseCreatingCmd)
