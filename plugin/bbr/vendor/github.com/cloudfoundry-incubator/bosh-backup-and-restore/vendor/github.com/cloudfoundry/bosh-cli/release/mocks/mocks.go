// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/cloudfoundry/bosh-cli/release (interfaces: Manager,Extractor)

package mocks

import (
	release "github.com/cloudfoundry/bosh-cli/release"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) Add(_param0 release.Release) {
	_m.ctrl.Call(_m, "Add", _param0)
}

func (_mr *_MockManagerRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockManager) DeleteAll() error {
	ret := _m.ctrl.Call(_m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) DeleteAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAll")
}

func (_m *MockManager) Find(_param0 string) (release.Release, bool) {
	ret := _m.ctrl.Call(_m, "Find", _param0)
	ret0, _ := ret[0].(release.Release)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0)
}

func (_m *MockManager) List() []release.Release {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]release.Release)
	return ret0
}

func (_mr *_MockManagerRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

// Mock of Extractor interface
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *_MockExtractorRecorder
}

// Recorder for MockExtractor (not exported)
type _MockExtractorRecorder struct {
	mock *MockExtractor
}

func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &_MockExtractorRecorder{mock}
	return mock
}

func (_m *MockExtractor) EXPECT() *_MockExtractorRecorder {
	return _m.recorder
}

func (_m *MockExtractor) Extract(_param0 string) (release.Release, error) {
	ret := _m.ctrl.Call(_m, "Extract", _param0)
	ret0, _ := ret[0].(release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExtractorRecorder) Extract(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Extract", arg0)
}
