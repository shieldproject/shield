// This file was generated by counterfeiter
package uaafakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/uaa"
)

type FakeAccessToken struct {
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns     struct {
		result1 string
	}
	ValueStub        func() string
	valueMutex       sync.RWMutex
	valueArgsForCall []struct{}
	valueReturns     struct {
		result1 string
	}
	RefreshTokenStub        func() uaa.Token
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct{}
	refreshTokenReturns     struct {
		result1 uaa.Token
	}
	RefreshStub        func() (uaa.AccessToken, error)
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct{}
	refreshReturns     struct {
		result1 uaa.AccessToken
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessToken) Type() string {
	fake.typeMutex.Lock()
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	} else {
		return fake.typeReturns.result1
	}
}

func (fake *FakeAccessToken) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeAccessToken) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessToken) Value() string {
	fake.valueMutex.Lock()
	fake.valueArgsForCall = append(fake.valueArgsForCall, struct{}{})
	fake.recordInvocation("Value", []interface{}{})
	fake.valueMutex.Unlock()
	if fake.ValueStub != nil {
		return fake.ValueStub()
	} else {
		return fake.valueReturns.result1
	}
}

func (fake *FakeAccessToken) ValueCallCount() int {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return len(fake.valueArgsForCall)
}

func (fake *FakeAccessToken) ValueReturns(result1 string) {
	fake.ValueStub = nil
	fake.valueReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessToken) RefreshToken() uaa.Token {
	fake.refreshTokenMutex.Lock()
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct{}{})
	fake.recordInvocation("RefreshToken", []interface{}{})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub()
	} else {
		return fake.refreshTokenReturns.result1
	}
}

func (fake *FakeAccessToken) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeAccessToken) RefreshTokenReturns(result1 uaa.Token) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 uaa.Token
	}{result1}
}

func (fake *FakeAccessToken) Refresh() (uaa.AccessToken, error) {
	fake.refreshMutex.Lock()
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct{}{})
	fake.recordInvocation("Refresh", []interface{}{})
	fake.refreshMutex.Unlock()
	if fake.RefreshStub != nil {
		return fake.RefreshStub()
	} else {
		return fake.refreshReturns.result1, fake.refreshReturns.result2
	}
}

func (fake *FakeAccessToken) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeAccessToken) RefreshReturns(result1 uaa.AccessToken, result2 error) {
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 uaa.AccessToken
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessToken) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAccessToken) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaa.AccessToken = new(FakeAccessToken)
