// This file was generated by counterfeiter
package directorfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/director"
	"github.com/cppforlife/go-semi-semantic/version"
)

type FakeStemcell struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	VersionStub        func() version.Version
	versionMutex       sync.RWMutex
	versionArgsForCall []struct{}
	versionReturns     struct {
		result1 version.Version
	}
	VersionMarkStub        func(mark string) string
	versionMarkMutex       sync.RWMutex
	versionMarkArgsForCall []struct {
		mark string
	}
	versionMarkReturns struct {
		result1 string
	}
	OSNameStub        func() string
	oSNameMutex       sync.RWMutex
	oSNameArgsForCall []struct{}
	oSNameReturns     struct {
		result1 string
	}
	CPIStub        func() string
	cPIMutex       sync.RWMutex
	cPIArgsForCall []struct{}
	cPIReturns     struct {
		result1 string
	}
	CIDStub        func() string
	cIDMutex       sync.RWMutex
	cIDArgsForCall []struct{}
	cIDReturns     struct {
		result1 string
	}
	DeleteStub        func(force bool) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		force bool
	}
	deleteReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStemcell) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakeStemcell) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeStemcell) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStemcell) Version() version.Version {
	fake.versionMutex.Lock()
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct{}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	} else {
		return fake.versionReturns.result1
	}
}

func (fake *FakeStemcell) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeStemcell) VersionReturns(result1 version.Version) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 version.Version
	}{result1}
}

func (fake *FakeStemcell) VersionMark(mark string) string {
	fake.versionMarkMutex.Lock()
	fake.versionMarkArgsForCall = append(fake.versionMarkArgsForCall, struct {
		mark string
	}{mark})
	fake.recordInvocation("VersionMark", []interface{}{mark})
	fake.versionMarkMutex.Unlock()
	if fake.VersionMarkStub != nil {
		return fake.VersionMarkStub(mark)
	} else {
		return fake.versionMarkReturns.result1
	}
}

func (fake *FakeStemcell) VersionMarkCallCount() int {
	fake.versionMarkMutex.RLock()
	defer fake.versionMarkMutex.RUnlock()
	return len(fake.versionMarkArgsForCall)
}

func (fake *FakeStemcell) VersionMarkArgsForCall(i int) string {
	fake.versionMarkMutex.RLock()
	defer fake.versionMarkMutex.RUnlock()
	return fake.versionMarkArgsForCall[i].mark
}

func (fake *FakeStemcell) VersionMarkReturns(result1 string) {
	fake.VersionMarkStub = nil
	fake.versionMarkReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStemcell) OSName() string {
	fake.oSNameMutex.Lock()
	fake.oSNameArgsForCall = append(fake.oSNameArgsForCall, struct{}{})
	fake.recordInvocation("OSName", []interface{}{})
	fake.oSNameMutex.Unlock()
	if fake.OSNameStub != nil {
		return fake.OSNameStub()
	} else {
		return fake.oSNameReturns.result1
	}
}

func (fake *FakeStemcell) OSNameCallCount() int {
	fake.oSNameMutex.RLock()
	defer fake.oSNameMutex.RUnlock()
	return len(fake.oSNameArgsForCall)
}

func (fake *FakeStemcell) OSNameReturns(result1 string) {
	fake.OSNameStub = nil
	fake.oSNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStemcell) CPI() string {
	fake.cPIMutex.Lock()
	fake.cPIArgsForCall = append(fake.cPIArgsForCall, struct{}{})
	fake.recordInvocation("CPI", []interface{}{})
	fake.cPIMutex.Unlock()
	if fake.CPIStub != nil {
		return fake.CPIStub()
	} else {
		return fake.cPIReturns.result1
	}
}

func (fake *FakeStemcell) CPICallCount() int {
	fake.cPIMutex.RLock()
	defer fake.cPIMutex.RUnlock()
	return len(fake.cPIArgsForCall)
}

func (fake *FakeStemcell) CPIReturns(result1 string) {
	fake.CPIStub = nil
	fake.cPIReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStemcell) CID() string {
	fake.cIDMutex.Lock()
	fake.cIDArgsForCall = append(fake.cIDArgsForCall, struct{}{})
	fake.recordInvocation("CID", []interface{}{})
	fake.cIDMutex.Unlock()
	if fake.CIDStub != nil {
		return fake.CIDStub()
	} else {
		return fake.cIDReturns.result1
	}
}

func (fake *FakeStemcell) CIDCallCount() int {
	fake.cIDMutex.RLock()
	defer fake.cIDMutex.RUnlock()
	return len(fake.cIDArgsForCall)
}

func (fake *FakeStemcell) CIDReturns(result1 string) {
	fake.CIDStub = nil
	fake.cIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStemcell) Delete(force bool) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		force bool
	}{force})
	fake.recordInvocation("Delete", []interface{}{force})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(force)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeStemcell) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeStemcell) DeleteArgsForCall(i int) bool {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].force
}

func (fake *FakeStemcell) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStemcell) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	fake.versionMarkMutex.RLock()
	defer fake.versionMarkMutex.RUnlock()
	fake.oSNameMutex.RLock()
	defer fake.oSNameMutex.RUnlock()
	fake.cPIMutex.RLock()
	defer fake.cPIMutex.RUnlock()
	fake.cIDMutex.RLock()
	defer fake.cIDMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStemcell) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ director.Stemcell = new(FakeStemcell)
