// This file was generated by counterfeiter
package indexfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/releasedir/index"
)

type FakeIndexBlobs struct {
	GetStub        func(name, blobID, sha1 string) (string, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		name   string
		blobID string
		sha1   string
	}
	getReturns struct {
		result1 string
		result2 error
	}
	AddStub        func(name, path, sha1 string) (string, string, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		name string
		path string
		sha1 string
	}
	addReturns struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexBlobs) Get(name string, blobID string, sha1 string) (string, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		name   string
		blobID string
		sha1   string
	}{name, blobID, sha1})
	fake.recordInvocation("Get", []interface{}{name, blobID, sha1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(name, blobID, sha1)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *FakeIndexBlobs) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIndexBlobs) GetArgsForCall(i int) (string, string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].name, fake.getArgsForCall[i].blobID, fake.getArgsForCall[i].sha1
}

func (fake *FakeIndexBlobs) GetReturns(result1 string, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexBlobs) Add(name string, path string, sha1 string) (string, string, error) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		name string
		path string
		sha1 string
	}{name, path, sha1})
	fake.recordInvocation("Add", []interface{}{name, path, sha1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(name, path, sha1)
	} else {
		return fake.addReturns.result1, fake.addReturns.result2, fake.addReturns.result3
	}
}

func (fake *FakeIndexBlobs) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeIndexBlobs) AddArgsForCall(i int) (string, string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].name, fake.addArgsForCall[i].path, fake.addArgsForCall[i].sha1
}

func (fake *FakeIndexBlobs) AddReturns(result1 string, result2 string, result3 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIndexBlobs) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIndexBlobs) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ index.IndexBlobs = new(FakeIndexBlobs)
