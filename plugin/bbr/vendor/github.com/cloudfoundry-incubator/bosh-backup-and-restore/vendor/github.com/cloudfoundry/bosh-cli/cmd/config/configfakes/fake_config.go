// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/cmd/config"
)

type FakeConfig struct {
	EnvironmentsStub        func() []config.Environment
	environmentsMutex       sync.RWMutex
	environmentsArgsForCall []struct{}
	environmentsReturns     struct {
		result1 []config.Environment
	}
	ResolveEnvironmentStub        func(urlOrAlias string) string
	resolveEnvironmentMutex       sync.RWMutex
	resolveEnvironmentArgsForCall []struct {
		urlOrAlias string
	}
	resolveEnvironmentReturns struct {
		result1 string
	}
	AliasEnvironmentStub        func(url, alias, caCert string) (config.Config, error)
	aliasEnvironmentMutex       sync.RWMutex
	aliasEnvironmentArgsForCall []struct {
		url    string
		alias  string
		caCert string
	}
	aliasEnvironmentReturns struct {
		result1 config.Config
		result2 error
	}
	CACertStub        func(url string) string
	cACertMutex       sync.RWMutex
	cACertArgsForCall []struct {
		url string
	}
	cACertReturns struct {
		result1 string
	}
	CredentialsStub        func(url string) config.Creds
	credentialsMutex       sync.RWMutex
	credentialsArgsForCall []struct {
		url string
	}
	credentialsReturns struct {
		result1 config.Creds
	}
	SetCredentialsStub        func(url string, creds config.Creds) config.Config
	setCredentialsMutex       sync.RWMutex
	setCredentialsArgsForCall []struct {
		url   string
		creds config.Creds
	}
	setCredentialsReturns struct {
		result1 config.Config
	}
	UnsetCredentialsStub        func(url string) config.Config
	unsetCredentialsMutex       sync.RWMutex
	unsetCredentialsArgsForCall []struct {
		url string
	}
	unsetCredentialsReturns struct {
		result1 config.Config
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfig) Environments() []config.Environment {
	fake.environmentsMutex.Lock()
	fake.environmentsArgsForCall = append(fake.environmentsArgsForCall, struct{}{})
	fake.recordInvocation("Environments", []interface{}{})
	fake.environmentsMutex.Unlock()
	if fake.EnvironmentsStub != nil {
		return fake.EnvironmentsStub()
	} else {
		return fake.environmentsReturns.result1
	}
}

func (fake *FakeConfig) EnvironmentsCallCount() int {
	fake.environmentsMutex.RLock()
	defer fake.environmentsMutex.RUnlock()
	return len(fake.environmentsArgsForCall)
}

func (fake *FakeConfig) EnvironmentsReturns(result1 []config.Environment) {
	fake.EnvironmentsStub = nil
	fake.environmentsReturns = struct {
		result1 []config.Environment
	}{result1}
}

func (fake *FakeConfig) ResolveEnvironment(urlOrAlias string) string {
	fake.resolveEnvironmentMutex.Lock()
	fake.resolveEnvironmentArgsForCall = append(fake.resolveEnvironmentArgsForCall, struct {
		urlOrAlias string
	}{urlOrAlias})
	fake.recordInvocation("ResolveEnvironment", []interface{}{urlOrAlias})
	fake.resolveEnvironmentMutex.Unlock()
	if fake.ResolveEnvironmentStub != nil {
		return fake.ResolveEnvironmentStub(urlOrAlias)
	} else {
		return fake.resolveEnvironmentReturns.result1
	}
}

func (fake *FakeConfig) ResolveEnvironmentCallCount() int {
	fake.resolveEnvironmentMutex.RLock()
	defer fake.resolveEnvironmentMutex.RUnlock()
	return len(fake.resolveEnvironmentArgsForCall)
}

func (fake *FakeConfig) ResolveEnvironmentArgsForCall(i int) string {
	fake.resolveEnvironmentMutex.RLock()
	defer fake.resolveEnvironmentMutex.RUnlock()
	return fake.resolveEnvironmentArgsForCall[i].urlOrAlias
}

func (fake *FakeConfig) ResolveEnvironmentReturns(result1 string) {
	fake.ResolveEnvironmentStub = nil
	fake.resolveEnvironmentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) AliasEnvironment(url string, alias string, caCert string) (config.Config, error) {
	fake.aliasEnvironmentMutex.Lock()
	fake.aliasEnvironmentArgsForCall = append(fake.aliasEnvironmentArgsForCall, struct {
		url    string
		alias  string
		caCert string
	}{url, alias, caCert})
	fake.recordInvocation("AliasEnvironment", []interface{}{url, alias, caCert})
	fake.aliasEnvironmentMutex.Unlock()
	if fake.AliasEnvironmentStub != nil {
		return fake.AliasEnvironmentStub(url, alias, caCert)
	} else {
		return fake.aliasEnvironmentReturns.result1, fake.aliasEnvironmentReturns.result2
	}
}

func (fake *FakeConfig) AliasEnvironmentCallCount() int {
	fake.aliasEnvironmentMutex.RLock()
	defer fake.aliasEnvironmentMutex.RUnlock()
	return len(fake.aliasEnvironmentArgsForCall)
}

func (fake *FakeConfig) AliasEnvironmentArgsForCall(i int) (string, string, string) {
	fake.aliasEnvironmentMutex.RLock()
	defer fake.aliasEnvironmentMutex.RUnlock()
	return fake.aliasEnvironmentArgsForCall[i].url, fake.aliasEnvironmentArgsForCall[i].alias, fake.aliasEnvironmentArgsForCall[i].caCert
}

func (fake *FakeConfig) AliasEnvironmentReturns(result1 config.Config, result2 error) {
	fake.AliasEnvironmentStub = nil
	fake.aliasEnvironmentReturns = struct {
		result1 config.Config
		result2 error
	}{result1, result2}
}

func (fake *FakeConfig) CACert(url string) string {
	fake.cACertMutex.Lock()
	fake.cACertArgsForCall = append(fake.cACertArgsForCall, struct {
		url string
	}{url})
	fake.recordInvocation("CACert", []interface{}{url})
	fake.cACertMutex.Unlock()
	if fake.CACertStub != nil {
		return fake.CACertStub(url)
	} else {
		return fake.cACertReturns.result1
	}
}

func (fake *FakeConfig) CACertCallCount() int {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return len(fake.cACertArgsForCall)
}

func (fake *FakeConfig) CACertArgsForCall(i int) string {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return fake.cACertArgsForCall[i].url
}

func (fake *FakeConfig) CACertReturns(result1 string) {
	fake.CACertStub = nil
	fake.cACertReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Credentials(url string) config.Creds {
	fake.credentialsMutex.Lock()
	fake.credentialsArgsForCall = append(fake.credentialsArgsForCall, struct {
		url string
	}{url})
	fake.recordInvocation("Credentials", []interface{}{url})
	fake.credentialsMutex.Unlock()
	if fake.CredentialsStub != nil {
		return fake.CredentialsStub(url)
	} else {
		return fake.credentialsReturns.result1
	}
}

func (fake *FakeConfig) CredentialsCallCount() int {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return len(fake.credentialsArgsForCall)
}

func (fake *FakeConfig) CredentialsArgsForCall(i int) string {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return fake.credentialsArgsForCall[i].url
}

func (fake *FakeConfig) CredentialsReturns(result1 config.Creds) {
	fake.CredentialsStub = nil
	fake.credentialsReturns = struct {
		result1 config.Creds
	}{result1}
}

func (fake *FakeConfig) SetCredentials(url string, creds config.Creds) config.Config {
	fake.setCredentialsMutex.Lock()
	fake.setCredentialsArgsForCall = append(fake.setCredentialsArgsForCall, struct {
		url   string
		creds config.Creds
	}{url, creds})
	fake.recordInvocation("SetCredentials", []interface{}{url, creds})
	fake.setCredentialsMutex.Unlock()
	if fake.SetCredentialsStub != nil {
		return fake.SetCredentialsStub(url, creds)
	} else {
		return fake.setCredentialsReturns.result1
	}
}

func (fake *FakeConfig) SetCredentialsCallCount() int {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return len(fake.setCredentialsArgsForCall)
}

func (fake *FakeConfig) SetCredentialsArgsForCall(i int) (string, config.Creds) {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return fake.setCredentialsArgsForCall[i].url, fake.setCredentialsArgsForCall[i].creds
}

func (fake *FakeConfig) SetCredentialsReturns(result1 config.Config) {
	fake.SetCredentialsStub = nil
	fake.setCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) UnsetCredentials(url string) config.Config {
	fake.unsetCredentialsMutex.Lock()
	fake.unsetCredentialsArgsForCall = append(fake.unsetCredentialsArgsForCall, struct {
		url string
	}{url})
	fake.recordInvocation("UnsetCredentials", []interface{}{url})
	fake.unsetCredentialsMutex.Unlock()
	if fake.UnsetCredentialsStub != nil {
		return fake.UnsetCredentialsStub(url)
	} else {
		return fake.unsetCredentialsReturns.result1
	}
}

func (fake *FakeConfig) UnsetCredentialsCallCount() int {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return len(fake.unsetCredentialsArgsForCall)
}

func (fake *FakeConfig) UnsetCredentialsArgsForCall(i int) string {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return fake.unsetCredentialsArgsForCall[i].url
}

func (fake *FakeConfig) UnsetCredentialsReturns(result1 config.Config) {
	fake.UnsetCredentialsStub = nil
	fake.unsetCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Save() error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	fake.recordInvocation("Save", []interface{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeConfig) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeConfig) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.environmentsMutex.RLock()
	defer fake.environmentsMutex.RUnlock()
	fake.resolveEnvironmentMutex.RLock()
	defer fake.resolveEnvironmentMutex.RUnlock()
	fake.aliasEnvironmentMutex.RLock()
	defer fake.aliasEnvironmentMutex.RUnlock()
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Config = new(FakeConfig)
