// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/release/resource"
)

type FakeArchiveIndex struct {
	FindStub        func(name, fingerprint string) (string, string, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		name        string
		fingerprint string
	}
	findReturns struct {
		result1 string
		result2 string
		result3 error
	}
	AddStub        func(name, fingerprint, path, sha1 string) (string, string, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		name        string
		fingerprint string
		path        string
		sha1        string
	}
	addReturns struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArchiveIndex) Find(name string, fingerprint string) (string, string, error) {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		name        string
		fingerprint string
	}{name, fingerprint})
	fake.recordInvocation("Find", []interface{}{name, fingerprint})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(name, fingerprint)
	} else {
		return fake.findReturns.result1, fake.findReturns.result2, fake.findReturns.result3
	}
}

func (fake *FakeArchiveIndex) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeArchiveIndex) FindArgsForCall(i int) (string, string) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].name, fake.findArgsForCall[i].fingerprint
}

func (fake *FakeArchiveIndex) FindReturns(result1 string, result2 string, result3 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeArchiveIndex) Add(name string, fingerprint string, path string, sha1 string) (string, string, error) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		name        string
		fingerprint string
		path        string
		sha1        string
	}{name, fingerprint, path, sha1})
	fake.recordInvocation("Add", []interface{}{name, fingerprint, path, sha1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(name, fingerprint, path, sha1)
	} else {
		return fake.addReturns.result1, fake.addReturns.result2, fake.addReturns.result3
	}
}

func (fake *FakeArchiveIndex) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeArchiveIndex) AddArgsForCall(i int) (string, string, string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].name, fake.addArgsForCall[i].fingerprint, fake.addArgsForCall[i].path, fake.addArgsForCall[i].sha1
}

func (fake *FakeArchiveIndex) AddReturns(result1 string, result2 string, result3 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeArchiveIndex) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeArchiveIndex) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.ArchiveIndex = new(FakeArchiveIndex)
