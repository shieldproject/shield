// This file was generated by counterfeiter
package storefakes

import (
	"github.com/cloudfoundry/config-server/store"
	"sync"

	"github.com/BurntSushi/migration"
)

type FakeISql struct {
	OpenStub        func(driverName, dataSourceName string, migrations []migration.Migrator) (store.IDb, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		driverName     string
		dataSourceName string
		migrations     []migration.Migrator
	}
	openReturns struct {
		result1 store.IDb
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeISql) Open(driverName string, dataSourceName string, migrations []migration.Migrator) (store.IDb, error) {
	var migrationsCopy []migration.Migrator
	if migrations != nil {
		migrationsCopy = make([]migration.Migrator, len(migrations))
		copy(migrationsCopy, migrations)
	}
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		driverName     string
		dataSourceName string
		migrations     []migration.Migrator
	}{driverName, dataSourceName, migrationsCopy})
	fake.recordInvocation("Open", []interface{}{driverName, dataSourceName, migrationsCopy})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(driverName, dataSourceName, migrations)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeISql) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeISql) OpenArgsForCall(i int) (string, string, []migration.Migrator) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].driverName, fake.openArgsForCall[i].dataSourceName, fake.openArgsForCall[i].migrations
}

func (fake *FakeISql) OpenReturns(result1 store.IDb, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 store.IDb
		result2 error
	}{result1, result2}
}

func (fake *FakeISql) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeISql) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.ISql = new(FakeISql)
