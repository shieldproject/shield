// This file was generated by counterfeiter
package storefakes

import (
	"github.com/cloudfoundry/config-server/store"
	"sync"
)

type FakeDbProvider struct {
	DbStub        func() (store.IDb, error)
	dbMutex       sync.RWMutex
	dbArgsForCall []struct{}
	dbReturns     struct {
		result1 store.IDb
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDbProvider) Db() (store.IDb, error) {
	fake.dbMutex.Lock()
	fake.dbArgsForCall = append(fake.dbArgsForCall, struct{}{})
	fake.recordInvocation("Db", []interface{}{})
	fake.dbMutex.Unlock()
	if fake.DbStub != nil {
		return fake.DbStub()
	} else {
		return fake.dbReturns.result1, fake.dbReturns.result2
	}
}

func (fake *FakeDbProvider) DbCallCount() int {
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	return len(fake.dbArgsForCall)
}

func (fake *FakeDbProvider) DbReturns(result1 store.IDb, result2 error) {
	fake.DbStub = nil
	fake.dbReturns = struct {
		result1 store.IDb
		result2 error
	}{result1, result2}
}

func (fake *FakeDbProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDbProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.DbProvider = new(FakeDbProvider)
