// This file was generated by counterfeiter
package typesfakes

import (
	"github.com/cloudfoundry/config-server/types"
	"sync"
)

type FakeValueGeneratorFactory struct {
	GetGeneratorStub        func(valueType string) (types.ValueGenerator, error)
	getGeneratorMutex       sync.RWMutex
	getGeneratorArgsForCall []struct {
		valueType string
	}
	getGeneratorReturns struct {
		result1 types.ValueGenerator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValueGeneratorFactory) GetGenerator(valueType string) (types.ValueGenerator, error) {
	fake.getGeneratorMutex.Lock()
	fake.getGeneratorArgsForCall = append(fake.getGeneratorArgsForCall, struct {
		valueType string
	}{valueType})
	fake.recordInvocation("GetGenerator", []interface{}{valueType})
	fake.getGeneratorMutex.Unlock()
	if fake.GetGeneratorStub != nil {
		return fake.GetGeneratorStub(valueType)
	} else {
		return fake.getGeneratorReturns.result1, fake.getGeneratorReturns.result2
	}
}

func (fake *FakeValueGeneratorFactory) GetGeneratorCallCount() int {
	fake.getGeneratorMutex.RLock()
	defer fake.getGeneratorMutex.RUnlock()
	return len(fake.getGeneratorArgsForCall)
}

func (fake *FakeValueGeneratorFactory) GetGeneratorArgsForCall(i int) string {
	fake.getGeneratorMutex.RLock()
	defer fake.getGeneratorMutex.RUnlock()
	return fake.getGeneratorArgsForCall[i].valueType
}

func (fake *FakeValueGeneratorFactory) GetGeneratorReturns(result1 types.ValueGenerator, result2 error) {
	fake.GetGeneratorStub = nil
	fake.getGeneratorReturns = struct {
		result1 types.ValueGenerator
		result2 error
	}{result1, result2}
}

func (fake *FakeValueGeneratorFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGeneratorMutex.RLock()
	defer fake.getGeneratorMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeValueGeneratorFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.ValueGeneratorFactory = new(FakeValueGeneratorFactory)
