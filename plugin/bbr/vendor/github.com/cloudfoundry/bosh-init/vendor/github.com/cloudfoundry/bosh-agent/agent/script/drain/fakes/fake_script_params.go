// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agent/script/drain"
)

type FakeScriptParams struct {
	JobChangeStub        func() (change string)
	jobChangeMutex       sync.RWMutex
	jobChangeArgsForCall []struct{}
	jobChangeReturns     struct {
		result1 string
	}
	HashChangeStub        func() (change string)
	hashChangeMutex       sync.RWMutex
	hashChangeArgsForCall []struct{}
	hashChangeReturns     struct {
		result1 string
	}
	UpdatedPackagesStub        func() (pkgs []string)
	updatedPackagesMutex       sync.RWMutex
	updatedPackagesArgsForCall []struct{}
	updatedPackagesReturns     struct {
		result1 []string
	}
	JobStateStub        func() (string, error)
	jobStateMutex       sync.RWMutex
	jobStateArgsForCall []struct{}
	jobStateReturns     struct {
		result1 string
		result2 error
	}
	JobNextStateStub        func() (string, error)
	jobNextStateMutex       sync.RWMutex
	jobNextStateArgsForCall []struct{}
	jobNextStateReturns     struct {
		result1 string
		result2 error
	}
	ToStatusParamsStub        func() drain.ScriptParams
	toStatusParamsMutex       sync.RWMutex
	toStatusParamsArgsForCall []struct{}
	toStatusParamsReturns     struct {
		result1 drain.ScriptParams
	}
}

func (fake *FakeScriptParams) JobChange() (change string) {
	fake.jobChangeMutex.Lock()
	fake.jobChangeArgsForCall = append(fake.jobChangeArgsForCall, struct{}{})
	fake.jobChangeMutex.Unlock()
	if fake.JobChangeStub != nil {
		return fake.JobChangeStub()
	} else {
		return fake.jobChangeReturns.result1
	}
}

func (fake *FakeScriptParams) JobChangeCallCount() int {
	fake.jobChangeMutex.RLock()
	defer fake.jobChangeMutex.RUnlock()
	return len(fake.jobChangeArgsForCall)
}

func (fake *FakeScriptParams) JobChangeReturns(result1 string) {
	fake.JobChangeStub = nil
	fake.jobChangeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeScriptParams) HashChange() (change string) {
	fake.hashChangeMutex.Lock()
	fake.hashChangeArgsForCall = append(fake.hashChangeArgsForCall, struct{}{})
	fake.hashChangeMutex.Unlock()
	if fake.HashChangeStub != nil {
		return fake.HashChangeStub()
	} else {
		return fake.hashChangeReturns.result1
	}
}

func (fake *FakeScriptParams) HashChangeCallCount() int {
	fake.hashChangeMutex.RLock()
	defer fake.hashChangeMutex.RUnlock()
	return len(fake.hashChangeArgsForCall)
}

func (fake *FakeScriptParams) HashChangeReturns(result1 string) {
	fake.HashChangeStub = nil
	fake.hashChangeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeScriptParams) UpdatedPackages() (pkgs []string) {
	fake.updatedPackagesMutex.Lock()
	fake.updatedPackagesArgsForCall = append(fake.updatedPackagesArgsForCall, struct{}{})
	fake.updatedPackagesMutex.Unlock()
	if fake.UpdatedPackagesStub != nil {
		return fake.UpdatedPackagesStub()
	} else {
		return fake.updatedPackagesReturns.result1
	}
}

func (fake *FakeScriptParams) UpdatedPackagesCallCount() int {
	fake.updatedPackagesMutex.RLock()
	defer fake.updatedPackagesMutex.RUnlock()
	return len(fake.updatedPackagesArgsForCall)
}

func (fake *FakeScriptParams) UpdatedPackagesReturns(result1 []string) {
	fake.UpdatedPackagesStub = nil
	fake.updatedPackagesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeScriptParams) JobState() (string, error) {
	fake.jobStateMutex.Lock()
	fake.jobStateArgsForCall = append(fake.jobStateArgsForCall, struct{}{})
	fake.jobStateMutex.Unlock()
	if fake.JobStateStub != nil {
		return fake.JobStateStub()
	} else {
		return fake.jobStateReturns.result1, fake.jobStateReturns.result2
	}
}

func (fake *FakeScriptParams) JobStateCallCount() int {
	fake.jobStateMutex.RLock()
	defer fake.jobStateMutex.RUnlock()
	return len(fake.jobStateArgsForCall)
}

func (fake *FakeScriptParams) JobStateReturns(result1 string, result2 error) {
	fake.JobStateStub = nil
	fake.jobStateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeScriptParams) JobNextState() (string, error) {
	fake.jobNextStateMutex.Lock()
	fake.jobNextStateArgsForCall = append(fake.jobNextStateArgsForCall, struct{}{})
	fake.jobNextStateMutex.Unlock()
	if fake.JobNextStateStub != nil {
		return fake.JobNextStateStub()
	} else {
		return fake.jobNextStateReturns.result1, fake.jobNextStateReturns.result2
	}
}

func (fake *FakeScriptParams) JobNextStateCallCount() int {
	fake.jobNextStateMutex.RLock()
	defer fake.jobNextStateMutex.RUnlock()
	return len(fake.jobNextStateArgsForCall)
}

func (fake *FakeScriptParams) JobNextStateReturns(result1 string, result2 error) {
	fake.JobNextStateStub = nil
	fake.jobNextStateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeScriptParams) ToStatusParams() drain.ScriptParams {
	fake.toStatusParamsMutex.Lock()
	fake.toStatusParamsArgsForCall = append(fake.toStatusParamsArgsForCall, struct{}{})
	fake.toStatusParamsMutex.Unlock()
	if fake.ToStatusParamsStub != nil {
		return fake.ToStatusParamsStub()
	} else {
		return fake.toStatusParamsReturns.result1
	}
}

func (fake *FakeScriptParams) ToStatusParamsCallCount() int {
	fake.toStatusParamsMutex.RLock()
	defer fake.toStatusParamsMutex.RUnlock()
	return len(fake.toStatusParamsArgsForCall)
}

func (fake *FakeScriptParams) ToStatusParamsReturns(result1 drain.ScriptParams) {
	fake.ToStatusParamsStub = nil
	fake.toStatusParamsReturns = struct {
		result1 drain.ScriptParams
	}{result1}
}

var _ drain.ScriptParams = new(FakeScriptParams)
