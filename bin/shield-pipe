#!/bin/bash

# shield-pipe - Command Pipelining for Shield Plugins
#
# This script inspects its environments and then orchestrates two
# processes (the store and target plugins) in the correct order,
# with the correct arguments.
#
# Environment Variables
# ---------------------
#
#   SHIELD_OP                 Operation: either 'backup' or 'restore'
#   SHIELD_TARGET_PLUGIN      Path to the target plugin to use
#   SHIELD_TARGET_ENDPOINT    The target endpoint config (probably JSON)
#   SHIELD_STORE_PLUGIN       Path to the store plugin to use
#   SHIELD_STORE_ENDPOINT     The store endpoint config (probably JSON)
#   SHIELD_RESTORE_KEY        Archive key for 'restore' operations
#   SHIELD_ENCRYPT_TYPE       Cipher and mode to be used for archive encryption
#   SHIELD_ENCRYPT_KEY        Encryption key for archive encryption
#   SHIELD_ENCRYPT_IV         Initialization vector for archive encryption
#
# Exit Codes
# ----------
#
#      0    Success
#    144    Missing a required environment variable
#    145    Invalid $SHIELD_OP (not 'backup' or 'restore')
#
# Justification
# -------------
#
# This script exists because the Go runtime is unable to handle the
# complicated pipe/exec scenario Shield requires, due to a bug in the
# runtime and/or standard library
#
# See https://github.com/golang/go/issues/9307
#     https://github.com/golang/go/issues/9382
#     https://code.google.com/p/go/issues/detail?id=2266
#

#SHIELD_ENCRYPT_TYPE='aes-256-cbc'
#SHIELD_ENCRYPT_KEY='C5BD682F6456E4EF4B2BE75CAF41C704B7CE7EAB46319C07'
#SHIELD_ENCRYPT_IV='8E19230033C9D294EA06B6732116D4D9'


header() {
	echo >&2 $*
	echo $* | sed -e 's/./=/g' >&2
}

say() {
	echo >&2 "$@"
}

ok() {
	echo >&2 "OK"
	echo >&2
}

fail() {
	echo -n >&2 "FAILED: "
	echo    >&2 $*
}

exiting() {
	echo >&2
	echo >&2 "EXITING ${1}"
	exit $1
}

validate() {
	local type="${1}"
	local bin="${2}"
	local cfg="${3}"
	header "Validating ${type} plugin \`$(basename ${bin})\`..."
	${bin} validate -e "${cfg}" >&2
	ok
}

needenv() {
	header "Validating environment..."
	for var in "$@"; do
		eval v=\$$var
		if [[ -z ${v} ]]; then
			fail "Missing required $var environment variable; bailing out"
			exit 144
		fi

		say "${var} ... found"
	done
	ok
}

trap 'exiting $?' EXIT

case ${SHIELD_OP} in
(status)
	needenv SHIELD_OP \
	        SHIELD_AGENT_NAME \
	        SHIELD_PLUGINS_PATH

	if [[ -z "${SHIELD_AGENT_VERSION:-}" ]]; then
		SHIELD_AGENT_VERSION="dev"
	fi

	set -e
	header "Running SHIELD Agent ($SHIELD_AGENT_VERSION) Health Checks"

	echo "{"
	# METADATA
	cat <<EOF
"name"    : "${SHIELD_AGENT_NAME}",
"version" : "${SHIELD_AGENT_VERSION}",
"health"  : "ok",
EOF

	# PLUGIN inventory
	(IFS=:; for x in $SHIELD_PLUGINS_PATH; do
	   say "checking for plugins in $x..."
	   echo "\"plugins\": {"
	   comma=""
	   while IFS= read -r -d '' plugin; do
	     name=${plugin##*/}
	     set +e ; output=$($plugin info 2>/dev/null) ; set -e
	     if [[ $? -eq 0 ]]; then
	       echo "$comma\"$name\":$output"
	       comma=","
	     fi
	   done < <(find $x -maxdepth 1 -type f -perm +111 -print0)
	   echo "}"
	 done)
	echo "}"

	exit 0
	;;

(test-store)
	needenv SHIELD_OP              \
	        SHIELD_STORE_PLUGIN    \
	        SHIELD_STORE_ENDPOINT

	set -e
	validate STORE  ${SHIELD_STORE_PLUGIN}  "${SHIELD_STORE_ENDPOINT}"

	header "Performing store / retrieve / purge test"
	say "generating an input bit pattern"
	input=$(echo -n "test::"; dd if=/dev/urandom 2>/dev/null bs=25 count=1 | base64 -w0)
	if [[ -z "${input}" ]]; then
		fail "input bit pattern was empty; this test is INVALID."
		exit 1
	fi

	key=$(echo "${input}" | ${SHIELD_STORE_PLUGIN} store --text -e "${SHIELD_STORE_ENDPOINT}" || true)
	if [[ -z "${key}" ]]; then
		fail "unable to write to storage"
		exit 2
	fi

	output=$(${SHIELD_STORE_PLUGIN} retrieve -e "${SHIELD_STORE_ENDPOINT}" -k "${key}"        || true)
	${SHIELD_STORE_PLUGIN} purge -e "${SHIELD_STORE_ENDPOINT}" -k "${key}" || true

	say "INPUT:  ${input}"
	say "OUTPUT: ${output}"
	say "KEY:    ${key}"
	say

	if [[ -z "${output}" ]]; then
		fail "unable to read from storage"
		exit 2
	fi

	if [[ "${input}" != "${output}" ]]; then
		fail "output bit pattern did not match the input pattern"
		exit 3
	fi

	ok
	exit 0
	;;

(backup)
	needenv SHIELD_OP              \
	        SHIELD_STORE_PLUGIN    \
	        SHIELD_STORE_ENDPOINT  \
	        SHIELD_TARGET_PLUGIN   \
	        SHIELD_TARGET_ENDPOINT

	set -e
	validate TARGET ${SHIELD_TARGET_PLUGIN} "${SHIELD_TARGET_ENDPOINT}"
	validate STORE  ${SHIELD_STORE_PLUGIN}  "${SHIELD_STORE_ENDPOINT}"

	header "Running backup task (using bzip2 compression)"

	PULSE=$(mktemp -t shield-pipe.XXXXX)
	trap "rm -f ${PULSE}" QUIT TERM INT

	set -o pipefail
	${SHIELD_TARGET_PLUGIN} backup -e "${SHIELD_TARGET_ENDPOINT}" | tee >(tail -c1 >$PULSE) | bzip2 | \
		openssl enc -${SHIELD_ENCRYPT_TYPE} -a -e -K ${SHIELD_ENCRYPT_KEY} -iv ${SHIELD_ENCRYPT_IV} | \
		${SHIELD_STORE_PLUGIN} store -e "${SHIELD_STORE_ENDPOINT}"

	if [[ ! -s ${PULSE} ]]; then
		rm -f ${PULSE}
		echo >&2 "NO DATA RECEIVED FROM BACKUP PLUGIN"
		exit 1
	fi
	rm -f ${PULSE}

	exit 0
	;;

(restore)
	needenv SHIELD_OP               \
	        SHIELD_STORE_PLUGIN     \
	        SHIELD_STORE_ENDPOINT   \
	        SHIELD_TARGET_PLUGIN    \
	        SHIELD_TARGET_ENDPOINT  \
	        SHIELD_RESTORE_KEY

	set -e
	validate TARGET ${SHIELD_TARGET_PLUGIN} "${SHIELD_TARGET_ENDPOINT}"
	validate STORE  ${SHIELD_STORE_PLUGIN}  "${SHIELD_STORE_ENDPOINT}"

	header "Running restore task (using bzip2 compression)"
	set -o pipefail
	${SHIELD_STORE_PLUGIN} retrieve -k "${SHIELD_RESTORE_KEY}" -e "${SHIELD_STORE_ENDPOINT}" | \
		openssl enc -${SHIELD_ENCRYPT_TYPE} -a -d -K ${SHIELD_ENCRYPT_KEY} -iv ${SHIELD_ENCRYPT_IV} | \
		bunzip2 | ${SHIELD_TARGET_PLUGIN} restore -e "${SHIELD_TARGET_ENDPOINT}"
	exit 0
	;;

(purge)
	needenv SHIELD_OP               \
	        SHIELD_STORE_PLUGIN     \
	        SHIELD_STORE_ENDPOINT   \
	        SHIELD_RESTORE_KEY

	set -e
	validate STORE  ${SHIELD_STORE_PLUGIN}  "${SHIELD_STORE_ENDPOINT}"

	header "Running purge task"
	${SHIELD_STORE_PLUGIN} purge -e "${SHIELD_STORE_ENDPOINT}" -k "${SHIELD_RESTORE_KEY}"
	exit 0
	;;

(*)
	echo >&2 "Invalid SHIELD_OP '${SHIELD_OP}'; bailing out"
	exit 145
esac
