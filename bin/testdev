#!/bin/bash
export PATH=$(pwd):$(pwd)/bin:${PATH}
export VAULT_SKIP_VERIFY=1
workdir=""
ADDR=127.0.0.1:8181

setup_workdir() {
  workdir=$(mktemp -d /tmp/shield.testdev.XXXXXXX)
  storedir=$(mktemp -d /tmp/shield.testdev.storeXXXXXXX)
  trap "rm -rf ${workdir} ${storedir}" EXIT QUIT INT TERM

  mkdir ${workdir}/etc
  mkdir ${workdir}/var
}

# If a work directory is not supplied as a parameter,
# create one.
if [ $# -lt 2 ]; then
    setup_workdir
else
    workdir="${2}"
fi

# set up a dedicated directory just for plugins
mkdir -p ${workdir}/bin
for x in $(find plugin -maxdepth 1 -type d); do
  bin=${x##*/}
  if [[ -f $bin && -x $bin ]]; then
    cp $bin ${workdir}/bin/$bin
  fi
done

export DATABASE=${DATABASE:-$workdir/var/shield.db}
export SHIELD_API_TOKEN=LETMEIN

case "${1}" in
(vault)
  mkdir -p ${workdir}/var/vault
  cat >${workdir}/etc/vault.conf <<EOF
storage "file" {
  path = "${workdir}/var/vault"
}
disable_mlock = true
listener "tcp" {
  address = "127.0.0.1:8200"
  tls_disable = true
}
EOF
  while true; do
    echo ">> Spinning up a local (loopback) Vault"
    vault server -config ${workdir}/etc/vault.conf
    echo

    echo "vault exited."
    echo "Do you want to [r]estart it (sealed)"
    echo "or re-[i]nitialize it?"
    read -p "[r/i/N] " CONTINUE
    case "${CONTINUE}" in
    i*|I*) rm -rf ${workdir}/var/vault ;;
    r*|r*) ;;
    *) exit 0 ;;
    esac
  done
  ;;
(shieldd)
  ssh-keygen -t rsa -f ${workdir}/var/shieldd_key -N '' >/dev/null
  rm ${workdir}/var/shieldd_key.pub

  cat >${workdir}/etc/shieldd.conf <<EOF
---
listen_addr:   ${ADDR}
database:      ${DATABASE}
private_key:   ${workdir}/var/shieldd_key
workers:       3
max_timeout:   10
web_root:      ./web2/htdocs
slow_loop:     20
fast_loop:     2
vault_keyfile: ${workdir}/var/vault.crypt
auth:
  - name:       Github
    identifier: public-gh
    backend:    github
    properties:
      client_id:     7760ef75ba49c9699114
      client_secret: 9833e0d2f10df1c77eff41adfb07d6084b238349
      mapping:
        starkandwayne:           # <-- github org name
          tenant: starkandwayne  # <-- shield tenant name
          rights:
            - team: Owners       # <-- github team name
              role: admin        # <-- shield role name
            - team: Engineering  #   (first match wins)
              role: engineer
            - role: operator     # = (default match)
        cloudfoundry-community:
          tenant: CF Community
          rights:
            - role: engineer

  - name:       UAA
    identifier: uaa1
    backend:    uaa
    properties:
      client_id:       shield-dev
      client_secret:   s.h.i.e.l.d.
      uaa_endpoint:    https://uaa.shield.10.244.156.2.netip.cc:8443
      skip_verify_tls: true
      mapping:
        - tenant: UAA          # <-- shield tenant name
          rights:
            - scim: uaa.admin  # <-- uaa scim right
              role: admin      # <-- shield role
                               #   (first match wins)
            - scim: cloud_controller.write
              role: engineer

            - role: operator   # = (default match)

        - tenant: UAA Admins Club
          rights:
            - scim: uaa.admin
              role: admin

EOF

  echo ">> Setting up SHIELD schema"
  ./shield-schema -d "${DATABASE}"
  echo

  echo ">> RUNNING SHIELDD"
  ./shieldd -c ${workdir}/etc/shieldd.conf --log-level debug
  echo
  echo "shieldd exited."
  echo "Press enter to close this session."
  read JUNK
  ;;
(shieldagent)
  shield_up="1"
  while [ $shield_up -eq 1 ]; do
      sleep 1
      shield_up=`nc -z 127.0.0.1 8181; echo $?`
  done

  ssh-keygen -t rsa -f ${workdir}/var/shield-agent_key -N '' >/dev/null
  rm ${workdir}/var/shield-agent_key.pub

  `curl -XGET -H "X-Shield-Token: ${SHIELD_API_TOKEN}" http://127.0.0.1:8181/v1/meta/pubkey >> ${workdir}/var/authorized_keys`
  cat >${workdir}/etc/shield-agent.conf <<EOF
---
authorized_keys_file: ${workdir}/var/authorized_keys
host_key_file: ${workdir}/var/shield-agent_key
listen_address: 0.0.0.0:5444
plugin_paths:
  - ${workdir}/bin

name: bond-james-bond
registration:
  url: http://localhost:8181
  interval: 15
EOF

  echo ">> RUNNING SHIELD AGENT"
  ./shield-agent -c ${workdir}/etc/shield-agent.conf --log-level debug
  echo
  echo "shield-agent exited."
  echo "Press enter to close this session."
  read JUNK
  ;;
("")
  tmux new-session \; set-option update-environment ' SHIELD_API' \; \
       new-window -n vault ./bin/testdev vault ${workdir} \; \
       new-window -n daemon ./bin/testdev shieldd ${workdir} \; \
       new-window -n agent ./bin/testdev shieldagent ${workdir} \; \
       new-window -n dev-setup "sleep 5 && ./bin/dev-setup ${workdir} ${storedir} ${SHIELD_ENV}; read JUNK" \; \
       new-window -n db sqlite3 ${workdir}/var/shield.db \;
  ;;

(*)
  echo >&2 "USAGE: $0 [ACTION]"
  echo >&2 ""
  echo >&2 "Run components of a test/dev shield setup, on http://${ADDR}"
  echo >&2 ""
  echo >&2 "Actions:"
  echo >&2 "  shieldd     Run SHIELD core daemon"
esac

# vim:ft=bash
