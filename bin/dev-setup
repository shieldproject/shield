#!/bin/bash
set -e

cd "$(dirname "${BASH_SOURCE[0]}")"

#if no cli, make cli
if [[ ! -f "../shield" ]]
then
  pushd .. && make shield-cli
  popd
fi
# if no umc, make umc
if [[ ! -f "../shield-umc" ]]; then
  (cd ..; go build ./cmd/shield-umc)
fi

shieldbackend="http://localhost:8181"
shield="../shield -k --raw -D"
jq="jq -Mr"
targetdir=$1
storedir=$2
environment=$3

echo "waiting for shield to spin up..."
shield_up="1"
while [ $shield_up -eq 1 ]; do
  sleep 1
  shield_up=`nc -z 127.0.0.1 8181; echo $?`
done

echo targetdir=$targetdir
echo storedir=$storedir

$shield create-backend localdev $shieldbackend
echo "backend created"

echo "Initializing this dev SHIELD core"
echo "master-password-yo" | $shield init
echo "master-password-yo" | $shield unlock

webui() {
s3_store=$($shield create-store <<EOF | $jq .uuid
{
  "endpoint" : "{\"base_dir\":\"${storedir}\",\"bsdtar\":\"bsdtar\"}",
  "name"     : "S3",
  "plugin"   : "fs",
  "summary"  : "A fake S3 store for pretending and web UI development."
}
EOF )
if [[ "$s3_store" = "null" ]]; then
  echo >&2 "Failed to create the S3 store"
  exit 1
fi
echo "s3_store=$s3_store"

scality_store=$($shield create-store <<EOF | $jq .uuid
{
  "endpoint" : "{\"base_dir\":\"${storedir}\",\"bsdtar\":\"bsdtar\"}",
  "name"     : "Scality (On-Prem)",
  "plugin"   : "fs",
  "summary"  : "A fake Scality (On-Premise) store for pretending and web UI development."
}
EOF )
if [[ "$scality_store" = "null" ]]; then
  echo >&2 "Failed to create the Scality store"
  exit 1
fi
echo "scality_store=$scalitry_store"


short_policy=$($shield create-policy <<EOF | $jq .uuid
{
  "name"    : "Short-Term",
  "summary" : "For frequent backups, only kept for a few days at most.",
  "expires" : 86400
}
EOF )
if [[ "$short_policy" = "null" ]]; then
  echo >&2 "Failed to create the Short-Term retention policy"
  exit 1
fi
echo "short_policy=$short_policy"

long_policy=$($shield create-policy <<EOF | $jq .uuid
{
  "name"    : "Long-Term",
  "summary" : "For infrequent backups, to be kept for at least two weeks.",
  "expires" : 1209600
}
EOF )
if [[ "$long_policy" = "null" ]]; then
  echo >&2 "Failed to create the Long-Term retention policy"
  exit 1
fi
echo "long_policy=$long_policy"


for i in $(seq 1 5); do
	target=$($shield create-target <<EOF | $jq .uuid
{
  "agent"    : "127.0.0.1:5444",
  "endpoint" : "{\"base_dir\":\"${targetdir}\",\"bsdtar\":\"bsdtar\",\"exclude\":\"var/*.db\"}",
  "name"     : "System #427/a0$i",
  "plugin"   : "fs",
  "summary"  : "A test system for generating lots of web UI output and pushing the limits of the new UI."
}
EOF )
	if [[ "$target" = "null" ]]; then
	  echo >&2 "Failed to create the #$i'th target"
	  exit 1
	fi
	echo "target=$target"

	store="$s3_store"
	policy=$long_policy

	if [[ $i -eq 3 ]]; then
		store="$scality_store"
	fi

	if [[ $i -gt 3 ]]; then
		store=""
	fi

	if [[ -n "${store}" ]]; then
	$shield create-job <<EOF
{
  "name"      : "Weekly",
  "paused"    : true,
  "retention" : "$policy",
  "schedule"  : "sundays at 2:30am",
  "store"     : "$store",
  "summary"   : "",
  "target"    : "$target"
}
EOF
	fi

	store="$scality_store"
	policy="$short_policy"
	$shield create-job <<EOF
{
  "name"      : "Daily",
  "paused"    : true,
  "retention" : "$policy",
  "schedule"  : "daily 4am",
  "store"     : "$store",
  "summary"   : "",
  "target"    : "$target"
}
EOF
	done

	echo "FINISHED SETTING UP FOR WEB UI DEVELOPMENT"
}

slim() {
target=$($shield create-target <<EOF | $jq .uuid
{
  "agent"    : "127.0.0.1:5444",
  "endpoint" : "{\"base_dir\":\"${targetdir}\",\"bsdtar\":\"bsdtar\",\"exclude\":\"var/*.db\"}",
  "name"     : "DevTarget",
  "plugin"   : "fs",
  "summary"  : "The working directory of the dev environment."
}
EOF )
if [[ "$target" = "null" ]]; then
  echo >&2 "Failed to create the DevTarget target"
  exit 1
fi
echo "target=$target"

store=$($shield create-store <<EOF | $jq .uuid
{
  "endpoint" : "{\"base_dir\":\"${storedir}\",\"bsdtar\":\"bsdtar\"}",
  "name"     : "DevStore",
  "plugin"   : "fs",
  "summary"  : "A temporary store for the dev environment."
}
EOF )
if [[ "$store" = "null" ]]; then
  echo >&2 "Failed to create the DevStore store"
  exit 1
fi
echo "store=$store"

policy=$($shield create-policy <<EOF | $jq .uuid
{
  "name"    : "DevPolicy",
  "summary" : "A Test Policy",
  "expires" : 86400
}
EOF )
if [[ "$policy" = "null" ]]; then
  echo >&2 "Failed to create the DevPolicy retention policy"
  exit 1
fi
echo "target=$target"
echo "policy=$policy"

$shield create-job <<EOF
{
  "name"      : "DevJob",
  "paused"    : true,
  "retention" : "$policy",
  "schedule"  : "daily 4am",
  "store"     : "$store",
  "summary"   : "A Test Job",
  "target"    : "$target"
}
EOF

# set up administrative user
umc="../shield-umc --database $targetdir/var/shield.db"
echo "creating local admin user (admin:admin)"
$umc new-user --username admin --password admin
$umc invite admin --system --role admin

# set up local test environment
echo "creating developer tenant 'Acme, Inc'"
$umc new-tenant --name 'Acme, Inc.'
echo "creating local developer user (dev:coyote)"
$umc new-user --username dev --password coyote
$umc invite dev --tenant 'Acme, Inc.' --role engineer

echo "running some jobs"
$shield run DevJob
sleep 2
$shield run DevJob
$shield edit-target DevTarget<<EOF
{
 "agent"    : "127.0.0.1:5444",
 "endpoint" : "{\"base_dir\":\"/e/no/ent\",\"bsdtar\":\"bsdtar\"}",
 "name"     : "DevTarget",
 "plugin"   : "fs",
 "summary"  : "The working directory of the dev environment."
}
EOF
sleep 3
$shield run DevJob
sleep 3
$shield run DevJob


echo "FINISHED SETTING UP FOR SHIELD DEVELOPMENT"
}


case ${environment} in
ui) webui ;;
*)  slim  ;;
esac
echo "DONE"
