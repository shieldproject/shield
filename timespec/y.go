// Code generated by goyacc - DO NOT EDIT.

package timespec

import __yyfmt__ "fmt"

import (
	"time"
)

type yySymType struct {
	yys    int
	numval uint
	time   int
	wday   time.Weekday
	spec   *Spec
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57371
	yyEofCode = 57344
	AFTER     = 57362
	AM        = 57355
	AT        = 57353
	DAILY     = 57349
	DAY       = 57359
	EVERY     = 57358
	FRIDAY    = 57369
	FROM      = 57352
	HALF      = 57357
	HOUR      = 57360
	HOURLY    = 57348
	MONDAY    = 57365
	MONTHLY   = 57351
	NUMBER    = 57346
	ON        = 57354
	ORDINAL   = 57347
	PM        = 57356
	QUARTER   = 57361
	SATURDAY  = 57370
	SUNDAY    = 57364
	THURSDAY  = 57368
	TIL       = 57363
	TUESDAY   = 57366
	WEDNESDAY = 57367
	WEEKLY    = 57350
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -58
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57344: 0,  // $end (49x)
		57346: 1,  // NUMBER (40x)
		57353: 2,  // AT (15x)
		58:    3,  // ':' (13x)
		57369: 4,  // FRIDAY (13x)
		57365: 5,  // MONDAY (13x)
		57370: 6,  // SATURDAY (13x)
		57364: 7,  // SUNDAY (13x)
		57368: 8,  // THURSDAY (13x)
		57381: 9,  // time_in_HHMM (13x)
		57366: 10, // TUESDAY (13x)
		57367: 11, // WEDNESDAY (13x)
		57347: 12, // ORDINAL (12x)
		57354: 13, // ON (11x)
		57357: 14, // HALF (7x)
		57361: 15, // QUARTER (7x)
		42:    16, // '*' (6x)
		104:   17, // 'h' (6x)
		72:    18, // 'H' (6x)
		120:   19, // 'x' (6x)
		88:    20, // 'X' (6x)
		57373: 21, // anyhour (6x)
		57375: 22, // day_name (6x)
		57377: 23, // minutes (6x)
		57382: 24, // time_in_MM (6x)
		57362: 25, // AFTER (4x)
		57355: 26, // AM (4x)
		57372: 27, // am_or_pm (4x)
		57360: 28, // HOUR (4x)
		57378: 29, // month_day (4x)
		57356: 30, // PM (4x)
		57363: 31, // TIL (4x)
		57352: 32, // FROM (3x)
		32:    33, // ' ' (2x)
		57349: 34, // DAILY (1x)
		57374: 35, // daily_spec (1x)
		57359: 36, // DAY (1x)
		57358: 37, // EVERY (1x)
		57348: 38, // HOURLY (1x)
		57376: 39, // hourly_spec (1x)
		57351: 40, // MONTHLY (1x)
		57379: 41, // monthly_spec (1x)
		57380: 42, // spec (1x)
		57383: 43, // timespec (1x)
		57350: 44, // WEEKLY (1x)
		57384: 45, // weekly_spec (1x)
		57371: 46, // $default (0x)
		57345: 47, // error (0x)
	}

	yySymNames = []string{
		"$end",
		"NUMBER",
		"AT",
		"':'",
		"FRIDAY",
		"MONDAY",
		"SATURDAY",
		"SUNDAY",
		"THURSDAY",
		"time_in_HHMM",
		"TUESDAY",
		"WEDNESDAY",
		"ORDINAL",
		"ON",
		"HALF",
		"QUARTER",
		"'*'",
		"'h'",
		"'H'",
		"'x'",
		"'X'",
		"anyhour",
		"day_name",
		"minutes",
		"time_in_MM",
		"AFTER",
		"AM",
		"am_or_pm",
		"HOUR",
		"month_day",
		"PM",
		"TIL",
		"FROM",
		"' '",
		"DAILY",
		"daily_spec",
		"DAY",
		"EVERY",
		"HOURLY",
		"hourly_spec",
		"MONTHLY",
		"monthly_spec",
		"spec",
		"timespec",
		"WEEKLY",
		"weekly_spec",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {43, 1},
		2:  {42, 1},
		3:  {42, 1},
		4:  {42, 1},
		5:  {42, 1},
		6:  {39, 3},
		7:  {39, 2},
		8:  {39, 5},
		9:  {39, 5},
		10: {39, 4},
		11: {39, 3},
		12: {39, 5},
		13: {35, 3},
		14: {35, 2},
		15: {35, 4},
		16: {35, 3},
		17: {21, 0},
		18: {21, 1},
		19: {21, 1},
		20: {21, 1},
		21: {21, 1},
		22: {21, 1},
		23: {23, 1},
		24: {23, 1},
		25: {23, 1},
		26: {24, 3},
		27: {24, 1},
		28: {24, 2},
		29: {24, 2},
		30: {9, 3},
		31: {9, 4},
		32: {9, 5},
		33: {9, 2},
		34: {9, 3},
		35: {45, 5},
		36: {45, 4},
		37: {45, 4},
		38: {45, 3},
		39: {45, 3},
		40: {45, 2},
		41: {27, 1},
		42: {27, 1},
		43: {22, 1},
		44: {22, 1},
		45: {22, 1},
		46: {22, 1},
		47: {22, 1},
		48: {22, 1},
		49: {22, 1},
		50: {41, 5},
		51: {41, 4},
		52: {41, 4},
		53: {41, 3},
		54: {41, 4},
		55: {41, 3},
		56: {29, 1},
		57: {29, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [99][]uint16{
		// 0
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 78, 22: 69, 34: 67, 62, 37: 66, 65, 61, 77, 64, 60, 59, 68, 63},
		{58},
		{57},
		{56},
		{55},
		// 5
		{54},
		{53},
		{1: 140, 154, 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 155},
		{1: 123, 14: 121, 120, 28: 122, 36: 124},
		{1: 80, 117, 9: 118},
		// 10
		{1: 80, 108, 9: 109},
		{1: 80, 105, 9: 106},
		{15, 15, 15},
		{14, 14, 14},
		{13, 13, 13},
		// 15
		{12, 12, 12},
		{11, 11, 11},
		{10, 10, 10},
		{9, 9, 9},
		{1: 80, 94, 9: 95},
		// 20
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 22: 79},
		{1: 80, 81, 9: 82},
		{3: 84, 26: 87, 85, 30: 88, 33: 86},
		{1: 80, 9: 83},
		{3},
		// 25
		{4},
		{1: 90},
		{25, 25, 4: 25, 25, 25, 25, 25, 10: 25, 25, 25, 25},
		{26: 87, 89, 30: 88},
		{17, 17, 4: 17, 17, 17, 17, 17, 10: 17, 17, 17, 17},
		// 30
		{16, 16, 4: 16, 16, 16, 16, 16, 10: 16, 16, 16, 16},
		{24, 24, 4: 24, 24, 24, 24, 24, 10: 24, 24, 24, 24},
		{28, 28, 4: 28, 28, 28, 28, 28, 10: 28, 28, 28, 28, 26: 87, 91, 30: 88, 33: 92},
		{27, 27, 4: 27, 27, 27, 27, 27, 10: 27, 27, 27, 27},
		{26: 87, 93, 30: 88},
		// 35
		{26, 26, 4: 26, 26, 26, 26, 26, 10: 26, 26, 26, 26},
		{1: 80, 9: 101},
		{1: 99, 12: 98, 96, 29: 97},
		{1: 99, 12: 98, 29: 100},
		{5},
		// 40
		{2},
		{1},
		{7},
		{1: 99, 12: 98, 102, 29: 103},
		{1: 99, 12: 98, 29: 104},
		// 45
		{6},
		{8},
		{1: 80, 9: 107},
		{18},
		{19},
		// 50
		{1: 80, 9: 113},
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 13: 110, 22: 111},
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 22: 112},
		{20},
		{22},
		// 55
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 13: 114, 22: 115},
		{4: 75, 71, 76, 70, 74, 10: 72, 73, 22: 116},
		{21},
		{23},
		{1: 80, 9: 119},
		// 60
		{44},
		{45},
		{28: 151},
		{28: 148},
		{1: 140, 131, 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 132},
		// 65
		{28: 128},
		{1: 80, 125, 9: 126},
		{1: 80, 9: 127},
		{42},
		{43},
		// 70
		{32: 129},
		{1: 80, 9: 130},
		{46},
		{1: 140, 3: 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 147},
		{47},
		// 75
		{3: 40},
		{3: 39},
		{3: 38},
		{3: 37},
		{3: 36},
		// 80
		{25: 35, 31: 35},
		{25: 34, 31: 34},
		{31, 25: 33, 31: 33},
		{3: 145},
		{25: 143, 31: 144},
		// 85
		{30},
		{29},
		{1: 146},
		{32},
		{48},
		// 90
		{32: 149},
		{1: 140, 3: 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 150},
		{49},
		{32: 152},
		{1: 140, 3: 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 153},
		// 95
		{50},
		{1: 140, 3: 41, 14: 139, 138, 137, 133, 134, 135, 136, 141, 23: 142, 156},
		{51},
		{52},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("'%c'", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 47

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*yyLex).spec = yyS[yypt-0].spec
		}
	case 6:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0)
		}
	case 7:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0)
		}
	case 8:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0.25)
		}
	case 9:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0.5)
		}
	case 10:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0)
		}
	case 11:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, 0)
		}
	case 12:
		{
			yyVAL.spec = hourly(yyS[yypt-0].time, float32(yyS[yypt-3].numval))
		}
	case 13:
		{
			yyVAL.spec = daily(yyS[yypt-0].time)
		}
	case 14:
		{
			yyVAL.spec = daily(yyS[yypt-0].time)
		}
	case 15:
		{
			yyVAL.spec = daily(yyS[yypt-0].time)
		}
	case 16:
		{
			yyVAL.spec = daily(yyS[yypt-0].time)
		}
	case 23:
		{
			yyVAL.numval = 15
		}
	case 24:
		{
			yyVAL.numval = 30
		}
	case 25:
		{
			yyVAL.numval = yyS[yypt-0].numval
		}
	case 26:
		{
			yyVAL.time = hhmm(0, yyS[yypt-0].numval)
		}
	case 27:
		{
			yyVAL.time = hhmm(0, yyS[yypt-0].numval)
		}
	case 28:
		{
			yyVAL.time = hhmm(0, yyS[yypt-1].numval)
		}
	case 29:
		{
			yyVAL.time = hhmm(0, 60-yyS[yypt-1].numval)
		}
	case 30:
		{
			yyVAL.time = hhmm(yyS[yypt-2].numval, yyS[yypt-0].numval)
		}
	case 31:
		{
			yyVAL.time = hhmm(yyS[yypt-3].numval+yyS[yypt-0].numval, yyS[yypt-1].numval)
		}
	case 32:
		{
			yyVAL.time = hhmm(yyS[yypt-4].numval+yyS[yypt-0].numval, yyS[yypt-2].numval)
		}
	case 33:
		{
			yyVAL.time = hhmm(yyS[yypt-1].numval+yyS[yypt-0].numval, 0)
		}
	case 34:
		{
			yyVAL.time = hhmm(yyS[yypt-2].numval+yyS[yypt-0].numval, 0)
		}
	case 35:
		{
			yyVAL.spec = weekly(yyS[yypt-2].time, yyS[yypt-0].wday)
		}
	case 36:
		{
			yyVAL.spec = weekly(yyS[yypt-2].time, yyS[yypt-0].wday)
		}
	case 37:
		{
			yyVAL.spec = weekly(yyS[yypt-1].time, yyS[yypt-0].wday)
		}
	case 38:
		{
			yyVAL.spec = weekly(yyS[yypt-1].time, yyS[yypt-0].wday)
		}
	case 39:
		{
			yyVAL.spec = weekly(yyS[yypt-0].time, yyS[yypt-2].wday)
		}
	case 40:
		{
			yyVAL.spec = weekly(yyS[yypt-0].time, yyS[yypt-1].wday)
		}
	case 41:
		{
			yyVAL.numval = 0
		}
	case 42:
		{
			yyVAL.numval = 12
		}
	case 43:
		{
			yyVAL.wday = time.Sunday
		}
	case 44:
		{
			yyVAL.wday = time.Monday
		}
	case 45:
		{
			yyVAL.wday = time.Tuesday
		}
	case 46:
		{
			yyVAL.wday = time.Wednesday
		}
	case 47:
		{
			yyVAL.wday = time.Thursday
		}
	case 48:
		{
			yyVAL.wday = time.Friday
		}
	case 49:
		{
			yyVAL.wday = time.Saturday
		}
	case 50:
		{
			yyVAL.spec = mday(yyS[yypt-2].time, yyS[yypt-0].numval)
		}
	case 51:
		{
			yyVAL.spec = mday(yyS[yypt-2].time, yyS[yypt-0].numval)
		}
	case 52:
		{
			yyVAL.spec = mday(yyS[yypt-1].time, yyS[yypt-0].numval)
		}
	case 53:
		{
			yyVAL.spec = mday(yyS[yypt-1].time, yyS[yypt-0].numval)
		}
	case 54:
		{
			yyVAL.spec = mweek(yyS[yypt-0].time, yyS[yypt-2].wday, yyS[yypt-3].numval)
		}
	case 55:
		{
			yyVAL.spec = mweek(yyS[yypt-0].time, yyS[yypt-1].wday, yyS[yypt-2].numval)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
