global:
  errors:
    none: &none []
    internal: &internal |
      an internal error occurred and should be investigated by the
      site administrators
    e401: &e401
      message: Authorization required
      summary: |
        The request was made without an authenticated session or auth token.
        See **Authentication** for more details.  The request may be retried
        after authentication.
    e403: &e403
      message: Access denied
      summary: |
        The requester lacks sufficient tenant or system role assignment.
        Refer to the **Access Control** subsection, above.
        The request should not be retried.

intro: |
  # SHIELD v2 API

  This document specifies the behavior of the SHIELD API, version 2,
  in its entirety.  This is a specification, not merely
  documentation &mdash; it is the authoritative source.  If this
  document is unclear, it will be amended.  If the SHIELD codebase
  disagrees with this specification, the code is incorrect and
  should be treated as such.

  The purpose of this document is to allow 3rd party integrators to
  inter-operate with the SHIELD API without resorting to spelunking
  through its implementation.

  ## Error Handling

  The SHIELD API returns errors by using non-200 HTTP status codes,
  as follows:

    - **500** - An internal error has occurred; details will be
      present in the SHIELD Core server error log.  The response
      will contain a sanitized error message, using the standard
      format (described below).

    - **400** - Something about the HTTP request was invalid or
      incorrect.  This may occur if a JSON payload was expected,
      but not provided, required keys in theat payload were missing,
      or values supplied were incorrect, out-of-range, etc.

    - **404** - The requested resource was not found.  An error
      (in the standard format) will be returned.

    - **401** - The requester is not authenticated to the SHIELD
      API, but has requested a protected endpoint.  The request
      may be retried after authenticating.

    - **403** - The requester is authenticated but has requested
      an endpoint that they do lack the rights to access.  This
      request should not be retried.

  Regardless of the HTTP status code used, the SHIELD API will
  always include a JSON payload with more details, in either the
  **Standard Format** or the **Missing Values Format**.

  ### Standard Format for Error Reporting

  The **Standard Format** for error reporting consists of a
  top-level JSON object containing a single key, `error`, that
  contains a human-readable error message, suitable for display.

  Example:

  ```json
  {
    "error": "No such retention policy"
  }
  ```

  This format is used for all non-validation error reporting.

  ### Missing Values Format for Error Reporting

  The **Missing Values Format** for error reporting is used for
  reporting request validation errors where required fields in the
  request payload are missing.  It consists of a top-level JSON
  object containing a single key, `missing`, which is set to a list
  of field names that must be sent in the request, but were not.

  Example:

  ```json
  {
    "missing": [
      "name",
      "endpoint",
      "agent"
    ]
  }
  ```

  The order of the fields is inconsequential.

sections:
  - name: Health & Informational
    intro: |
      The health and informational endpoints give you a glimpse into the
      well-being of a SHIELD Core, for monitoring purposes, at various
      levels of detail.

    endpoints:
      - name: GET /v2/info # {{{
        intro: |
          Returns minimal information necessary for forward-compatibility
          with different versions of SHIELD Core and clients.
        access: ~

        response:
          json: |
            {
              "version" : "6.7.2",
              "env"     : "PRODUCTION",
              "api"     : 2
            }
          summary: |
            {{JSON}}

            The `version` key only shows up if the request was made in the
            context of an authenticated session.

            The `env` key is configurable by the SHIELD site administrator,
            at deployment / boot time.

            The `api` key is a single integer that identifies which version
            of the SHIELD API this core implements.  Currently, there are
            two possible values:

              - **2** - The `/v2` endpoints are present, but not `/v1`
              - **1** - Only the `/v1` endpoints are present (legacy).

        errors: *none


      # }}}
      - name: GET /v2/health # {{{
        intro: |
          Returns health information about the SHIELD Core, connected
          storage accounts, and general metrics, at a global scope.
        access: ~

        response:
          summary: |
            If all goes well, you will receive a 200 OK, with a `Content-Type`
            of `application/json`, and something similar to the following JSON
            payload in the response body:

            {{JSON}}

          json: |
            {
              "shield": {
                "version" : "6.7.2",
                "ip"      : "10.0.0.5",
                "fqdn"    : "shield.example.com",
                "env"     : "PRODUCTION",
                "color"   : "",
                "motd"    : "Welcome to S.H.I.E.L.D."
              },
              "health": {
                "core"       : "unsealed",
                "storage_ok" : true,
                "jobs_ok"    : true
              },
              "storage": [
                { "name": "s3", "healthy": true },
                { "name": "fs", "healthy": true } ],
              "jobs": [
                {
                  "uuid"    : "3dc875a4-042c-47a1-828c-1d927455c6c7",
                  "target"  : "BOSH DB",
                  "job"     : "daily",
                  "healthy" : true
                },
                {
                  "uuid"    : "d9a4547e-c1e7-4869-bb8d-4abb757b2f70",
                  "target"  : "BOSH DB",
                  "job"     : "weekly",
                  "healthy" : true
                }
              ],
              "stats": {
                "jobs"    : 8,
                "systems" : 7,
                "archives": 124,
                "storage" : 243567112,
                "daily"   : 12345000
              }
            }

        errors:
          - message: Unable to check SHIELD health
            summary: *internal


      # }}}
      - name: GET /v2/tenants/:tenant/health # {{{
        intro: |
          Returns health information about the SHIELD Core, connected
          storage accounts, and general metrics, restricted to the scope
          visible to a single tenant.
        access: ~

        response:
          summary: |
            If all goes well, you will receive a 200 OK, with a `Content-Type`
            of `application/json`, and something similar to the following JSON
            payload in the response body:

            {{JSON}}

          json: |
            {
              "shield": {
                "version" : "6.7.2",
                "ip"      : "10.0.0.5",
                "fqdn"    : "shield.example.com",
                "env"     : "PRODUCTION",
                "color"   : "",
                "motd"    : "Welcome to S.H.I.E.L.D."
              },
              "health": {
                "core"       : "unsealed",
                "storage_ok" : true,
                "jobs_ok"    : true
              },
              "storage": [
                { "name": "s3", "healthy": true },
                { "name": "fs", "healthy": true } ],
              "jobs": [
                {
                  "uuid"    : "3dc875a4-042c-47a1-828c-1d927455c6c7",
                  "target"  : "BOSH DB",
                  "job"     : "daily",
                  "healthy" : true
                },
                {
                  "uuid"    : "d9a4547e-c1e7-4869-bb8d-4abb757b2f70",
                  "target"  : "BOSH DB",
                  "job"     : "weekly",
                  "healthy" : true
                }
              ],
              "stats": {
                "jobs"    : 8,
                "systems" : 7,
                "archives": 124,
                "storage" : 243567112,
                "daily"   : 12345000
              }
            }

        errors:
          - message: Unable to check SHIELD health
            summary: *internal


      # }}}


  - name: SHIELD Authentication
    intro: |
      The Authentication endpoints allow clients to authenticate to a
      SHIELD Core, providing credentials to prove their identity and
      their authorization to perform other tasks inside of SHIELD.

    endpoints:
      - name: POST /v2/auth/login # {{{
        intro: |
          Authenticate against the SHIELD API as a local user, and retrieve
          a session ID that can be used for future, authenticated,
          interactions.
        access: ~

        request:
          json: |
            {
              "username": "your-username",
              "password": "your-password"
            }
          summary: |
            {{CURL}}

            **NOTE:** `password` is sent in cleartext, so SHIELD should aways be
            communicating over TLS (HTTPS).

            Both fields, `username`, and `password`, are required.

        response:
          json: |
            {
              "ok": "95cca9ea-d2e6-4966-b071-9df6856a0e55"
            }
          summary: |
            {{JSON}}

            The session ID (return under the `ok` key) should be passed on
            subsequent requests as proof of authentication.  This can be done
            by setting the `shield7` cookie to the session ID, or by setting
            the `X-Shield-Session` request header.

        errors:
          - message: Unable to log you in
            summary: *internal

          - message: Incorrect username or password
            summary: |
              The supplied credentials were incorrect; either the
              user doesn't exist, or the password was wrong.



      # }}}
      - name: GET /v2/auth/logout # {{{
        intro: |
          Destroy the current session and log the user out.
        access: ~

        response:
          json: |
            {
              "ok" : "Successfully logged out"
            }
          summary: |
            {{JSON}}

            **NOTE:** The same behavior is exhibited when an authenticated
            session successfully logs out, as is seen when an unauthenticated
            session attempts to log out.

        errors:
          - message: Unable to log you out
            summary: *internal



      # }}}
      - name: GET /v2/auth/id # {{{
        intro: |
          Retrieve identity and authorization information about the
          currently authenticated session.  If the requester has not
          authenticated, a suitable response will be returned.
        access: ~

        response:
          json: |
            {
              "user": {
                "name"    : "Your Full Name",
                "account" : "username",
                "backend" : "SHIELD",
                "sysrole" : ""
              },
              "tenants": [
                {
                  "uuid": "63a8f402-31e6-4503-8fab-66cbcf411ed3",
                  "name": "Some Random Tenant",
                  "role": "admin"
                },
                {
                  "uuid": "860f7685-c311-4ae5-b34d-6991fc721a37",
                  "name": "Another Tenant",
                  "role": "engineer"
                }
              ],
              "tenant": {
                "uuid": "63a8f402-31e6-4503-8fab-66cbcf411ed3",
                "name": "Some Random Tenant",
                "role": "admin"
              }
            }
          summary: |
            {{JSON}}

            The top-level `user` key contains information about the current
            authenticated user, including their name and what authentication
            provider they came from.

            The `tenants` key lists _all_ of the tenants that this user
            belongs to, along with the role assigned on each.  The session is
            free to switch between any of these tenants as they see fit.

            The `tenant` key contains the tenant definition for the currently
            selected tenant, based on user preferences.

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.


      # }}}

      - name: GET /v2/auth/providers # {{{
        intro: |
          Retrieve public configuration of SHIELD Authentication Providers,
          which can be used by client systems to initiate authentication
          against 3rd party systems like Github and Cloud Foundry UAA.
        access: ~

        response:
          json: |
            [
              {
                "name"       : "Github(.com)",
                "identifier" : "gh",
                "type"       : "github",

                "web_entry"  : "/auth/gh/web",
                "cli_entry"  : "/auth/gh/cli",
                "redirect"   : "/auth/gh/redir"
              }
            ]

        errors: *none


      # }}}
      - name: GET /v2/auth/providers/:identifier # {{{
        intro: |
          Retrieve private configuration of a single SHIELD Authentication
          Providers, for use by SHIELD administrators.  This includes all of
          the information from the public endpoint, as well as private
          properties including things like client secrets.
        access: [system, admin]

        response:
          json: |
            {
              "name"       : "Github(.com)",
              "identifier" : "gh",
              "type"       : "github",

              "web_entry"  : "/auth/gh/web",
              "cli_entry"  : "/auth/gh/cli",
              "redirect"   : "/auth/gh/redir",

              "properties" : {
                "secret"   : "properties",
                "that"     : "are",
                "provider" : "specific"
              }
            }

        errors:
          - message: No such authentication provider
            summary: |
              No authentication provider was found with the given
              identifier.

      # }}}

      - name: GET /v2/auth/tokens # {{{
        intro: |
          Retrieve a list of all authentication tokens that have been
          generated for use on behalf of the currently authenticated
          user.  For security reasons, the session ID attached to the
          authentication token is not returned.
        access: any

        response:
          json: |
            [
              {
                "uuid"       : "bbcb6675-8ec4-4412-93e3-35626860b126",
                "name"       : "test",
                "created_at" : "2017-10-21 00:54:33",
                "last_seen"  : null
              }
            ]
          summary: |
            {{JSON}}

            The `uuid` key is used strictly for retrieving and revoking each
            authentication token; it cannot be used as an authentication token,
            as it is not the session ID.

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.

          - message: Unable to retrieve tokens information
            summary: *internal



      # }}}
      - name: POST /v2/auth/tokens # {{{
        intro: |
          Generate a new authentication token to act on behalf of the
          currently authenticated user.
        access: any

        request:
          json: |
            {
              "name": "auth-token-name"
            }
          summary: |
            {{CURL}}

            Each authentication token requires a name that is unique
            to the parent user account.

        response:
          json: |
            {
              "uuid"       : "bbcb6675-8ec4-4412-93e3-35626860b126",
              "session"    : "8ef409e9-690d-4d91-9f74-6d657f56843e",
              "name"       : "test",
              "created_at" : "2017-10-21 00:54:33",
              "last_seen"  : null
            }
          summary: |
            {{JSON}}

            The `uuid` key is used strictly for retrieving and revoking each
            authentication token; it cannot be used as an authentication token,
            as it is not the session ID.

            The `session` key should be used 

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.

          - message: Unable to retrieve tokens information
            summary: *internal
          
          - message: Unable to generate new token
            summary: *internal


      # }}}
      - name: DELETE /v2/auth/tokens/:uuid # {{{
        intro: |
          Revoke an authentication token that belongs to the currently
          authenticated user (even if its authenticated by the token being
          revoked).
        access: any

        response:
          json: |
            {
              "ok": "Token revoked"
            }
          summary: |
            {{JSON}}

            Note that if you have revoked the auth token you were using, all
            subsequent requests will fail to authenticated.  It makes sense,
            but it bears repeating.

        errors:
          - message: Unable to revoke auth token
            summary: *internal



      # }}}

      - name: GET /v2/auth/sessions # {{{
        intro: |
          Retrieve a list of all current login sessions
        access: [system, admin]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering sessions, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: is_token
              type: bool
              summary: |
                When filtering sessions, include those associated with tokens (default - false)
            - name: uuid
              type: uuid
              summary: |
                Only show the session that matches the given UUID.
                This is a FIXME - we probably need to remove this.
            - name: user_uuid
              type: uuid
              summary: |
                Only show sessions that matches the given user UUID.
            - name: name
              type: string
              summary: |
                Only show sessions whose associated token name match the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: ip_addr
              type: string
              summary: |
                Only show sessions who are associated with the given IP address.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid": "cbeffb8d-4d3d-49a1-b4cd-14b344dac1f2",
                "user_uuid": "ccc0430b-9d3d-4b1c-a980-dac769f64174",
                "created_at": "2017-10-24 16:39:03",
                "last_seen_at": "2017-10-24 16:39:03",
                "token_uuid": "",
                "name": "",
                "ip_addr": "127.0.0.1",
                "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36",
                "user_account": "admin",
                "current_session": false
              }
            ]
          summary: |
            {{JSON}}

            - **uuid** - The internal UUID assigned to this session by the SHIELD Core.

            - **user\_uuid** - The internal UUID corresponding to the user associated with the session.

            - **created\_at** - When the user created the session (upon login via WebUI or CLI).
              Date is formatted YYYY-MM-DD HH:MM:SS, in 24-hour notation.

            - **last\_seen\_at** - When the user last made contact with the 
              SHIELD Core via an authenticated endpoint.
              Date is formatted YYYY-MM-DD HH:MM:SS, in 24-hour notation.

            - **token\_uuid** - The uuid of the SHIELD Token associated with the session (if applicable).

            - **name** - The name of the SHIELD Token associated with the session (if applicable).

            - **ip\_addr** - The originating `IP address` of the user, from the
              point-of-view of the SHIELD Core.

            - **user\_agent** - The user agent associated with the last request made by the user.

            - **user\_account** - The account corresponding to the user associated with the session.

            - **current\_session** - Denotes whether the session corresponds to the requesting session.

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.

          - message: Unable to retrieve session information
            summary: *internal

      # }}}
      - name: GET /v2/auth/sessions/:uuid # {{{
        intro: |
          Retrieve a single login session
        access: [system, admin]
        response:
          json: |
              {
                "uuid": "cbeffb8d-4d3d-49a1-b4cd-14b344dac1f2",
                "user_uuid": "ccc0430b-9d3d-4b1c-a980-dac769f64174",
                "created_at": "2017-10-24 16:39:03",
                "last_seen_at": "2017-10-24 16:39:03",
                "token_uuid": "",
                "name": "",
                "ip_addr": "127.0.0.1",
                "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36",
                "user_account": "admin"
              }
          summary: |
            {{JSON}}

            - **uuid** - The internal UUID assigned to this session by the SHIELD Core.

            - **user\_uuid** - The internal UUID corresponding to the user associated with the session.

            - **created\_at** - When the user created the session (upon login via WebUI or CLI).
              Date is formatted YYYY-MM-DD HH:MM:SS, in 24-hour notation.

            - **last\_seen\_at** - When the user last made contact with the 
              SHIELD Core via an authenticated endpoint.
              Date is formatted YYYY-MM-DD HH:MM:SS, in 24-hour notation.

            - **token\_uuid** - The uuid of the SHIELD Token associated with the session (if applicable).

            - **name** - The name of the SHIELD Token associated with the session (if applicable).

            - **ip\_addr** - The originating `IP address` of the user, from the
              point-of-view of the SHIELD Core.

            - **user\_agent** - The user agent associated with the last request made by the user.

            - **user\_account** - The account corresponding to the user associated with the session.

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.

          - message: Unable to retrieve session information
            summary: *internal

      # }}}
      - name: DELETE /v2/auth/sessions/:uuid # {{{
        intro: |
          Revoke a user's session and force them to reauthenticate on next request.
        access: [system, admin]

        response:
          json: |
            {
              "ok": "Successfully cleared session 'd3092979-5a83-4006-8819-fd1695f9041f' (127.0.0.1)"
            }

        errors:
          - message: Session not found
            summary: |
              The session given by the URL UUID was not found in the database

          - message: Unable to clear session
            summary: *internal

          - message: Unable to retrieve session information
            summary: *internal


      # }}}

      - name: PATCH /v2/auth/user/settings # {{{
        intro: |
          Save user settings.
        access: any

        request:
          json: |
            {
              "default_tenant": "2a03d67b-6146-4716-b10a-42ec073cfb78"
            }

        response:
          json: |
            {
              "ok" : "Settings saved."
            }

        errors:
          - message: Authentication failed
            summary: |
              The request either lacked a session cookie (or an
              `X-Shield-Session` header), or some other internal
              error has occurred, and SHIELD administrators should
              investigate.

          - message: Unable to save settings
            summary: *internal



      # }}}

  - name: SHIELD Users
    intro: |
      SHIELD provides both a local user database, and the ability to
      map 3rd party systems into the SHIELD tenancy model.  These API
      endpoints allow you to manage the former, and query the results
      of the latter.

    endpoints:
      - name: GET /v2/auth/local/users # {{{
        intro: |
        access: [system, manager]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering users, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: uuid
              type: uuid
              summary: |
                Only show the local user that matches the given UUID.
                This is a FIXME - we probably need to remove this.
            - name: account
              type: string
              summary: |
                Only show local users whose account names (usernames)
                match the given value.  Subject to the `exact=(t|f)` query
                string parameter.
            - name: sysrole
              type: string
              summary: |
                Only show local users who have been assigned the given
                system role.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"       : "b30bb2dd-81d4-407f-91eb-a82ed3023218",
                "name"       : "Full Name",
                "account"    : "username",
                "sysrole"    : "engineer",

                "tenants": [
                  {
                    "uuid" : "d1fb6abf-55f2-4901-9662-8c6339e0a7d7",
                    "name" : "Tenant Name",
                    "role" : "operator"
                  }
                ]
              }
            ]

        errors:
          - message: Invalid limit parameter given
            summary: |
              Request specified a `limit` parameter that was either
              non-numeric, or was negative.  Note that `0` is a valid limit,
              standing for _unlimited_.

          - message: Unable to retrieve local users information
            summary: *internal



      # }}}
      - name: GET /v2/auth/local/users/:uuid # {{{
        intro: |
        access: [system, manager]

        response:
          json: |
            {
              "uuid"       : "b30bb2dd-81d4-407f-91eb-a82ed3023218",
              "name"       : "Full Name",
              "account"    : "username",
              "sysrole"    : "engineer",

              "tenants": [
                {
                  "uuid" : "d1fb6abf-55f2-4901-9662-8c6339e0a7d7",
                  "name" : "Tenant Name",
                  "role" : "operator"
                }
              ]
            }

        errors:
          - message: Unable to retrieve local user information
            summary: *internal

          - message: user '...' not found (for local auth provider)
            summary: *internal


      # }}}
      - name: POST /v2/auth/local/users # {{{
        intro: |
        access: [system, manager]

        request:
          json: |
            {
              "name"     : "Full Name",
              "account"  : "username",
              "password" : "cleartext password",
              "sysrole"  : "engineer"
            }
          summary: |
            {{CURL}}

            The `sysrole` parameter must be either empty (or not specified),
            or one of the following values: **admin**, **engineer**, or
            **operator**.

        response:
          json: |
            {
              "uuid"       : "b30bb2dd-81d4-407f-91eb-a82ed3023218",
              "name"       : "Full Name",
              "account"    : "username",
              "sysrole"    : "engineer"
            }
          summary: |
            {{JSON}}

            **NOTE** that the user's password (neither in hashed form, or in
            the clear) is never returned to requesters.

        errors:
          - message: System role '...' is invalid
            summary: |
              Request specified a `sysrole` payload parameter that was
              outside of the allowable set of values.

          - message: Unable to create local user '...'
            summary: *internal

          - message: User '...' already exists
            summary: |
              You attempted to create a new local user account, but the
              username was already assigned to a pre-existing account.
              The request should not be retried.



      # }}}
      - name: PATCH /v2/auth/local/users/:uuid # {{{
        intro: |
        access: [system, manager]

        request:
          json: |
            {
              "name"     : "Full Name",
              "password" : "cleartext password",
              "sysrole"  : "engineer"
            }
          summary: |
            {{CURL}}

            The `sysrole` parameter must be either empty (or not specified),
            or one of the following values: **admin**, **engineer**, or
            **operator**.

            **NOTE** that you cannot alter a users `account` after creation.

        response:
          json: |
            {
              "uuid"       : "b30bb2dd-81d4-407f-91eb-a82ed3023218",
              "name"       : "Full Name",
              "account"    : "username",
              "sysrole"    : "engineer"
            }

        errors:
          - message: No such local user
            summary: |
              Either the user given by the URL UUID was not found in the
              database, or that user was created by an authentication
              provider, and not SHIELD itself.

          - message: System role '...' is invalid
            summary: |
              Request specified a `sysrole` payload parameter that was
              outside of the allowable set of values.

          - message: Unable to update local user '...'
            summary: *internal



      # }}}
      - name: DELETE /v2/auth/local/users/:uuid # {{{
        intro: |
        access: [system, manager]

        response:
          json: |
            {
              "ok" : "Successfully deleted local user"
            }

        errors:
          - message: Local User '...' not found
            summary: |
              Either the user given by the URL UUID was not found in the
              database, or that user was created by an authentication
              provider, and not SHIELD itself.

          - message: Unable to retrieve local user information
            summary: *internal

          - message: Unable to delete local user '...'
            summary: *internal



      # }}}


  - name: SHIELD Core
    intro: |
      These endpoints allow clients to initialize brand new SHIELD
      Cores, and unlock or rekey existing ones.

    endpoints:
      - name: POST /v2/init # {{{
        intro: |
          Initializes a new SHIELD Core, to set up the encryption facilities
          for storing backup archive encryption keys safely and securely.
          Your SHIELD Core can only be initialized once.
        access: ~

        request:
          json: |
            {
              "master" : "your secret master password"
            }

          summary: |
            {{CURL}}

            Where:

              - message: master is the plaintext master password
                to use for encrypting the credentials to the
                SHIELD Core storage vault.

        response:
          json: |
            {
              "ok" : "Successfully initialized the SHIELD Core"
            }
          summary: |
            If all went well, and the SHIELD Core was properly initialized,
            you will receive a 200 OK, and the following response:

            {{JSON}}

        errors:
          - message: Unable to initialize the SHIELD Core
            summary: *internal

          - message: This SHIELD Core has already been initialized
            summary: |
              You are attempting to re-initialize a SHIELD Core,
              which is not allowed.


      # }}}
      - name: POST /v2/unlock # {{{
        intro: |
          Unlocks a SHIELD Core by providing the master password.  This
          allows SHIELD to decrypt the keys to access its storage vault and
          generate / retrieve backup archvie encryption keys safely and
          securely.
        access: ~

        request:
          json: |
            {
              "master" : "your secret master password"
            }
          summary: |
            {{CURL}}

            - message: master is the plaintext master password
              that was created when you initialized this SHIELD
              Core (or whatever you last rekeyed it to be).

        response:
          json: |
            {
              "ok" : "Successfully unlocked the SHIELD Core"
            }
          summary: |
            On success, you will receive a 200 OK, with the
            following response:

            {{JSON}}

        errors:
          - message: Unable to unlock the SHIELD Core
            summary: *internal

          - message: This SHIELD Core has not yet been initialized
            summary: |
              You may re-attempt this request after initializing
              the SHIELD Core.



      # }}}
      - name: POST /v2/rekey # {{{
        intro: |
          Changes the master password used for encrypting the credentials
          for the SHIELD Core storage vault (where backup archive encryption
          keys are held).
        access: ~

        request:
          json: |
            {
              "current" : "your CURRENT master password",
              "new"     : "what you want to change it to"
            }

        response:
          json: |
            {
              "ok" : "Successfully rekeyed the SHIELD core"
            }
          summary: |
            If all goes well, you will receive a 200 OK, and the
            following response:

            {{JSON}}

        errors:
          - message: Unable to rekey the SHIELD Core
            summary: *internal


      # }}}


  - name: SHIELD Agents
    intro: |
      These endpoints expose information about registered SHIELD Agents.

    endpoints:
      - name: GET /v2/agents # {{{
        intro: |
          Retrieves information about all registered SHIELD Agents.
        access: [system, admin]

        response:
          json: |
            {
              "agents": [
                {
                  "name"         : "prod/web/42",
                  "uuid"         : "1869e296-4aac-4a17-848d-04f73f743326",
                  "address"      : "127.0.0.1:5444",
                  "version"      : "dev",
                  "status"       : "ok",
                  "hidden"       : false,
                  "last_error"   : "",
                  "last_seen_at" : "2017-10-11 18:54:00"
                }
              ],
              "problems": {
                "1869e296-4aac-4a17-848d-04f73f743326": [
                  "This SHIELD agent is reporting ..."
                ]
              }
            }
          summary: |
            {{JSON}}

            The top-level `agents` key is a list of object describing each registered agent:

            - **name** - The name of the SHIELD Agent, as set by
              the local system administrator (which may not be the
              SHIELD site administrator).

            - **uuid** - The internal UUID assigned to this agent by the SHIELD Core.

            - **address** - The `host:port` of the agent, from the
              point-of-view of the SHIELD Core.

            - **version** - The version of the remote SHIELD Agent's software.

            - **status** - The health status of the remote SHIELD
              Agent, one of `ok` or `failing`.

            - **hidden** - Whether or not this agent has been administratively hidden.

            - **last\_error** - TBD

            - **last\_seen\_at** - When the remote SHIELD Agent last
              made contact with the SHIELD Core to refresh its
              registration and its metadata.  Date is formatted
              YYYY-MM-DD HH:MM:SS, in 24-hour notation.

            The top-level `problems` key maps agent UUIDs to a list of errors detected
            statically by the SHIELD Core software.  Each problem is represented as an
            English-language description of the underlying issue.  SHIELD reports these
            problems to assist site administrators who may be running heterogenous
            versions of the SHIELD Core and SHIELD Agent software.  In these
            environments, issues may arise due to version incompatibility.  Newer
            versions of the SHIELD Core may also be able to inform administrators about
            known deficiencies in older version of the SHIELD Agent and SHIELD plugins.

            **NOTE:** `problems` are reported by the SHIELD Core; it is perfectly
            acceptable for an agent to report itself as healthy, but for the SHIELD Core
            to assert that a problem exists.

        errors:
          - message: Unable to retrieve agent information
            summary: *internal


      # }}}
      - name: POST /v2/agents # {{{
        intro: |
          Initiate agent registration.  The client must supply a POST body
          with the details of the agent being registered.

          Once an agent has pre-registered, the SHIELD Core will schedule a
          "pingback" task, connecting to the agent using its remote peer
          address (from the registration HTTP conversation) and the given
          port.  This pingback occurs via the SSH protocol, with an op type
          of "ping".  The agent must respond with the same _name_ that it
          sent in the registration.

          This exchange allows the SHIELD to validate registration requests,
          using a weak form of authentication.
        access: ~

        request:
          json: |
            {
              "name" : "some-identifier",
              "port" : 5444
            }

          summary: |
            {{CURL}}

            Where:

            - message: name is the name of the agent to display in
              the backend, and in log messages.  Usually, an FQDN
              or other unique host identifier is preferable here.
            - message: port is the port number that the SHIELD
              agent is bound to.  The remote peer IP will be
              determined from the HTTP request's peer address.

        response:
          json: |
            {
              "ok" : "Pre-registered agent <name> at <host>:<port>"
            }
          summary: |
            On success, you will receive a 200 OK, and the following response:

            {{JSON}}

        errors:
          - message: No \`name' provided with pre-registration request
            summary: |
              Your request was missing the required `name`
              argument.  Re-attempt with the `name` argument.

          - message: No \`port' provided with pre-registration request
            summary: |
              Your request was missing the required `port`
              argument.  Re-attempt with the `port` argument.

          - message: Unable to pre-register agent \<name\> at \<host\>:\<port\>
            summary: *internal

          - message: Unable to determine remote peer address from '\<peer\>'
            summary: |
              SHIELD was unable to parse the HTTP connection's
              peer address as a valid IP address.  This should be
              investigated by the site administrators, your local
              network administrator, and possibly the SHIELD
              development team.


      # }}}
      - name: GET /v2/agents/:uuid # {{{
        intro: |
          Retrieve extended information about a single SHIELD Agent, including its
          plugin metadata (what plugins are present, what configuration they accept or
          require, etc.)
        access: [system, admin]

        response:
          json: |
            {
              "agent": {
                "name"         : "prod/web/42",
                "uuid"         : "1869e296-4aac-4a17-848d-04f73f743326",
                "address"      : "127.0.0.1:5444",
                "version"      : "dev",
                "status"       : "ok",
                "hidden"       : false,
                "last_error"   : "",
                "last_seen_at" : "2017-10-11 18:54:00"
              },
              "metadata": {
                "name"    : "prod/web/42",
                "version" : "dev",
                "health"  : "ok",

                "plugins": {
                  "fs": {
                    "author"   : "Stark & Wayne",
                    "features" : {
                      "store"  : "yes",
                      "target" : "no"
                    },

                    "fields": [
                      {
                        "mode"     : "store",
                        "name"     : "storage_account",
                        "title"    : "Storage Account",
                        "help"     : "Name of the Azure Storage Account for accessing the blobstore.",
                        "type"     : "string",
                        "required" : true
                      }
                    ]
                  }
                }
              },
              "problems": [
                "This SHIELD agent is reporting ..."
              ]
            }
          summary: |
            {{JSON}}

            The top-level `agents` key contains the same agent
            information that the `GET /v2/agents` endpoint
            returns.  Similarly, the `problems` key contains the
            list of issues the SHIELD Core detected, based on this
            agent's configuration / version.

            The `metadata` key is exclusive to this endpoint, and
            contains all of the agent metadata.  Of particular
            interest is the `plugins` key, which contains a map of
            plugin metadata, keyed by the plugin name.  The format
            of this metadata is documented in
            [/docs/plugins.md](/docs/plugins.md).


        errors:
          - message: Unable to retrieve agent information
            summary: *internal

          - message: No such agent
            summary: |
              The requested agent UUID was not found in the list
              of registered agents.



      # }}}
      - name: POST /v2/agents/:uuid/show # {{{
        intro: |
          Mark a single SHIELD agent as visible to all tenants, and
          available for configuration.
        access: [system, admin]

        request:
          json: ~
        response:
          json: |
            {
              "ok" : "Agent is now visible to everyone"
            }

        errors:
          - message: Unable to retrieve agent information
            summary: *internal

          - message: Unable to set agent visibility
            summary: *internal

          - message: No such agent
            summary: |
              The requested agent UUID was not found in the list
              of registered agents.



      # }}}
      - name: POST /v2/agents/:uuid/hide # {{{
        intro: |
          Hide a single SHIELD agent from all tenants, rendering it unusable
          in storage and target configuration.  Pre-existing configurations
          will continue to function; this only affects visibility for future
          configuration.
        access: [system, admin]

        request:
          json: ~
        response:
          json: |
            {
              "ok" : "Agent is now visible to everyone"
            }


        errors:
          - message: Unable to retrieve agent information
            summary: *internal

          - message: Unable to set agent visibility
            summary: *internal

          - message: No such agent
            summary: |
              The requested agent UUID was not found in the list
              of registered agents.



      # }}}
      - name: POST /v2/agents/:uuid/resync # {{{
        intro: |
          Re-synchronize a SHIELD agent by immediately contacting it via the
          agent channel and interrogating it for status and metadata.  This
          allows administrators to force a re-check of an agent, regardless of
          slow loop scheduling.
        access: [system, admin]

        request:
          json: ~
        response:
          json: |
            {
              "ok" : "Ad hoc agent resynchronization underway"
            }


        errors:
          - message: Unable to retrieve agent information
            summary: *internal

          - message: No such agent
            summary: |
              The requested agent UUID was not found in the list
              of registered agents.



      # }}}
      - name: GET /v2/tenants/:tenant/agents # {{{
        intro: |
          Retrieves information about all registered SHIELD Agents,
          viewable by a given tenant.
        access: [tenant, operator]

        response:
          json: |
            {
              "agents": [
                {
                  "name"         : "prod/web/42",
                  "uuid"         : "1869e296-4aac-4a17-848d-04f73f743326",
                  "address"      : "127.0.0.1:5444",
                  "version"      : "dev",
                  "status"       : "ok",
                  "hidden"       : false,
                  "last_error"   : "",
                  "last_seen_at" : "2017-10-11 18:54:00"
                }
              ]
            }
          summary: |
            {{JSON}}

            The top-level `agents` key is a list of object describing each registered agent:

            - **name** - The name of the SHIELD Agent, as set by
              the local system administrator (which may not be the
              SHIELD site administrator).

            - **uuid** - The internal UUID assigned to this agent by the SHIELD Core.

            - **address** - The `host:port` of the agent, from the
              point-of-view of the SHIELD Core.

            - **version - The version of the remote SHIELD Agent's software.

            - **status - The health status of the remote SHIELD
              Agent, one of `ok` or `failing`.

            - **hidden - Whether or not this agent has been administratively hidden.

            - **last\_error - TBD

            - **last\_seen\_at - When the remote SHIELD Agent last
              made contact with the SHIELD Core to refresh its
              registration and its metadata.  Date is formatted
              YYYY-MM-DD HH:MM:SS, in 24-hour notation.

        errors:
          - message: Unable to retrieve agent information
            summary: *internal


      # }}}
      - name: GET /v2/tenants/:tenant/agents/:uuid # {{{
        intro: |
          Retrieve extended information about a single SHIELD Agent,
          viewable by a given tenant.  This includes plugin metadata, but
          not problem information (which is accessible via `GET /v2/agents`,
          but only to SHIELD administrators).
        access: [tenant, operator]

        response:
          json: |
            {
              "agent": {
                "name"         : "prod/web/42",
                "uuid"         : "1869e296-4aac-4a17-848d-04f73f743326",
                "address"      : "127.0.0.1:5444",
                "version"      : "dev",
                "status"       : "ok",
                "hidden"       : false,
                "last_error"   : "",
                "last_seen_at" : "2017-10-11 18:54:00"
              },
              "metadata": {
                "name"    : "prod/web/42",
                "version" : "dev",
                "health"  : "ok",

                "plugins": {
                  "fs": {
                    "author"   : "Stark & Wayne",
                    "features" : {
                      "store"  : "yes",
                      "target" : "no"
                    },

                    "fields": [
                      {
                        "mode"     : "store",
                        "name"     : "storage_account",
                        "title"    : "Storage Account",
                        "help"     : "Name of the Azure Storage Account for accessing the blobstore.",
                        "type"     : "string",
                        "required" : true
                      }
                    ]
                  }
                }
              }
            }
          summary: |
            {{JSON}}

            The top-level `agents` key contains the same agent
            information that the `GET /v2/tenants/:tenant/agents` endpoint
            returns.

            The `metadata` key is exclusive to this endpoint, and
            contains all of the agent metadata.  Of particular
            interest is the `plugins` key, which contains a map of
            plugin metadata, keyed by the plugin name.  The format
            of this metadata is documented in
            [/docs/plugins.md](/docs/plugins.md).


        errors:
          - message: Unable to retrieve agent information
            summary: *internal

          - message: No such agent
            summary: |
              The requested agent UUID was not found in the list
              of registered agents visible to this tenant.



      # }}}


  - name: SHIELD Tenants
    intro: |
      Tenants serve to insulate groups of SHIELD users from one another,
      providing them a virtual view of SHIELD resources.  Each tenant
      has their own targets, stores, and retention policy definitions,
      as well as their own job configurations.  Each tenants archives
      and tasks are visible only to members of that tenant, pursuant to
      their assigned roles.

    endpoints:
      - name: GET /v2/tenants # {{{
        intro: |
          Retrieve the list of all tenants currently defined.
        access: [system, manager]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering tenants, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: uuid
              type: uuid
              summary: |
                Only show the tenant that matches the given UUID.
                This is a FIXME - we probably need to remove this.
            - name: name
              type: string
              summary: |
                Only show tenant whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid": "f2ebbb9f-87f9-43e0-8515-dfce5d4d844c",
                "name": "A Tenant",

                "archive_count"  : 32,
                "storage_used"   : 140509184,
                "daily_increase" : 1520435
              },
              {
                "uuid": "4b6f6e2a-6ac6-443e-a910-aa412744165e",
                "name": "Some Other Tenant",

                "archive_count"  : 2,
                "storage_used"   : 268435456,
                "daily_increase" : 268435456
              }
            ]
          summary: |
            {{JSON}}

            For each tenant, SHIELD will also return a handful of tenant
            metrics, including how many backup archives belong to the tenant
            (`archive_count`), the total amount of cloud storage used, in
            bytes (`storage_used`), and a linear-fit daily delta of storage
            usage (`daily_increase`), also in bytes.

        errors:
          - message: Unable to retrieve tenants information
            summary: *internal



        # }}}
      - name: POST /v2/tenants # {{{
        intro: |
          Create a new tenant.
        access: [system, manager]

        request:
          json: |
            {
              "name"  : "New Tenant Name",
              "users" : [
                {
                  "uuid"    : "989b724b-bd3d-4799-bfbd-75b2fb5b41f3",
                  "account" : "juser",
                  "role"    : "engineer"
                },
                {
                  "uuid"    : "96d24e33-8e57-4431-95fb-f18b9dfa319a",
                  "account" : "jhunt",
                  "role"    : "operator"
                }
              ]
            }
          summary: |
            {{CURL}}

            The `name` field is required.

            The `users` list contains a list of initial tenant
            role assignments.  The `account` key of each user
            object is optional, but can assist site administrators
            when troubleshooting assignment issues (since it will
            be printed to the log) -- integrations are encouraged
            to always send it.

            The `role` field indicates what level of access to
            grant each invitee, and must be one of:

              - **admin** - Full administrative control, including the ability to add
                and remove users from the tenant, and change role assignments.  Use with
                caution.

              - **engineer** - Full configuration control, including the ability to
                create, update, and delete targets, stores, and retention policies.

              - **operator** - Operational access for running ad hoc backup jobs,
                pausing and unpausing defined jobs, and performing restores.


        response:
          json: |
            {
              "name": "A New Tenant",
              "uuid": "52d20ef4-f154-431e-a5bb-bb3a200976bb",

              "archive_count"  : 0,
              "storage_used"   : 0,
              "daily_increase" : 0
            }
          summary: |
            {{JSON}}

            **NOTE**: You cannot (for obvious reasons) set the
            `archive_count`, `storage_used` and `daily_increase` fields when
            you create a tenant.

        errors:
          - message: Tenant name 'system' is reserved
            summary: |
              You attempted to create a tenant named system
              (case-insensitive), which is not allowed.  SHIELD uses the
              tenant name "SYSTEM" for its own, internal purposes.

          - message: Unable to creeate new tenant
            summary: *internal

          - message: |
              Unable to install template retention policies into new tenant
            summary: *internal

          - message: Unrecognized user account
            summary: |
              The request indicated a tenant invitation to a user
              account that was not found in the SHIELD database.
              The request should not be retried.

          - message: |
              Unable to invite $user to tenant $tenant - only
              local users can be invited.
            summary: |
              The request indicated a tenant invitation to a user
              account that was created by a non-local
              authentication provider (i.e. Github).  Tenant
              assignments for 3rd party accounts are governed
              solely by their corresponding authentication
              provider configuration.  The request should not be
              retried.

          - message: Unable to invite $user to tenant $tenant
            summary: *internal



        # }}}
      - name: GET /v2/tenants/:uuid # {{{
        intro: |
          Request more detailed information about a single tenant.
        access: [system, manager]

        response:
          json: |
            {
              "name": "A Tenant",
              "uuid": "f2ebbb9f-87f9-43e0-8515-dfce5d4d844c",

              "archive_count"  : 32,
              "storage_used"   : 140509184,
              "daily_increase" : 1520435,

              "members": [
                {
                  "uuid"    : "5cb299bf-217f-4756-8eaa-e8a47865869e",
                  "account" : "jhunt",
                  "name"    : "James Hunt",
                  "backend" : "local",
                  "role"    : "admin",
                  "sysrole" : ""
                }
              ]
            }
          summary: |
            {{JSON}}

            The `members` key will be absent if this tenant has no members.

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: Unable to retrieve tenant memberships information
            summary: *internal
          
          - message: No such tenant
            summary: |
              The requested tenant UUID was not found in the database.



        # }}}
      - name: PATCH /v2/tenants/:uuid # {{{
        intro: |
          Update a tenant with new attributes.
        access: [system, manager]

        request:
          json: |
            {
              "name" : "A New Name"
            }
          summary: |
            {{CURL}}

            **NOTE**: You cannot (for obvious reasons) set the
            `archive_count`, `storage_used` and `daily_increase` fields when
            you update a tenant.


        response:
          json: |
            {
              "name" : "A New Name",
              "uuid" : "adcfee48-8b43-4ba3-9438-e0da55b8e9df",

              "archive_count"  : 32,
              "storage_used"   : 140509184,
              "daily_increase" : 1520435
            }

        errors:
          - message: Unable to update tenant
            summary: *internal

          - message: Unable to retrieve tenant information
            summary: *internal

          - message: No such tenant
            summary: |
              The requested tenant UUID was not found in the database.


        # }}}
      - name: POST /v2/tenants/:uuid/invite # {{{
        intro: |
          Invite one or more local users to a tenant.
        access: [system, manager]

        request:
          json: |
            {
              "users": [
                {
                  "uuid"    : "5cb299bf-217f-4756-8eaa-e8a47865869e",
                  "account" : "jhunt",
                  "role"    : "operator"
                },
                {
                  "uuid"    : "c608cc65-b134-4581-9bdc-1fa3d0367961",
                  "account" : "tmitchell",
                  "role"    : "engineer"
                }
              ]
            }

          summary: |
            {{CURL}}

            Even if you only need to invite a single user, you must specify a list of
            user objects.

        response:
          json: |
            {
              "ok" : "Invitations sent"
            }


        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: Unable to update tenant memberships information
            summary: *internal

          - message: Unrecognized user account
            summary: |
              The request indicated a tenant invitation to a user
              account that was not found in the SHIELD database.
              The request should not be retried.

          - message: |
              Unable to invite $user to tenant $tenant - only
              local users can be invited
            summary: |
              The request indicated a tenant invitation to a user
              account that was created by a non-local
              authentication provider (i.e. Github).  Tenant
              assignments for 3rd party accounts are governed
              solely by their corresponding authentication
              provider configuration.  The request should not be
              retried.

          - message: Unable to invite $user to tenant $tenant
            summary: *internal

          - message: No such tenant
            summary: |
              The requested tenant UUID was not found in the database.



        # }}}
      - name: POST /v2/tenants/:uuid/banish # {{{
        intro: |
          Remove a user from a tenant they currently belong to.
        access: [system, manager]

        request:
          json: |
            {
              "users": [
                {
                  "uuid"    : "20d5bd91-9f7b-4551-9279-8571b8292003",
                  "account" : "gfranks"
                },
                {
                  "uuid"    : "c608cc65-b134-4581-9bdc-1fa3d0367961",
                  "account" : "tmitchell"
                }
              ]
            }

        response:
          json: |
            {
              "ok" : "Banishments served."
            }

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: Unable to update tenant memberships information
            summary: *internal

          - message: Unrecognized user account
            summary: |
              The request indicated a tenant banishment of a user
              account that was not found in the SHIELD database.
              The request should not be retried.

          - message: |
              Unable to banish $user to tenant $tenant - only
              local users can be banished
            summary: |
              The request indicated a tenant banishment of a user
              account that was created by a non-local
              authentication provider (i.e. Github).  Tenant
              assignments for 3rd party accounts are governed
              solely by their corresponding authentication
              provider configuration.  The request should not be
              retried.

          - message: Unable to banish $user to tenant $tenant
            summary: *internal

          - message: No such tenant
            summary: |
              The requested tenant UUID was not found in the database.


        # }}}
      - name: DELETE /v2/tenants/:uuid # {{{
        intro: |
          Remove a tenant.
        access: [system, manager]

        response:
          json: |
            {
              "ok": "Successfully deleted tenant"
            }

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: Unable to delete tenant
            summary: *internal

          - message: No such tenant
            summary: |
              The requested tenant UUID was not found in the database.

        # }}}


  - name: SHIELD Targets
    intro: |
      Targets represent the data systems that SHIELD runs backup and
      restore operations against as course of normal function.

    endpoints:
      - name: GET /v2/tenants/:tenant/targets # {{{
        intro: |
          Retrieve all defined targets for a tenant.
        access: [tenant, operator]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering targets, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: unused
              type: bool
              summary: |
                When filtering targets, skip those that are unused (true) or used (false)
            - name: name
              type: string
              summary: |
                Only show targets whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: plugin
              type: string
              summary: |
                Only show targets who are associated with the given plugin.
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"     : "b4400ee0-dce9-4277-9948-02a56ad51b17",
                "name"     : "Some Target",
                "summary"  : "The operator-supplied description of this target",
                "agent"    : "127.0.0.1:5444",
                "plugin"   : "fs",

                "config" : {
                  "target"   : "specific",
                  "settings" : "and configuration"
                }
              }
            ]

        errors:
          - message: Unable to retrieve targets information
            summary: *internal



        # }}}
      - name: POST /v2/tenants/:tenant/targets # {{{
        intro: |
          Create a new target in a tenant.
        access: [tenant, engineer]

        request:
          query:
            - name: test
              type: bool
              summary: |
                Perform all validation and preparatory steps, but don't
                actually create the target in the database.  This is useful
                for validating that a target _could_ be created, without
                creating it (i.e. for defering creation until later).

          json: |
            {
              "name"     : "New Target Name",
              "summary"  : "A longer description of the target",
              "agent"    : "127.0.0.1:5444",
              "endpoint" : "{}",
              "plugin"   : "plugin"
            }

          summary: |
            {{CURL}}

            Note: the `endpoint` key is currently a string of JSON, which
            means that it contains lots of escape sequences.  Future versions
            of the v2 API (prior to launch) may alter this to be the full
            JSON, inline, for both readability and sanity's sake.

            FIXME: Fix target.endpoint string -> JSON problem.

            The following query string parameters are honored:

            {{QUERY}}

        response:
          json: |
            {
              "uuid"     : "b6d03df5-6978-43d8-ad9e-a22f8ec8457a",
              "name"     : "New Target Name",
              "summary"  : "A longer description of the target",
              "agent"    : "127.0.0.1:5444",
              "endpoint" : "{}",
              "plugin"   : "plugin"
            }
          summary: |
            {{JSON}}

            Note: the `endpoint` key is currently a string of JSON, which
            means that it contains lots of escape sequences.  Future versions
            of the v2 API (prior to launch) may alter this to be the full
            JSON, inline, for both readability and sanity's sake.

            FIXME: Fix target.endpoint string -> JSON problem.

        errors:
          - message: Authorization required
            summary: |
              The request was made without an authenticated
              session or auth token.  See **Authentication** for
              more details.  The request may be retried after
              authentication.

          - message: Unable to retrieve tenant information
            summary: *internal

          - message: No such tenant
            summary: No tenant was found with the given UUID.

          - message: Unable to create new data target
            summary: *internal


        # }}}
      - name: GET /v2/tenants/:tenant/targets/:uuid # {{{
        intro: |
          Retrieve a single target for a tenant.
        access: [tenant, operator]

        response:
          json: |
            {
              "uuid"     : "b4400ee0-dce9-4277-9948-02a56ad51b17",
              "name"     : "Some Target",
              "summary"  : "The operator-supplied description of this target",
              "agent"    : "127.0.0.1:5444",
              "endpoint" : "{}",
              "plugin"   : "fs"
            }
          summary: |
            {{JSON}}

            Note: the `endpoint` key is currently a string of JSON, which
            means that it contains lots of escape sequences.  Future versions
            of the v2 API (prior to launch) may alter this to be the full
            JSON, inline, for both readability and sanity's sake.

            FIXME: Fix target.endpoint string -> JSON problem.

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: No such target
            summary: |
              No target with the given UUID exists on the
              specified tenant.



        # }}}
      - name: PUT /v2/tenants/:tenant/targets/:uuid # {{{
        intro: |
          Update an existing target on a tenant.
        access: [tenant, engineer]

        request:
          json: |
            {
              "name"     : "Updated Target Name",
              "summary"  : "A longer description of the target",
              "agent"    : "127.0.0.1:5444",
              "endpoint" : "{}",
              "plugin"   : "plugin"
            }
          summary: |
            {{CURL}}

            You can specify as many or few of these fields as you want;
            omitted fields will be left at their previous values.

            Note: the `endpoint` key is currently a string of JSON, which
            means that it contains lots of escape sequences.  Future versions
            of the v2 API (prior to launch) may alter this to be the full
            JSON, inline, for both readability and sanity's sake.

            FIXME: Fix target.endpoint string -> JSON problem.

        response:
          json: |
            {
              "ok" : "Updated target successfully"
            }
          summary: |
            {{JSON}}

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: No such target
            summary: |
              No target with the given UUID exists on the
              specified tenant.

          - message: Unable to update target
            summary: |
              No target with the given UUID exists on the
              specified tenant.



        # }}}
      - name: DELETE /v2/tenants/:tenant/targets/:uuid # {{{
        intro: |
          Remove a target from a tenant.
        access: [tenant, engineer]

        response:
          json: |
            {
              "ok": "Target deleted successfully"
            }
          summary: |
            {{JSON}}

        errors:
          - message: Unable to retrieve tenant information
            summary: *internal

          - message: No such target
            summary: |
              No target with the given UUID exists on the
              specified tenant.

          - message: Unable to delete target
            summary: *internal

          - message: The target cannot be deleted at this time
            summary: |
              This target is referenced by one or more extant job
              configuration; deleting it would lead to an
              incomplete (and unusable) setup.


        # }}}


  - name: SHIELD Stores
    intro: |
      Storage systems are essential to any data protection efforts,
      since the protected data must reside elsewhere, on another system
      in order to be truly safe.  Stores provide definitions of external
      storage system where backup archives will be kept.

      **NOTE:** the API endpoints in this section deal exclusively with
      tenant-scoped storage systems.  For information on the endpoints
      for managing global storage solutions, see the section titled
      **SHIELD Global Resources**.

    endpoints:
      - name: GET /v2/tenants/:tenant/stores # {{{
        intro: |
          Retrieve all defined stores for a tenant.
        access: [tenant, operator]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering stores, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: unused
              type: bool
              summary: |
                When filtering stores, skip those that are unused (true) or used (false)
            - name: name
              type: string
              summary: |
                Only show stores whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: plugin
              type: string
              summary: |
                Only show stores who are associated with the given plugin.
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"    : "925c83ad-22e6-4cdd-bf63-6dd6d09cd86f",
                "name"    : "Cloud Storage Name",
                "global"  : false,
                "summary" : "A longer description of the storage configuration",
                "agent"   : "127.0.0.1:5444",
                "plugin"  : "fs",
                "config"  : {
                  "base_dir" : "/var/data/root",
                  "bsdtar"   : "bsdtar"
                },
                "threshold": 1073741824
              }
            ]
          summary: |
            {{JSON}}

            The values under `config` will depend entirely on what the
            operator specified when they initially configured the storage
            system.

        errors:
          - message: Unable to retrieve storage systems information
            summary: *internal



        # }}}
      - name: POST /v2/tenants/:tenant/stores # {{{
        intro: |
          Create a new store on a tenant.
        access: [tenant, engineer]

        request:
          query:
            - name: test
              type: bool
              summary: |
                Perform all validation and preparatory steps, but don't
                actually create the store in the database.  This is useful
                for validating that a store _could_ be created, without
                creating it (i.e. for defering creation until later).

          json: |
            {
              "name"    : "Storage System Name",
              "summary" : "A longer description for this storage system.",
              "plugin"  : "plugin-name",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "plugin-specific": "configuration"
              },
              "threshold": 1073741824
            }

          summary: |
            {{CURL}}

            The values under `config` will depend entirely on which `plugin`
            has been selected; no validation will be done by the SHIELD Core,
            until the storage system is used in a job.

            The following query string parameters are honored:

            {{QUERY}}

        response:
          json: |
            {
              "name"    : "Storage System Name",
              "summary" : "A longer description for this storage system.",
              "plugin"  : "plugin-name",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "plugin-specific": "configuration"
              },
              "threshold": 1073741824
            }
          summary: |
            {{JSON}}


        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to create new storage system
            summary: *internal



        # }}}
      - name: GET /v2/tenants/:tenant/stores/:uuid # {{{
        intro: |
          Retrieve a single store for the given tenant.
        access: [tenant, operator]

        response:
          json: |
            {
              "uuid"    : "925c83ad-22e6-4cdd-bf63-6dd6d09cd86f",
              "name"    : "Cloud Storage Name",
              "global"  : false,
              "summary" : "A longer description of the storage configuration",
              "plugin"  : "fs",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "base_dir" : "/var/data/root",
                "bsdtar"   : "bsdtar"
              },
              "threshold": 1073741824
            }
          summary: |
            {{JSON}}

            The values under `config` will depend entirely on what the
            operator specified when they initially configured the storage
            system.

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: No such storage system
            summary: |
              No storage system with the given UUID exists on the
              specified tenant.



        # }}}
      - name: PUT /v2/tenants/:tenant/stores/:uuid # {{{
        intro: |
          Update an existing store on a tenant.
        access: [tenant, engineer]

        request:
          json: |
            {
              "name"    : "Updated Store Name",
              "summary" : "A longer description of the storage system",
              "agent"   : "127.0.0.1:5444",
              "plugin"  : "plugin",
              "config"  : {
                "new": "plugin configuration"
              },
              "threshold": 1073741824
            }
          summary: |
            {{CURL}}

            You can specify as many or few of these fields as you want;
            omitted fields will be left at their previous values.  If `config`
            is supplied, it will overwrite the value currently in the
            database.

            The values under `config` will depend entirely on which `plugin`
            has been selected; no validation will be done by the SHIELD Core,
            until the storage system is used in a job.

        response:
          json: |
            {
              "name"    : "Updated Store Name",
              "summary" : "A longer description of the storage system",
              "agent"   : "127.0.0.1:5444",
              "plugin"  : "plugin",
              "config"  : {
                "new": "plugin configuration"
              },
              "threshold": 1073741824
            }

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to update storage system
            summary: *internal

          - message: No such storage system
            summary: |
              No storage system with the given UUID exists on the
              specified tenant.



        # }}}
      - name: DELETE /v2/tenants/:tenant/stores/:uuid # {{{
        intro: |
          Remove a store from a tenant.
        access: [tenant, engineer]

        response:
          json: |
            {
              "ok": "Storage system deleted successfully"
            }

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to delete storage system
            summary: *internal

          - message: No such storage system
            summary: |
              No storage system with the given UUID exists on the
              specified tenant.

          - message: The storage system cannot be deleted at this time
            summary: |
              This storage system is referenced by one or more
              extant job configuration; deleting it would lead to
              an incomplete (and unusable) setup.


      # }}}


  - name: SHIELD Retention Policies
    intro: |
      Retention Policies govern how long backup archives are kept,
      to ensure that storage usage doesn't continue to increase
      inexorably.

    endpoints:
      - name: GET /v2/tenants/:tenant/policies # {{{
        intro: |
          Retrieve all defined retention policies for a tenant.
        access: [tenant, operator]

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering policies, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: unused
              type: bool
              summary: |
                When filtering policies, skip those that are unused (true) or used (false)
            - name: name
              type: string
              summary: |
                Only show policies whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"    : "f4dedf80-cdb2-4c81-9a58-b3a8282e3202",
                "name"    : "Long-Term Storage",
                "summary" : "A long-term solution, for infrequent backups only.",
                "expires" : 7776000
              }
            ]
          summary: |
            {{JSON}}

            The `expires` key is specified in seconds, but must
            always be a multiple of 86400 (1 day).

        errors:
          - message: Unable to retrieve retention policies information
            summary: *internal



        # }}}
      - name: POST /v2/tenants/:tenant/policies # {{{
        intro: |
          Create a new retention policy in a tenant.
        access: [tenant, engineer]

        request:
          query:
            - name: test
              type: bool
              summary: |
                Perform all validation and preparatory steps, but don't
                actually create the policy in the database.  This is useful
                for validating that a policy _could_ be created, without
                creating it (i.e. for defering creation until later).

          json: |
            {
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }
          summary: |
            {{CURL}}

            The `expires` value must be specified in seconds, and
            must be at least 86,400 (1 day) and be a multiple of
            86,400.

            The following query string parameters are honored:

            {{QUERY}}

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }

        errors:
          - message: Retention policy expiry must be greater than 1 day
            summary: |
              You supplied an `expires` value less than 86,400.
              Please re-try the request with a higher value.

          - message: Retention policy expire must be a multiple of 1 day
            summary: |
              You supplied an `expires` value that was not a
              multiple of 86,400.  Please re-try the request with
              a different value.

          - message: Unable to create retention policy
            summary: *internal



        # }}}
      - name: GET /v2/tenants/:tenant/policies/:uuid # {{{
        intro: |
          Retrieve a single retention policy for a tenant.
        access: [tenant, operator]

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }

        errors:
          - message: Unable to retrieve retention policy information
            summary: *internal

          - message: No such retention policy
            summary: |
              No retention policy with the given UUID exists on
              the specified tenant.



        # }}}
      - name: PUT /v2/tenants/:tenant/policies/:uuid # {{{
        intro: |
          Update a single retention policy on a tenant.
        access: [tenant, engineer]

        request:
          json: |
            {
              "name"    : "Updated Retention Policy Name",
              "summary" : "A longer description of the retention policy",
              "expires" : 86400
            }
          summary: |
            {{CURL}}

            You can specify as many or few of these fields as you want;
            omitted fields will be left at their previous values.

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }
          summary: |
            {{JSON}}


        errors:
          - message: Retention policy expiry must be greater than 1 day
            summary: |
              You supplied an `expires` value less than 86,400.
              Please re-try the request with a higher value.

          - message: Retention policy expire must be a multiple of 1 day
            summary: |
              You supplied an `expires` value that was not a
              multiple of 86,400.  Please re-try the request with
              a different value.

          - message: Unable to retrieve retention policy template information
            summary: *internal

          - message: Unable to update retention policy
            summary: *internal

          - message: No such retention policy
            summary: |
              No retention policy with the given UUID exists on
              the specified tenant.


        # }}}
      - name: DELETE /v2/tenants/:tenant/policies/:uuid # {{{
        intro: |
          Remove a retention policy from a tenant.
        access: [tenant, engineer]

        response:
          json: |
            {
              "ok": "Retention policy deleted successfully"
            }

        errors:
          - message: Unable to retrieve retention policy information
            summary: *internal

          - message: No such retention policy
            summary: |
              No retention policy with the given UUID exists on
              the specified tenant.

          - message: Unable to delete retention policy
            summary: *internal

          - message: The retention policy cannot be deleted at this time
            summary: |
              This retention policy is referenced by one or more
              extant job configuration; deleting it would lead to
              an incomplete (and unusable) setup.



        # }}}


  - name: SHIELD Jobs
    intro: |
      Jobs are discrete, schedulable backup operations that tie together a
      target system, a cloud storage system, a schedule, and a retention
      policies.  Without Jobs, SHIELD cannot actually back anything up.

    endpoints:
      - name: GET /v2/tenants/:tenant/jobs # {{{
        intro: |
          Retrieve all defined jobs for a tenant.
        access: [tenant, operator]

        request:
          example: /v2/tenants/:tenant/jobs?name=redis&paused=t
          query:
            - name: exact
              type: bool
              summary: |
                When filtering jobs, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: paused
              type: bool
              summary: |
                Show only paused (`paused=t`) or unpaused (`paused=f`) jobs.
                If omitted, all jobs are shown, regardless of their
                pausedness.
            - name: name
              type: string
              summary: |
                Show only jobs whose names match the given value.
                Subject to the `exact=(t|f)` query string parameter.
              # FIXME : handle target name filtering
            - name: target
              type: string
              summary: |
                Show only jobs whose target UUIDs match the given value.
                Subject to the `exact=(t|f)` query string parameter.
              # FIXME : handle store name filtering
            - name: store
              type: string
              summary: |
                Show only jobs whose store UUIDs match the given value.
                Subject to the `exact=(t|f)` query string parameter.
            - name: policy
              type: string
              summary: |
                Show only jobs whose retention policy UUIDs match the given
                value.  Subject to the `exact=(t|f)` query string parameter.
          summary: |
            {{CURL}}

            By default, all jobs for the tenant will be returned.  You can
            filter down to a subset of that by the following query string
            parameters:

            {{QUERY}}

        response:
          json: |
            {
              "uuid"     : "30f34d8f-762e-402a-b7ce-769a4a68de90",
              "name"     : "Job Name",
              "summary"  : "A longer description",
              "expiry"   : 604800,
              "schedule" : "daily 4am",
              "paused"   : false,
              "agent"    : "10.0.0.5:5444",
              "last_run" : "2017-10-19 03:00:00",
              "status"   : "done",

              "policy" : {
                "uuid"    : "9a112894-10eb-439f-afd5-01597d8faf64",
                "name"    : "Retention Policy Name",
                "summary" : "A longer description"
              },

              "store" : {
                "uuid"    : "5945ef33-2cb6-4d7e-a9b7-43cce1773457",
                "name"    : "Cloud Storage System Name",
                "summary" : "A longer description",
                "plugin"  : "s3",
                "config"  : {
                  "storage" : "configuration"
                }
              },

              "target" : {
                "uuid"   : "9f602367-256a-4454-be56-9ddde1257f13",
                "name"   : "Data System Name",
                "plugin" : "fs",
                "config" : {
                  "target" : "configuration"
                }
              }
            }

        errors:
          - message: Unable to retrieve tenant job information.
            summary: *internal

        # }}}
      - name: POST /v2/tenants/:tenant/jobs # {{{
        intro: |
          Configure a new backup job on a tenant.
        access: [tenant, engineer]

        request:
          json: |
            {
              "name"     : "New Job Name",
              "summary"  : "A longer description...",
              "schedule" : "daily 4am",
              "paused"   : false,

              "store"    : "af1ad037-c8c1-4036-984a-3cf726b4081d",
              "target"   : "2c64d9ff-fc9f-4114-8e89-9f7c84fcaac7",
              "policy"   : "cb6b0503-4741-4cfd-9a1d-11b5a5aaadde"
            }

          summary: |
            {{CURL}}

            **NOTE**: As of right now, the `store`, `target`, and `policy`
            values must be passed as the UUIDs of the related objects.

            FIXME : allow non-UUIDs for all three.

        response:
          json: |
            {
              "uuid"     : "30f34d8f-762e-402a-b7ce-769a4a68de90",
              "name"     : "Job Name",
              "summary"  : "A longer description",
              "expiry"   : 604800,
              "schedule" : "daily 4am",
              "paused"   : false,
              "agent"    : "10.0.0.5:5444",
              "last_run" : "2017-10-19 03:00:00",
              "last_task_status": "",

              "policy" : {
                "uuid"    : "9a112894-10eb-439f-afd5-01597d8faf64",
                "name"    : "Retention Policy Name",
                "summary" : "A longer description"
              },

              "store" : {
                "uuid"    : "5945ef33-2cb6-4d7e-a9b7-43cce1773457",
                "name"    : "Cloud Storage System Name",
                "summary" : "A longer description",
                "plugin"  : "s3",
                "config"  : {
                  "storage" : "configuration"
                }
              },

              "target" : {
                "uuid"   : "9f602367-256a-4454-be56-9ddde1257f13",
                "name"   : "Data System Name",
                "plugin" : "fs",
                "config" : {
                  "target" : "configuration"
                }
              }
            }
        errors:
          - message: Unable to create new job
            summary: *internal

        # }}}
      - name: GET /v2/tenants/:tenant/jobs/:uuid # {{{
        intro: |
          Retrieve a single job for a tenant.
        access: [tenant, operator]
        
        response:
          json: |
            {
              "uuid"     : "30f34d8f-762e-402a-b7ce-769a4a68de90",
              "name"     : "Job Name",
              "summary"  : "A longer description",
              "expiry"   : 604800,
              "schedule" : "daily 4am",
              "paused"   : false,
              "agent"    : "10.0.0.5:5444",
              "last_run" : "2017-10-19 03:00:00",
              "last_task_status": "",

              "policy" : {
                "uuid"    : "9a112894-10eb-439f-afd5-01597d8faf64",
                "name"    : "Retention Policy Name",
                "summary" : "A longer description"
              },

              "store" : {
                "uuid"    : "5945ef33-2cb6-4d7e-a9b7-43cce1773457",
                "name"    : "Cloud Storage System Name",
                "summary" : "A longer description",
                "plugin"  : "s3",
                "config"  : {
                  "storage" : "configuration"
                }
              },

              "target" : {
                "uuid"   : "9f602367-256a-4454-be56-9ddde1257f13",
                "name"   : "Data System Name",
                "plugin" : "fs",
                "config" : {
                  "target" : "configuration"
                }
              }
            }

        errors:
          - message: Unable to retrieve tenant job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

        # }}}
      - name: PUT /v2/tenants/:tenant/jobs/:uuid # {{{
        intro: |
          Update a single job on a tenant.
        access: [tenant, engineer]

        request:
          json: |
            {
              "name"     : "New Name",
              "summary"  : "An updated summary",
              "schedule" : "daily 4am",
              "store"    : "a6ef5aea-51f6-4e91-a490-3063395f879b",
              "target"   : "af1425ed-53fd-4ab6-a425-fb230c383901",
              "policy"   : "c16a4783-19b8-400d-8b51-f47dcdc11da3"
            }
          summary: |
            {{CURL}}

            Any of the fields in the request payload can be omitted to keep
            the pre-existing value.

            **NOTE**: As of right now, the `store`, `target`, and `policy`
            values must be passed as the UUIDs of the related objects.

            FIXME : allow non-UUIDs for all three.
        response:
          json: |
            {
              "ok": "Updated job successfully"
            }

        errors:
          - message: Unable to retrieve job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to update job.
            summary: *internal

        # }}}
      - name: DELETE /v2/tenants/:tenant/jobs/:uuid # {{{
        intro: |
          Remove a job from a tenant.
        access: [tenant, engineer]

        response:
          json: |
            {
              "ok": "Job deleted successfully"
            }

        errors:
          - message: Unable to retrieve job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to delete job.
            summary: *internal

          #This error is not currently able to be thrown but could be in the future 
          #if job deletion is conditional
          - message: The job could not be deleted at this time.
            summary: *internal


        # }}}
      - name: POST /v2/tenants/:tenant/jobs/:uuid/run # {{{
        intro: |
          Perform an ad hoc backup job run
        access: [tenant, operator]

        request:
          json: ~

        response:
          json: |
            {
              "ok": "Scheduled ad hoc backup job run",
              "task_uuid": "6d38e8bd-42e9-4c23-bbb6-9a480e0e2a82"
            }

        errors:
          - message: Unable to retrieve job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to schedule ad hoc backup job run.
            summary: *internal

        # }}}
      - name: POST /v2/tenants/:tenant/jobs/:uuid/pause # {{{
        intro: |
          Pause a job, to prevent it from being scheduled.
        access: [tenant, operator]
    
        request:
          json: ~

        response:
          json: |
            {
              "ok": "Paused job successfully"
            }

        errors:
          - message: Unable to retrieve job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to pause job.
            summary: *internal

        # }}}
      - name: POST /v2/tenants/:tenant/jobs/:uuid/unpause # {{{
        intro: |
          Unpause a job, allowing it to be scheduled again.
        access: [tenant, operator]

        request:
          json: ~

        response:
          json: |
            {
              "ok": "Unpaused job successfully"
            }

        errors:
          - message: Unable to retrieve job information.
            summary: *internal

          - message: No such job
            summary: |
              The requested job was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to unpause job.
            summary: *internal


        # }}}


  - name: SHIELD Tasks
    intro: |
      Tasks represent the context, status, and output of the execution of
      some operation, be it a scheduled backup job being run, an ad hoc
      restore operation, etc.

      Since tasks represent internal state, they cannot easily be created or
      updated via operators.  Instead, the execution of the job, or the
      triggering of some other action, will cause a task to spring into
      existence and move through its lifecycle.

    endpoints:
      - name: GET /v2/tenants/:tenant/tasks # {{{
        intro: |
          Retrieve all tasks for a tenant.
        access: [tenant, operator]

        request:
          query:
            - name: active
              type: bool
              summary: |
                When filtering tasks, show those that are active (true) or inactive (false)
            - name: status
              type: string
              summary: |
                Only show tasks whose status matches the given value.  
            - name: target
              type: uuid
              summary: |
                Only show tasks associated with a given target...
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"         : "df2fd352-83b8-45b8-8f7b-ef74cf9eafdc",
                "owner"        : "user@backend",
                "type"         : "backup",
                "job_uuid"     : "bd2c5ac0-b499-4085-857e-69fa38441419",
                "archive_uuid" : "eb096379-7c45-4679-9b47-c563276dc22e",
                "status"       : "running",
                "started_at"   : "2017-10-17 04:51:16",
                "stopped_at"   : "",
                "log"          : "running log...",
                "notes"        : "Annotated notes about this task",
                "clear"        : "manual"
              }
            ]

        errors:
          - message: Unable to retrieve task information
            summary: *internal

          - message: Invalid limit parameter given
            summary: |
              Request specified a `limit` parameter that was either
              non-numeric, or was negative.  Note that `0` is a valid limit,
              standing for _unlimited_.


        # }}}
      - name: GET /v2/tenants/:tenant/tasks/:uuid # {{{
        intro: |
          Retrieve a single task.
        access: [tenant, operator]

        response:
          json: |
            {
              "uuid"         : "df2fd352-83b8-45b8-8f7b-ef74cf9eafdc",
              "owner"        : "user@backend",
              "type"         : "backup",
              "job_uuid"     : "bd2c5ac0-b499-4085-857e-69fa38441419",
              "archive_uuid" : "eb096379-7c45-4679-9b47-c563276dc22e",
              "status"       : "running",
              "started_at"   : "2017-10-17 04:51:16",
              "stopped_at"   : "",
              "log"          : "running log...",
              "notes"        : "Annotated notes about this task",
              "clear"        : "manual"
            }

        errors:
          - message: Unable to retrieve task information
            summary: *internal

          - message: No such task
            summary: |
              You requested details on a task that either doesn't exist, or
              is not tied to the given tenant.


        # }}}
      - name: DELETE /v2/tenants/:tenant/tasks/:uuid # {{{
        intro: |
          Cancel a task.
        access: [tenant, operator]

        response:
          json: |
            {
              "ok": "Task canceled successfully"
            }

        errors:
          - message: Unable to retrieve task information
            summary: *internal

          - message: No such task
            summary: |
              You requested details on a task that either doesn't exist, or
              is not tied to the given tenant.

          - message: Unable to cancel task
            summary: *internal


        # }}}


  - name: SHIELD Backup Archives
    intro: |
      Each backup archive contains the complete set of data retrieved from a
      target system during a single backup job task.

      Archives cannot be created _a priori_ via the API alone.  New archives
      will be created from scheduled and ad hoc backup jobs, when they
      succeed.

    endpoints:
      - name: GET /v2/tenants/:tenant/archives # {{{
        intro: |
          Retrieve all archives for a tenant.
        access: [tenant, operator]

        request:
          query:
            - name: target
              type: uuid
              summary: |
                Only show the archives that beloing to the the given target UUID.
            - name: store
              type: uuid
              summary: |
                Only show the archives that beloing to the the given store UUID.
            - name: before
              type: date
              summary: |
                Only show the archives created before the given time.
            - name: after
              type: date
              summary: |
                Only show the archives created after the given time.
            - name: status
              type: string
              summary: |
                Only show the archives with the given status.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid": "5c8cef06-190c-4b07-a0b7-8452f6faff26",
                "key": "2017/10/27/2017-10-27-120512-948428f4-3a83-4b5d-8a41-7d27ca81ce8d",
                "taken_at": "2017-10-27 16:05:25",
                "expires_at": "2017-10-28 16:05:25",
                "notes": "",
                "status": "valid",
                "purge_reason": "",
                "target_uuid": "51d9cced-b11d-4b76-b9f3-fe0be4cd6087",
                "target_name": "SHIELD",
                "target_plugin": "fs",
                "target_endpoint": "{\"base_dir\":\"/e/no/ent\",\"bsdtar\":\"bsdtar\",\"exclude\":\"var/*.db\"}",
                "store_uuid": "828fccae-a11e-41ee-bc13-d33c4dff1241",
                "store_name": "CloudStor",
                "store_plugin": "fs",
                "store_endpoint": "{\"base_dir\":\"/tmp/shield.testdev.storeNy0fewQ\",\"bsdtar\":\"bsdtar\"}",
                "job": "Hourly",
                "encryption_type": "aes256-ctr",
                "tenant_uuid": "5524167e-cf56-4a8f-9580-cfca40949316",
                "size": 43306681
              }
            ]

        errors:
          - message: Unable to retrieve backup archives information
            summary: *internal

          - message: Invalid limit parameter given
            summary: |
              Request specified a `limit` parameter that was either
              non-numeric, or was negative.  Note that `0` is a valid limit,
              standing for _unlimited_.

        # }}}
      - name: GET /v2/tenants/:tenant/archives/:uuid # {{{
        intro: |
          Retrieve a single archive for a tenant.
        access: [tenant, operator]

        response:
          json: |
            {
              "uuid": "5c8cef06-190c-4b07-a0b7-8452f6faff26",
              "key": "2017/10/27/2017-10-27-120512-948428f4-3a83-4b5d-8a41-7d27ca81ce8d",
              "taken_at": "2017-10-27 16:05:25",
              "expires_at": "2017-10-28 16:05:25",
              "notes": "",
              "status": "valid",
              "purge_reason": "",
              "target_uuid": "51d9cced-b11d-4b76-b9f3-fe0be4cd6087",
              "target_name": "SHIELD",
              "target_plugin": "fs",
              "target_endpoint": "{\"base_dir\":\"/e/no/ent\",\"bsdtar\":\"bsdtar\",\"exclude\":\"var/*.db\"}",
              "store_uuid": "828fccae-a11e-41ee-bc13-d33c4dff1241",
              "store_name": "CloudStor",
              "store_plugin": "fs",
              "store_endpoint": "{\"base_dir\":\"/tmp/shield.testdev.storeNy0fewQ\",\"bsdtar\":\"bsdtar\"}",
              "job": "Hourly",
              "encryption_type": "aes256-ctr",
              "tenant_uuid": "5524167e-cf56-4a8f-9580-cfca40949316",
              "size": 43306681
            }
        errors:
          - message: Unable to retrieve backup archive information
            summary: *internal

          - message: Archive Not Found
            summary: |
              You requested details on an archive that either doesn't exist, or
              is not tied to the given tenant.

        # }}}
      - name: PUT /v2/tenants/:tenant/archives/:uuid # {{{
        intro: |
          Update a single archive on a tenant.
        access: [tenant, operator]

        request:
          json: |
            {
              "notes": "Notes for this specific archive"
            }

        response:
          json: |
            {
              "uuid": "5c8cef06-190c-4b07-a0b7-8452f6faff26",
              "key": "2017/10/27/2017-10-27-120512-948428f4-3a83-4b5d-8a41-7d27ca81ce8d",
              "taken_at": "2017-10-27 16:05:25",
              "expires_at": "2017-10-28 16:05:25",
              "notes": "Notes for this specific archive",
              "status": "valid",
              "purge_reason": "",
              "target_uuid": "51d9cced-b11d-4b76-b9f3-fe0be4cd6087",
              "target_name": "SHIELD",
              "target_plugin": "fs",
              "target_endpoint": "{\"base_dir\":\"/e/no/ent\",\"bsdtar\":\"bsdtar\",\"exclude\":\"var/*.db\"}",
              "store_uuid": "828fccae-a11e-41ee-bc13-d33c4dff1241",
              "store_name": "CloudStor",
              "store_plugin": "fs",
              "store_endpoint": "{\"base_dir\":\"/tmp/shield.testdev.storeNy0fewQ\",\"bsdtar\":\"bsdtar\"}",
              "job": "Hourly",
              "encryption_type": "aes256-ctr",
              "tenant_uuid": "5524167e-cf56-4a8f-9580-cfca40949316",
              "size": 43306681
            }

        errors:
          - message: Unable to retrieve backup archive information
            summary: *internal

          - message: No such backup archive
            summary: |
              You requested details on an archive that either doesn't exist, or
              is not tied to the given tenant.

          - message: Unable to update backup archive
            summary: *internal

        # }}}
      - name: POST /v2/tenants/:tenant/archives/:uuid/restore # {{{
        intro: |
          Restore a backup archive for a tenant, either to the original
          target system it was taken from, or against a different target
          owned by the same tenant.
        access: [tenant, operator]

        request:
          json: |
            {
              "target" : "2a1731c0-7d0e-4f31-8860-7d0ae7a34261"
            }
          summary: |
            {{CURL}}

            Here, `target` is an optional UUID of an alternative data system
            to restore this archive to.  This target must exist inside the
            same tenant.  By default, if `target` is omitted, the archive
            will be restored back to the target it was created from.

        response:
          json: |
            {
              "uuid"         : "df2fd352-83b8-45b8-8f7b-ef74cf9eafdc",
              "owner"        : "user@backend",
              "type"         : "restore",
              "job_uuid"     : "bd2c5ac0-b499-4085-857e-69fa38441419",
              "archive_uuid" : "eb096379-7c45-4679-9b47-c563276dc22e",
              "status"       : "running",
              "started_at"   : "2017-10-17 04:51:16",
              "stopped_at"   : "",
              "log"          : "running log...",
              "notes"        : "Annotated notes about this task",
              "clear"        : "manual"
            }
          summary: |
            When a restore has been scheduled for execution, it generates a
            task inside of SHIELD, which is then returned as the result to
            the requester:

            {{JSON}}

            The `type` of this task will always be `restore`, and usually,
            `log` will be empty and `stopped_at` will have no value, since
            the task hasn't had time to run to completion.

        errors:
          - message: Unable to retrieve backup archive information
            summary: *internal

          - message: No such backup archive
            summary: |
              The requested backup archive was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to schedule a restore task
            summary: *internal


        # }}}
      - name: DELETE /v2/tenants/:tenant/archives/:uuid # {{{
        intro: |
          Remove an archive from a tenant, and purge the archive
          data from the backing storage system.
        access: [tenant, operator]

        response:
          json: |
            {
              "ok": "Archive deleted successfully"
            }

        errors:
          - message: Unable to retrieve backup archive information
            summary: *internal

          - message: No such backup archive
            summary: |
              The requested backup archive was not found in the database, or
              it was not associated with the given tenant.

          - message: Unable to delete backup archive
            summary: *internal

          #This error is not currently able to be thrown but could be in the future 
          #if archive deletion is conditional
          - message: The backup archive could not be deleted at this time.
            summary: *internal


        # }}}


  - name: SHIELD Global Resources
    intro: |
      Some resources are shared between tenants, either implicitly via
      copying (like retention policies), or explicitly (like shared
      storage system definitions).

    endpoints:
      - name: GET /v2/global/stores # {{{
        intro: |
          Retrieve all globally-defined stores.
        access: any

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering stores, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: unused
              type: bool
              summary: |
                When filtering stores, skip those that are unused (true) or used (false)
            - name: name
              type: string
              summary: |
                Only show stores whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: plugin
              type: string
              summary: |
                Only show stores who are associated with the given plugin.
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"    : "925c83ad-22e6-4cdd-bf63-6dd6d09cd86f",
                "name"    : "Cloud Storage Name",
                "global"  : true,
                "summary" : "A longer description of the storage configuration",
                "agent"   : "127.0.0.1:5444",
                "plugin"  : "fs",
                "config"  : {
                  "base_dir" : "/var/data/root",
                  "bsdtar"   : "bsdtar"
                }
              }
            ]
          summary: |
            {{JSON}}

            The values under `config` will depend entirely on what the
            operator specified when they initially configured the storage
            system.

        errors:
          - message: Unable to retrieve storage systems information
            summary: *internal



        # }}}
      - name: POST /v2/global/stores # {{{
        intro: |
          Create a new shared storage system.  This storage will be visible
          to all tenants.
        access: [system, engineer]

        request:
          json: |
            {
              "name"    : "Storage System Name",
              "summary" : "A longer description for this storage system.",
              "plugin"  : "plugin-name",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "plugin-specific": "configuration"
              }
            }
          summary: |
            {{CURL}}

            The values under `config` will depend entirely on which `plugin`
            has been selected; no validation will be done by the SHIELD Core,
            until the storage system is used in a job.

        response:
          json: |
            {
              "name"    : "Storage System Name",
              "summary" : "A longer description for this storage system.",
              "plugin"  : "plugin-name",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "plugin-specific": "configuration"
              }
            }

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to create new storage system
            summary: *internal



        # }}}
      - name: GET /v2/global/stores/:uuid # {{{
        intro: |
          Retrieve a single globally-defined storage system.
        access: any

        response:
          json: |
            {
              "uuid"    : "925c83ad-22e6-4cdd-bf63-6dd6d09cd86f",
              "name"    : "Cloud Storage Name",
              "global"  : true,
              "summary" : "A longer description of the storage configuration",
              "plugin"  : "fs",
              "agent"   : "127.0.0.1:5444",
              "config"  : {
                "base_dir" : "/var/data/root",
                "bsdtar"   : "bsdtar"
              }
            }
          summary: |
            {{JSON}}

            The values under `config` will depend entirely on what the
            operator specified when they initially configured the storage
            system.

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: No such storage system
            summary: |
              No storage system with the given UUID exists
              (globally).



        # }}}
      - name: PUT /v2/global/stores/:uuid # {{{
        intro: |
          Update an existing globally-defined storage system.
        access: [system, engineer]

        request:
          json: |
            {
              "name"    : "Updated Store Name",
              "summary" : "A longer description of the storage system",
              "agent"   : "127.0.0.1:5444",
              "plugin"  : "plugin",
              "config"  : {
                "new": "plugin configuration"
              }
            }
          summary: |
            {{CURL}}

            You can specify as many or few of these fields as you want;
            omitted fields will be left at their previous values.  If `config`
            is supplied, it will overwrite the value currently in the
            database.

            The values under `config` will depend entirely on which `plugin`
            has been selected; no validation will be done by the SHIELD Core,
            until the storage system is used in a job.

        response:
          json: |
            {
              "name"    : "Updated Store Name",
              "summary" : "A longer description of the storage system",
              "agent"   : "127.0.0.1:5444",
              "plugin"  : "plugin",
              "config"  : {
                "new": "plugin configuration"
              }
            }

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to update storage system
            summary: *internal

          - message: No such storage system
            summary: |
              No storage system with the given UUID exists
              (globally).



        # }}}
      - name: DELETE /v2/global/stores/:uuid # {{{
        intro: |
          Remove a globally-defined storage system.
        access: [system, engineer]

        response:
          json: |
            {
              "ok": "Storage system deleted successfully"
            }

        errors:
          - message: Unable to retrieve storage system information
            summary: *internal

          - message: Unable to delete storage system
            summary: *internal

          - message: The storage system cannot be deleted at this time
            summary: |
              This storage system is referenced by one or more
              extant job configuration; deleting it would lead to
              an incomplete (and unusable) setup.



        # }}}
      - name: GET /v2/global/policies # {{{
        intro: |
          Retrieve all defined retention policy templates.
        access: any

        request:
          query:
            - name: exact
              type: bool
              summary: |
                When filtering policies, perform either exact field / value
                matching (`exact=t`), or fuzzy search (`exact=f`, the
                default)
            - name: unused
              type: bool
              summary: |
                When filtering policies, skip those that are unused (true) or used (false)
            - name: name
              type: string
              summary: |
                Only show policies whose name matches the given value.  
                Subject to the `exact=(t|f)` query string parameter.
            - name: limit
              type: number
              summary: |
                Limit the returned result set to the first _limit_ users
                that match the other filtering rules.  A limit of `0` (the
                default) denotes an unlimited search.

        response:
          json: |
            [
              {
                "uuid"    : "f4dedf80-cdb2-4c81-9a58-b3a8282e3202",
                "name"    : "Long-Term Storage",
                "summary" : "A long-term solution, for infrequent backups only.",
                "expires" : 7776000
              }
            ]
          summary: |
            {{JSON}}

            The `expires` key is specified in seconds, but must always be a
            multiple of 86400 (1 day).

        errors:
          - message: Unable to retrieve retention policy templates information
            summary: *internal



        # }}}
      - name: POST /v2/global/policies # {{{
        intro: |
          Create a new retention policy template.
        access: [system, engineer]

        request:
          json: |
            {
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }
          summary: |
            {{CURL}}

            The `expires` value must be specified in seconds, and must be at
            least 86,400 (1 day) and be a multiple of 86,400.

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }

        errors:
          - message: Retention policy expiry must be greater than 1 day
            summary: |
              You supplied an `expires` value less than 86,400.
              Please re-try the request with a higher value.

          - message: Retention policy expire must be a multiple of 1 day
            summary: |
              You supplied an `expires` value that was not a
              multiple of 86,400.  Please re-try the request with
              a different value.

          - message: Unable to create retention policy template
            summary: *internal



        # }}}
      - name: GET /v2/global/policies/:uuid # {{{
        intro: |
          Retrieve a single retention policy template.
        access: any

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }

        errors:
          - message: Unable to retrieve retention policy template information
            summary: *internal

          - message: No such retention policy template
            summary: |
              No retention policy template with the given UUID
              exists globally.



        # }}}
      - name: PUT /v2/global/policies/:uuid # {{{
        intro: |
          Update a single retention policy template.
        access: [system, engineer]

        request:
          json: |
            {
              "name"    : "Updated Retention Policy Name",
              "summary" : "A longer description of the retention policy",
              "expires" : 86400
            }
          summary: |
            {{CURL}}

            You can specify as many or few of these fields as you want;
            omitted fields will be left at their previous values.

            **NOTE:** Updating a retention policy template will not affect any
            tenants created prior to the update; updates will apply to new,
            future tenants.

        response:
          json: |
            {
              "uuid"    : "4882b332-6182-4123-984f-f9e5dd8dae20",
              "name"    : "Retention Policy Name",
              "summary" : "A longer description of the policy",
              "expires" : 86400
            }

        errors:
          - message: Unable to retrieve retention policy template information
            summary: *internal

          - message: Retention policy expiry must be greater than 1 day
            summary: |
              You supplied an `expires` value less than 86,400.
              Please re-try the request with a higher value.

          - message: Retention policy expire must be a multiple of 1 day
            summary: |
              You supplied an `expires` value that was not a
              multiple of 86,400.  Please re-try the request with
              a different value.

          - message: Unable to update retention policy template
            summary: *internal



        # }}}
      - name: DELETE /v2/global/policies/:uuid # {{{
        intro: |
          Remove a retention policy template.

          **NOTE:** Removing a retention policy template will not affect any
          tenants created prior to the removal; the template will not be
          copied into any future tenants.
        access: [system, engineer]

        response:
          json: |
            {
              "ok": "Retention policy template deleted successfully"
            }

        errors:
          - message: Unable to retrieve retention policy template information
            summary: *internal

          - message: No such retention policy template
            summary: |
              No retention policy with the given UUID exists on
              the specified tenant.

          - message: Unable to delete retention policy template
            summary: *internal

          - message: The retention policy template cannot be deleted at this time
            summary: |
              This retention policy is referenced by one or more
              extant job configuration; deleting it would lead to
              an incomplete (and unusable) setup.  Note that this
              error should never happen.



        # }}}
